{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst constants = require('./constants');\nconst crypto = require('crypto');\nclass OutOfPacketsError extends Error {}\nfunction _convertBase64(result, value, size, offset) {\n  for (let i = 0; i < size; i++) {\n    result[offset + size - i - 1] = constants.TNS_BASE64_ALPHABET_ARRAY[value & 0x3f];\n    value = value >> 6;\n  }\n  return offset + size;\n}\nfunction encodeRowID(rowID) {\n  let offset = 0;\n  if (rowID.rba !== 0 || rowID.partitionID !== 0 || rowID.blockNum !== 0 || rowID.slotNum != 0) {\n    const result = Buffer.allocUnsafe(constants.TNS_MAX_ROWID_LENGTH);\n    offset = _convertBase64(result, rowID.rba, 6, offset);\n    offset = _convertBase64(result, rowID.partitionID, 3, offset);\n    offset = _convertBase64(result, rowID.blockNum, 6, offset);\n    _convertBase64(result, rowID.slotNum, 3, offset);\n    return result.toString('utf8');\n  }\n}\n\n// obfuscate value and clear memory for Buffers as they are from Buffer pool\n// and are possible to stay longer\nfunction setObfuscatedValue(value) {\n  const buf = crypto.randomBytes(Buffer.byteLength(value));\n  const bytes = Buffer.from(value, 'utf8');\n  const len = Buffer.byteLength(value);\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(buf[i] ^ bytes[i]);\n  }\n  bytes.fill(0);\n  return {\n    obfuscatedValue: buf,\n    value: arr\n  };\n}\n\n// returns the Deobfuscated value, after removing the obfuscation\n// and clear memory of temporary Buffers coming from Buffer pool\nfunction getDeobfuscatedValue(value, obfuscatedValue) {\n  const arr = [];\n  for (let i = 0; i < value.length; i++) {\n    arr.push(value[i] ^ obfuscatedValue[i]);\n  }\n  const buf = Buffer.from(arr);\n  arr.fill(0);\n  const retVal = buf.toString();\n  buf.fill(0);\n  return retVal;\n}\nmodule.exports = {\n  encodeRowID,\n  getDeobfuscatedValue,\n  OutOfPacketsError,\n  setObfuscatedValue\n};","map":{"version":3,"names":["Buffer","require","constants","crypto","OutOfPacketsError","Error","_convertBase64","result","value","size","offset","i","TNS_BASE64_ALPHABET_ARRAY","encodeRowID","rowID","rba","partitionID","blockNum","slotNum","allocUnsafe","TNS_MAX_ROWID_LENGTH","toString","setObfuscatedValue","buf","randomBytes","byteLength","bytes","from","len","arr","push","fill","obfuscatedValue","getDeobfuscatedValue","length","retVal","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/protocol/utils.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('./constants');\nconst crypto = require('crypto');\n\nclass OutOfPacketsError extends Error { }\n\nfunction _convertBase64(result, value, size, offset) {\n  for (let i = 0;i < size;i++) {\n    result[offset + size - i - 1] = constants.TNS_BASE64_ALPHABET_ARRAY[value & 0x3f];\n    value = value >> 6;\n  }\n  return offset + size;\n}\n\nfunction encodeRowID(rowID) {\n  let offset = 0;\n  if (rowID.rba !== 0 || rowID.partitionID !== 0 || rowID.blockNum !== 0 || rowID.slotNum != 0) {\n    const result = Buffer.allocUnsafe(constants.TNS_MAX_ROWID_LENGTH);\n    offset = _convertBase64(result, rowID.rba, 6, offset);\n    offset = _convertBase64(result, rowID.partitionID, 3, offset);\n    offset = _convertBase64(result, rowID.blockNum, 6, offset);\n    _convertBase64(result, rowID.slotNum, 3, offset);\n    return result.toString('utf8');\n  }\n}\n\n// obfuscate value and clear memory for Buffers as they are from Buffer pool\n// and are possible to stay longer\nfunction setObfuscatedValue(value) {\n  const buf = crypto.randomBytes(Buffer.byteLength(value));\n  const bytes = Buffer.from(value, 'utf8');\n  const len = Buffer.byteLength(value);\n\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(buf[i] ^ bytes[i]);\n  }\n  bytes.fill(0);\n  return {obfuscatedValue: buf, value: arr};\n}\n\n// returns the Deobfuscated value, after removing the obfuscation\n// and clear memory of temporary Buffers coming from Buffer pool\nfunction getDeobfuscatedValue(value, obfuscatedValue) {\n  const arr = [];\n  for (let i = 0; i < value.length; i++) {\n    arr.push(value[i] ^ obfuscatedValue[i]);\n  }\n  const buf = Buffer.from(arr);\n  arr.fill(0);\n  const retVal = buf.toString();\n  buf.fill(0);\n  return retVal;\n}\n\nmodule.exports = {\n  encodeRowID,\n  getDeobfuscatedValue,\n  OutOfPacketsError,\n  setObfuscatedValue\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}