{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaury\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\PenPick_project\\\\finalProject\\\\front\\\\src\\\\component\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport Stomp from 'webstomp-client';\nimport React, { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  // 받은 메시지를 저장하기 위한 상태\n  const [messages, setMessages] = useState([]);\n\n  // Stomp 클라이언트를 저장하기 위한 상태\n  const [stompClient, setStompClient] = useState(null);\n\n  // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\n  const [inputMessage, setInputMessage] = useState('');\n\n  // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\n  useEffect(() => {\n    // WebSocket 연결을 설정하는 함수\n    const connect = () => {\n      // WebSocket 통신을 위한 SockJS 객체 생성\n      const socket = new SockJS('http://localhost:8081/websocket');\n      console.log('여기까지 됨');\n      // WebSocket 연결 위에 Stomp 클라이언트 생성\n      var stomp = Stomp.over(socket);\n      console.log('여기까지도 됨');\n\n      // WebSocket 연결 상태를 확인하여 연결이 안 되어 있다면 연결 시도\n      if (socket.readyState !== 1) {\n        stomp.connect({}, frame => {\n          console.log('연결됨: ' + frame);\n          setStompClient(stomp);\n        });\n      }\n\n      // 컴포넌트가 언마운트될 때 소켓 연결을 닫음\n      return () => {\n        socket.close();\n      };\n    };\n\n    // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\n    connect();\n  }, []);\n  const sendMessage = content => {\n    if (stompClient) {\n      // 내용과 송신자 정보를 포함한 메시지 객체 생성\n      const message = {\n        content\n      };\n      // 메시지를 '/app/chat' 목적지로 서버에 전송\n      stompClient.send('/app/websocket', {}, JSON.stringify(message));\n      console.log(JSON.stringify(message));\n    } else {\n      console.error('Stomp client is not initialized.');\n    }\n  };\n\n  // '/topic/messages' 목적지에서 메시지를 구독하는 함수\n  const subscribeToMessages = () => {\n    // '/topic/messages' 목적지를 구독\n    stompClient.subscribe('/topic/messages', response => {\n      // 받은 메시지를 파싱하고 상태에 추가\n      const message = JSON.parse(response.body);\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n  };\n\n  // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\n  useEffect(() => {\n    if (stompClient) {\n      subscribeToMessages();\n    }\n  }, [stompClient]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [message.sender, \": \", message.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setInputMessage(e.target.value),\n      value: inputMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage(inputMessage),\n      children: \"\\uC804\\uC1A1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"nWnl0H/blwPoFpYhRwGg6Lt2d2o=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Stomp","React","useState","useEffect","SockJS","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","stompClient","setStompClient","inputMessage","setInputMessage","connect","socket","console","log","stomp","over","readyState","frame","close","sendMessage","content","message","send","JSON","stringify","error","subscribeToMessages","subscribe","response","parse","body","prevMessages","children","map","index","sender","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaury/OneDrive/바탕 화면/PenPick_project/finalProject/front/src/component/Chat.js"],"sourcesContent":["import Stomp from 'webstomp-client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport SockJS from 'sockjs-client';\r\n\r\nconst Chat = () => {\r\n    // 받은 메시지를 저장하기 위한 상태\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Stomp 클라이언트를 저장하기 위한 상태\r\n    const [stompClient, setStompClient] = useState(null);\r\n\r\n    // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\r\n    const [inputMessage, setInputMessage] = useState('');\r\n\r\n    // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\r\n    useEffect(() => {\r\n        // WebSocket 연결을 설정하는 함수\r\n        const connect = () => {\r\n            // WebSocket 통신을 위한 SockJS 객체 생성\r\n            const socket = new SockJS('http://localhost:8081/websocket');\r\n            console.log('여기까지 됨');\r\n            // WebSocket 연결 위에 Stomp 클라이언트 생성\r\n            var stomp = Stomp.over(socket);\r\n            console.log('여기까지도 됨');\r\n\r\n            \r\n              // WebSocket 연결 상태를 확인하여 연결이 안 되어 있다면 연결 시도\r\n            if (socket.readyState !== 1) {\r\n                stomp.connect({}, frame => {\r\n                    console.log('연결됨: ' + frame);\r\n                    setStompClient(stomp);\r\n                });\r\n            }\r\n\r\n            // 컴포넌트가 언마운트될 때 소켓 연결을 닫음\r\n            return () => {\r\n                socket.close();\r\n            };\r\n            \r\n        };\r\n     \r\n        // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\r\n        connect();\r\n   \r\n    }, []);\r\n\r\n    const sendMessage = content => {\r\n        if (stompClient) {\r\n            // 내용과 송신자 정보를 포함한 메시지 객체 생성\r\n            const message = { content };\r\n            // 메시지를 '/app/chat' 목적지로 서버에 전송\r\n            stompClient.send('/app/websocket',{}, JSON.stringify(message));\r\n            console.log(JSON.stringify(message));\r\n        } else {\r\n            console.error('Stomp client is not initialized.');\r\n        }\r\n    };\r\n\r\n    // '/topic/messages' 목적지에서 메시지를 구독하는 함수\r\n    const subscribeToMessages = () => {\r\n        // '/topic/messages' 목적지를 구독\r\n        stompClient.subscribe('/topic/messages', response => {\r\n            // 받은 메시지를 파싱하고 상태에 추가\r\n            const message = JSON.parse(response.body);\r\n            setMessages(prevMessages => [...prevMessages, message]);\r\n        });\r\n    };\r\n\r\n    // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\r\n    useEffect(() => {\r\n        if (stompClient) {\r\n            subscribeToMessages();\r\n        }\r\n    }, [stompClient]);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {messages.map((message, index) => (\r\n                    <div key={index}>\r\n                        {message.sender}: {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                onChange={e => setInputMessage(e.target.value)}\r\n                value={inputMessage}\r\n            />\r\n            <button onClick={() => sendMessage(inputMessage)}>전송</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}