{"ast":null,"code":"// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\nclass AqDeqOptionsImpl {\n  //---------------------------------------------------------------------------\n  // getCondition()\n  //\n  // Returns the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getCondition() {\n    errors.throwNotImplemented(\"getting condition (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConsumerName()\n  //\n  // Returns the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getConsumerName() {\n    errors.throwNotImplemented(\"getting consumer name (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCorrelation()\n  //\n  // Returns the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getCorrelation() {\n    errors.throwNotImplemented(\"getting correlation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMode()\n  //\n  // Returns the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getMode() {\n    errors.throwNotImplemented(\"getting mode (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMsgId()\n  //\n  // Returns the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getMsgId() {\n    errors.throwNotImplemented(\"getting message id (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getNavigation()\n  //\n  // Returns the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getNavigation() {\n    errors.throwNotImplemented(\"getting navigation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTransformation()\n  //\n  // Returns the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getTransformation() {\n    errors.throwNotImplemented(\"getting transformation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getVisibility()\n  //\n  // Returns the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getVisibility() {\n    errors.throwNotImplemented(\"getting visibility (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getWait()\n  //\n  // Returns the wait to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getWait() {\n    errors.throwNotImplemented(\"getting wait (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCondition()\n  //\n  // Sets the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setCondition() {\n    errors.throwNotImplemented(\"setting condition (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setConsumerName()\n  //\n  // Sets the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setConsumerName() {\n    errors.throwNotImplemented(\"setting consumer name (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCorrelation()\n  //\n  // Sets the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setCorrelation() {\n    errors.throwNotImplemented(\"setting correlation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setMode()\n  //\n  // Sets the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setMode() {\n    errors.throwNotImplemented(\"setting mode (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setMsgId()\n  //\n  // Sets the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setMsgId() {\n    errors.throwNotImplemented(\"setting message id (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setNavigation()\n  //\n  // Sets the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setNavigation() {\n    errors.throwNotImplemented(\"setting navigation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setTransformation()\n  //\n  // Sets the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setTransformation() {\n    errors.throwNotImplemented(\"setting transformation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setVisibility()\n  //\n  // Sets the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setVisibility() {\n    errors.throwNotImplemented(\"setting visibility (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setWait()\n  //\n  // Sets the wait to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setWait() {\n    errors.throwNotImplemented(\"setting wait (dequeue options)\");\n  }\n}\nmodule.exports = AqDeqOptionsImpl;","map":{"version":3,"names":["errors","require","AqDeqOptionsImpl","getCondition","throwNotImplemented","getConsumerName","getCorrelation","getMode","getMsgId","getNavigation","getTransformation","getVisibility","getWait","setCondition","setConsumerName","setCorrelation","setMode","setMsgId","setNavigation","setTransformation","setVisibility","setWait","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/impl/aqDeqOptions.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass AqDeqOptionsImpl {\n\n  //---------------------------------------------------------------------------\n  // getCondition()\n  //\n  // Returns the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getCondition() {\n    errors.throwNotImplemented(\"getting condition (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConsumerName()\n  //\n  // Returns the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getConsumerName() {\n    errors.throwNotImplemented(\"getting consumer name (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCorrelation()\n  //\n  // Returns the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getCorrelation() {\n    errors.throwNotImplemented(\"getting correlation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMode()\n  //\n  // Returns the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getMode() {\n    errors.throwNotImplemented(\"getting mode (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMsgId()\n  //\n  // Returns the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getMsgId() {\n    errors.throwNotImplemented(\"getting message id (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getNavigation()\n  //\n  // Returns the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getNavigation() {\n    errors.throwNotImplemented(\"getting navigation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTransformation()\n  //\n  // Returns the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getTransformation() {\n    errors.throwNotImplemented(\"getting transformation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getVisibility()\n  //\n  // Returns the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getVisibility() {\n    errors.throwNotImplemented(\"getting visibility (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getWait()\n  //\n  // Returns the wait to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getWait() {\n    errors.throwNotImplemented(\"getting wait (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCondition()\n  //\n  // Sets the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setCondition() {\n    errors.throwNotImplemented(\"setting condition (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setConsumerName()\n  //\n  // Sets the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setConsumerName() {\n    errors.throwNotImplemented(\"setting consumer name (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCorrelation()\n  //\n  // Sets the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setCorrelation() {\n    errors.throwNotImplemented(\"setting correlation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setMode()\n  //\n  // Sets the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setMode() {\n    errors.throwNotImplemented(\"setting mode (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setMsgId()\n  //\n  // Sets the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setMsgId() {\n    errors.throwNotImplemented(\"setting message id (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setNavigation()\n  //\n  // Sets the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setNavigation() {\n    errors.throwNotImplemented(\"setting navigation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setTransformation()\n  //\n  // Sets the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setTransformation() {\n    errors.throwNotImplemented(\"setting transformation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setVisibility()\n  //\n  // Sets the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setVisibility() {\n    errors.throwNotImplemented(\"setting visibility (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setWait()\n  //\n  // Sets the wait to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setWait() {\n    errors.throwNotImplemented(\"setting wait (dequeue options)\");\n  }\n\n}\n\nmodule.exports = AqDeqOptionsImpl;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEtC,MAAMC,gBAAgB,CAAC;EAErB;EACA;EACA;EACA;EACA;EACAC,YAAYA,CAAA,EAAG;IACbH,MAAM,CAACI,mBAAmB,CAAC,qCAAqC,CAAC;EACnE;;EAEA;EACA;EACA;EACA;EACA;EACAC,eAAeA,CAAA,EAAG;IAChBL,MAAM,CAACI,mBAAmB,CAAC,yCAAyC,CAAC;EACvE;;EAEA;EACA;EACA;EACA;EACA;EACAE,cAAcA,CAAA,EAAG;IACfN,MAAM,CAACI,mBAAmB,CAAC,uCAAuC,CAAC;EACrE;;EAEA;EACA;EACA;EACA;EACA;EACAG,OAAOA,CAAA,EAAG;IACRP,MAAM,CAACI,mBAAmB,CAAC,gCAAgC,CAAC;EAC9D;;EAEA;EACA;EACA;EACA;EACA;EACAI,QAAQA,CAAA,EAAG;IACTR,MAAM,CAACI,mBAAmB,CAAC,sCAAsC,CAAC;EACpE;;EAEA;EACA;EACA;EACA;EACA;EACAK,aAAaA,CAAA,EAAG;IACdT,MAAM,CAACI,mBAAmB,CAAC,sCAAsC,CAAC;EACpE;;EAEA;EACA;EACA;EACA;EACA;EACAM,iBAAiBA,CAAA,EAAG;IAClBV,MAAM,CAACI,mBAAmB,CAAC,0CAA0C,CAAC;EACxE;;EAEA;EACA;EACA;EACA;EACA;EACAO,aAAaA,CAAA,EAAG;IACdX,MAAM,CAACI,mBAAmB,CAAC,sCAAsC,CAAC;EACpE;;EAEA;EACA;EACA;EACA;EACA;EACAQ,OAAOA,CAAA,EAAG;IACRZ,MAAM,CAACI,mBAAmB,CAAC,gCAAgC,CAAC;EAC9D;;EAEA;EACA;EACA;EACA;EACA;EACAS,YAAYA,CAAA,EAAG;IACbb,MAAM,CAACI,mBAAmB,CAAC,qCAAqC,CAAC;EACnE;;EAEA;EACA;EACA;EACA;EACA;EACAU,eAAeA,CAAA,EAAG;IAChBd,MAAM,CAACI,mBAAmB,CAAC,yCAAyC,CAAC;EACvE;;EAEA;EACA;EACA;EACA;EACA;EACAW,cAAcA,CAAA,EAAG;IACff,MAAM,CAACI,mBAAmB,CAAC,uCAAuC,CAAC;EACrE;;EAEA;EACA;EACA;EACA;EACA;EACAY,OAAOA,CAAA,EAAG;IACRhB,MAAM,CAACI,mBAAmB,CAAC,gCAAgC,CAAC;EAC9D;;EAEA;EACA;EACA;EACA;EACA;EACAa,QAAQA,CAAA,EAAG;IACTjB,MAAM,CAACI,mBAAmB,CAAC,sCAAsC,CAAC;EACpE;;EAEA;EACA;EACA;EACA;EACA;EACAc,aAAaA,CAAA,EAAG;IACdlB,MAAM,CAACI,mBAAmB,CAAC,sCAAsC,CAAC;EACpE;;EAEA;EACA;EACA;EACA;EACA;EACAe,iBAAiBA,CAAA,EAAG;IAClBnB,MAAM,CAACI,mBAAmB,CAAC,0CAA0C,CAAC;EACxE;;EAEA;EACA;EACA;EACA;EACA;EACAgB,aAAaA,CAAA,EAAG;IACdpB,MAAM,CAACI,mBAAmB,CAAC,sCAAsC,CAAC;EACpE;;EAEA;EACA;EACA;EACA;EACA;EACAiB,OAAOA,CAAA,EAAG;IACRrB,MAAM,CAACI,mBAAmB,CAAC,gCAAgC,CAAC;EAC9D;AAEF;AAEAkB,MAAM,CAACC,OAAO,GAAGrB,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}