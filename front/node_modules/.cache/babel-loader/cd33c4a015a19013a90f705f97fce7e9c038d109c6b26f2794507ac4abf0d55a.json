{"ast":null,"code":"// Copyright (c) 2018, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst SodaCollection = require('./sodaCollection.js');\nconst SodaDocument = require('./sodaDocument.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst settings = require('./settings.js');\nclass SodaDatabase {\n  _getConnection() {\n    return this._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // createCollection()\n  //\n  // Creates a SODA collection.\n  //---------------------------------------------------------------------------\n  async createCollection(name, a2) {\n    const options = {\n      autoCommit: settings.autoCommit\n    };\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(typeof name === 'string', 1);\n    if (arguments.length == 2) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      if (a2.mode !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(a2.mode) && a2.mode > 0, 2, \"mode\");\n        options.mode = a2.mode;\n      }\n      if (a2.metaData !== undefined) {\n        errors.assertParamPropValue(nodbUtil.isObject(a2.metaData), 2, \"metaData\");\n        options.metaData = JSON.stringify(a2.metaData);\n      }\n    }\n    const coll = new SodaCollection();\n    coll._impl = await this._impl.createCollection(name, options);\n    return coll;\n  }\n\n  //---------------------------------------------------------------------------\n  // createDocument()\n  //\n  // Creates a SODA document.\n  //---------------------------------------------------------------------------\n  createDocument(content, a2) {\n    let options = {};\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(Buffer.isBuffer(content) || typeof content === 'string' || nodbUtil.isObject(content), 1);\n    if (arguments.length > 1) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      options = a2;\n      errors.assertParamPropString(options, 2, \"key\");\n      errors.assertParamPropString(options, 2, \"mediaType\");\n    }\n    if (typeof content === 'string') {\n      content = Buffer.from(content);\n    } else if (nodbUtil.isObject(content)) {\n      content = Buffer.from(JSON.stringify(content));\n    }\n    const doc = new SodaDocument();\n    doc._impl = this._impl.createDocument(content, options);\n    return doc;\n  }\n\n  //---------------------------------------------------------------------------\n  // getCollectionNames()\n  //\n  // Return an array of the names of the collections in the database.\n  //---------------------------------------------------------------------------\n  async getCollectionNames(a1) {\n    let options = {};\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n      errors.assertParamValue(nodbUtil.isObject(a1), 1);\n      options = a1;\n      if (options.startsWith !== undefined) {\n        errors.assertParamPropValue(typeof options.startsWith === 'string', 1, \"startsWith\");\n      }\n      if (options.limit !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(options.limit), 1, \"limit\");\n      }\n    }\n    return await this._impl.getCollectionNames(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // openCollection()\n  //\n  // Open an existing SODA collection and return it to the caller.\n  //---------------------------------------------------------------------------\n  async openCollection(name) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof name === 'string', 1);\n    const options = {\n      autoCommit: settings.autoCommit\n    };\n    const collImpl = await this._impl.openCollection(name, options);\n    if (collImpl) {\n      const coll = new SodaCollection();\n      coll._impl = collImpl;\n      return coll;\n    }\n  }\n}\nnodbUtil.wrapFns(SodaDatabase.prototype, \"createCollection\", \"getCollectionNames\", \"openCollection\");\nmodule.exports = SodaDatabase;","map":{"version":3,"names":["Buffer","require","SodaCollection","SodaDocument","errors","nodbUtil","settings","SodaDatabase","_getConnection","_connection","createCollection","name","a2","options","autoCommit","assertArgCount","arguments","assertParamValue","length","isObject","mode","undefined","assertParamPropValue","Number","isInteger","metaData","JSON","stringify","coll","_impl","createDocument","content","isBuffer","assertParamPropString","from","doc","getCollectionNames","a1","startsWith","limit","openCollection","collImpl","wrapFns","prototype","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/sodaDatabase.js"],"sourcesContent":["// Copyright (c) 2018, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst SodaCollection = require('./sodaCollection.js');\nconst SodaDocument = require('./sodaDocument.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst settings = require('./settings.js');\n\nclass SodaDatabase {\n\n  _getConnection() {\n    return this._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // createCollection()\n  //\n  // Creates a SODA collection.\n  //---------------------------------------------------------------------------\n  async createCollection(name, a2) {\n    const options = {autoCommit: settings.autoCommit};\n\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(typeof name === 'string', 1);\n\n    if (arguments.length == 2) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      if (a2.mode !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(a2.mode) && a2.mode > 0,\n          2, \"mode\");\n        options.mode = a2.mode;\n      }\n      if (a2.metaData !== undefined) {\n        errors.assertParamPropValue(nodbUtil.isObject(a2.metaData), 2,\n          \"metaData\");\n        options.metaData = JSON.stringify(a2.metaData);\n      }\n    }\n\n    const coll = new SodaCollection();\n    coll._impl = await this._impl.createCollection(name, options);\n    return coll;\n  }\n\n  //---------------------------------------------------------------------------\n  // createDocument()\n  //\n  // Creates a SODA document.\n  //---------------------------------------------------------------------------\n  createDocument(content, a2) {\n    let options = {};\n\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(Buffer.isBuffer(content) ||\n        typeof content === 'string' || nodbUtil.isObject(content), 1);\n    if (arguments.length > 1) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      options = a2;\n      errors.assertParamPropString(options, 2, \"key\");\n      errors.assertParamPropString(options, 2, \"mediaType\");\n    }\n\n    if (typeof content === 'string') {\n      content = Buffer.from(content);\n    } else if (nodbUtil.isObject(content)) {\n      content = Buffer.from(JSON.stringify(content));\n    }\n\n    const doc = new SodaDocument();\n    doc._impl = this._impl.createDocument(content, options);\n    return doc;\n  }\n\n  //---------------------------------------------------------------------------\n  // getCollectionNames()\n  //\n  // Return an array of the names of the collections in the database.\n  //---------------------------------------------------------------------------\n  async getCollectionNames(a1) {\n    let options = {};\n\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n      errors.assertParamValue(nodbUtil.isObject(a1), 1);\n      options = a1;\n      if (options.startsWith !== undefined) {\n        errors.assertParamPropValue(typeof options.startsWith === 'string', 1,\n          \"startsWith\");\n      }\n      if (options.limit !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(options.limit), 1,\n          \"limit\");\n      }\n    }\n    return await this._impl.getCollectionNames(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // openCollection()\n  //\n  // Open an existing SODA collection and return it to the caller.\n  //---------------------------------------------------------------------------\n  async openCollection(name) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof name === 'string', 1);\n    const options = {autoCommit: settings.autoCommit};\n    const collImpl = await this._impl.openCollection(name, options);\n    if (collImpl) {\n      const coll = new SodaCollection();\n      coll._impl = collImpl;\n      return coll;\n    }\n  }\n\n}\n\nnodbUtil.wrapFns(SodaDatabase.prototype,\n  \"createCollection\",\n  \"getCollectionNames\",\n  \"openCollection\");\n\nmodule.exports = SodaDatabase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}