{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst settings = require('../settings.js');\nconst errors = require('../errors.js');\nconst util = require('util');\n\n// define implementation class\nclass ConnectionImpl {\n  constructor() {\n    this._inProgress = false;\n    this._dbObjectTypes = new Map();\n    this._requestQueue = [];\n  }\n\n  //---------------------------------------------------------------------------\n  // _acquireLock()\n  //\n  // Acquire a lock on the connection in order to prevent concurrent use of the\n  // connection.\n  //---------------------------------------------------------------------------\n  async _acquireLock() {\n    if (this._inProgress) {\n      if (settings.errorOnConcurrentExecute) {\n        errors.throwErr(errors.ERR_CONCURRENT_OPS);\n      }\n      await new Promise((resolve, reject) => {\n        const payload = {\n          resolve: resolve,\n          reject: reject\n        };\n        this._requestQueue.push(payload);\n      });\n    }\n    this._inProgress = true;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  // ---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDbObjectType()\n  //\n  // Return the object identifying the object type. These are cached by fully\n  // qualified name and by OID (thin mode only).\n  //---------------------------------------------------------------------------\n  _getDbObjectType(schema, name, packageName, oid) {\n    let dbObjectType;\n    if (oid) {\n      dbObjectType = this._dbObjectTypes.get(oid);\n      if (dbObjectType) return dbObjectType;\n    }\n    const fqn = packageName ? `${schema}.${packageName}.${name}` : `${schema}.${name}`;\n    dbObjectType = this._dbObjectTypes.get(fqn);\n    if (!dbObjectType) {\n      dbObjectType = {\n        oid: oid,\n        fqn: fqn,\n        schema: schema,\n        name: name,\n        packageName: packageName,\n        partial: true,\n        isXmlType: schema === 'SYS' && name === 'XMLTYPE'\n      };\n      this._dbObjectTypes.set(fqn, dbObjectType);\n    }\n    if (oid && !dbObjectType.oid) {\n      dbObjectType.oid = oid;\n      this._dbObjectTypes.set(oid, dbObjectType);\n    }\n    return dbObjectType;\n  }\n\n  //---------------------------------------------------------------------------\n  // _isDate()\n  //\n  // Method for determining if a value is a Date object. This method can be\n  // removed once Node-API version 5 is used in the C extension.\n  // ---------------------------------------------------------------------------\n  _isDate(val) {\n    return util.isDate(val);\n  }\n\n  //---------------------------------------------------------------------------\n  // _releaseLock()\n  //\n  // Release the lock on the connection to allow another use of the connection.\n  //---------------------------------------------------------------------------\n  _releaseLock() {\n    if (this._requestQueue.length > 0) {\n      const payload = this._requestQueue.shift();\n      payload.resolve();\n    } else {\n      this._inProgress = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // breakExecution()\n  //\n  // Breaks execution of a running statement.\n  //---------------------------------------------------------------------------\n  breakExecution() {\n    errors.throwNotImplemented(\"getting Oracle Server version number\");\n  }\n\n  //---------------------------------------------------------------------------\n  // changePassword()\n  //\n  // Changes the password of the specified user.\n  //---------------------------------------------------------------------------\n  changePassword() {\n    errors.throwNotImplemented(\"changing the password\");\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the connection.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // commit()\n  //\n  // Commits the transaction.\n  //---------------------------------------------------------------------------\n  commit() {\n    errors.throwNotImplemented(\"committing the transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // createLob()\n  //\n  // Creates a temporary LOB and returns it.\n  //---------------------------------------------------------------------------\n  createLob() {\n    errors.throwNotImplemented(\"creating a temporary LOB\");\n  }\n\n  //---------------------------------------------------------------------------\n  // execute()\n  //\n  // Executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  execute() {\n    errors.throwNotImplemented(\"executing a SQL statement\");\n  }\n\n  //---------------------------------------------------------------------------\n  // executeMany()\n  //\n  // Executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  executeMany() {\n    errors.throwNotImplemented(\"executing a SQL statement multiple times\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCallTimeout()\n  //\n  // Returns the call timeout value.\n  //---------------------------------------------------------------------------\n  getCallTimeout() {\n    errors.throwNotImplemented(\"getting call timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCurrentSchema()\n  //\n  // Returns the current schema.\n  //---------------------------------------------------------------------------\n  getCurrentSchema() {\n    errors.throwNotImplemented(\"getting current schema\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbDomain()\n  //\n  // Returns the Oracle Database domain name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbDomain() {\n    errors.throwNotImplemented(\"getting db domain\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbName()\n  //\n  // Returns the Oracle Database name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbName() {\n    errors.throwNotImplemented(\"getting db name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbObjectClass()\n  //\n  // Returns a database object class given its name.\n  //---------------------------------------------------------------------------\n  getDbObjectClass() {\n    errors.throwNotImplemented(\"getting a database object class\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getExternalName()\n  //\n  // Returns the external name for TPC logging.\n  //---------------------------------------------------------------------------\n  getExternalName() {\n    errors.throwNotImplemented(\"getting the external name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getInstanceName()\n  //\n  // Returns the Oracle Database instance name associated with the connection.\n  //---------------------------------------------------------------------------\n  getInstanceName() {\n    errors.throwNotImplemented(\"getting the Oracle Database instance name.\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getInternalName()\n  //\n  // Returns the internal name for TPC logging.\n  //---------------------------------------------------------------------------\n  getInternalName() {\n    errors.throwNotImplemented(\"getting the internal name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMaxOpenCursors()\n  //\n  // Returns maximum number of cursors that can be opened in one session.\n  //---------------------------------------------------------------------------\n  getMaxOpenCursors() {\n    errors.throwNotImplemented(\"getting max open cursors\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOracleServerVersion()\n  //\n  // Returns an integer identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  getOracleServerVersion() {\n    errors.throwNotImplemented(\"getting Oracle Server version number\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOracleServerVersionString()\n  //\n  // Returns a string identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  getOracleServerVersionString() {\n    errors.throwNotImplemented(\"getting Oracle Server version as a string\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getQueue()\n  //\n  // Returns a queue with the given name.\n  //---------------------------------------------------------------------------\n  getQueue() {\n    errors.throwNotImplemented(\"getting a queue\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getServiceName()\n  //\n  // Returns the Oracle Database service name associated with the connection.\n  //---------------------------------------------------------------------------\n  getServiceName() {\n    errors.throwNotImplemented(\"getting service name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getSodaDatabase()\n  //\n  // Returns a SodaDatabase object associated with the connection.\n  //---------------------------------------------------------------------------\n  getSodaDatabase() {\n    errors.throwNotImplemented(\"getting a SODA database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStatementInfo()\n  //\n  // Returns information about a statement.\n  //---------------------------------------------------------------------------\n  getStatementInfo() {\n    errors.throwNotImplemented(\"getting information about a statement\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStmtCacheSize()\n  //\n  // Returns the size of the statement cache.\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    errors.throwNotImplemented(\"getting the statement cache size\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTag()\n  //\n  // Returns the tag associated with the connection.\n  //---------------------------------------------------------------------------\n  getTag() {\n    errors.throwNotImplemented(\"getting the tag for the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTransactionInProgress()\n  //\n  // Returns boolean based on the presence of an active transaction on the\n  // connection\n  //---------------------------------------------------------------------------\n  getTransactionInProgress() {\n    errors.throwNotImplemented(\"getting the status of an active transaction\" + \" on the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getWarning()\n  //\n  // Returns a warning on a connection\n  //---------------------------------------------------------------------------\n  getWarning() {\n    errors.throwNotImplemented(\"getting information about warning\");\n  }\n\n  //---------------------------------------------------------------------------\n  // isHealthy()\n  //\n  // Returns whether the connection is healthy or not.\n  //---------------------------------------------------------------------------\n  isHealthy() {\n    errors.throwNotImplemented(\"getting the health of the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // ping()\n  //\n  // Sends a \"ping\" to the database to see if it is \"alive\".\n  //---------------------------------------------------------------------------\n  ping() {\n    errors.throwNotImplemented(\"sending a ping to the database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // rollback()\n  //\n  // Rolls back a transaction.\n  //---------------------------------------------------------------------------\n  rollback() {\n    errors.throwNotImplemented(\"rolling back a transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setAction()\n  //\n  // Sets the end-to-end tracing attribute \"action\".\n  //---------------------------------------------------------------------------\n  setAction() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'action'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCallTimeout()\n  //\n  // Sets the call timeout value.\n  //---------------------------------------------------------------------------\n  setCallTimeout() {\n    errors.throwNotImplemented(\"setting call timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setClientId()\n  //\n  // Sets the end-to-end tracing attribute \"clientId\".\n  //---------------------------------------------------------------------------\n  setClientId() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'clientId'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setClientInfo()\n  //\n  // Sets the end-to-end tracing attribute \"clientInfo\".\n  //---------------------------------------------------------------------------\n  setClientInfo() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'clientInfo'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCurrentSchema()\n  //\n  // Sets the current schema.\n  //---------------------------------------------------------------------------\n  setCurrentSchema() {\n    errors.throwNotImplemented(\"setting the current schema\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setDbOp()\n  //\n  // Sets the end-to-end tracing attribute \"dbOp\".\n  //---------------------------------------------------------------------------\n  setDbOp() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'dbOp'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setECID()\n  //\n  // Sets the end-to-end tracing attribute \"ecid\".\n  //---------------------------------------------------------------------------\n  setECID() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'ecid'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setExternalName()\n  //\n  // Sets the external name for TPC logging.\n  //---------------------------------------------------------------------------\n  setExternalName() {\n    errors.throwNotImplemented(\"setting the external name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setInternalName()\n  //\n  // Sets the internal name for TPC logging.\n  //---------------------------------------------------------------------------\n  setInternalName() {\n    errors.throwNotImplemented(\"setting the internal name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setStmtCacheSize()\n  //\n  // Sets the size of the statement cache.\n  //---------------------------------------------------------------------------\n  setStmtCacheSize() {\n    errors.throwNotImplemented(\"setting the size of the statement cache\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setModule()\n  //\n  // Sets the end-to-end tracing attribute \"module\".\n  //---------------------------------------------------------------------------\n  setModule() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'module'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setTag()\n  //\n  // Sets the tag associated with the connection.\n  //---------------------------------------------------------------------------\n  setTag() {\n    errors.throwNotImplemented(\"setting the tag for the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // shutdown()\n  //\n  // Shuts down the database instance.\n  //---------------------------------------------------------------------------\n  shutdown() {\n    errors.throwNotImplemented(\"shutting down the database instance\");\n  }\n\n  //---------------------------------------------------------------------------\n  // startup()\n  //\n  // Starts up a database instance.\n  //---------------------------------------------------------------------------\n  startup() {\n    errors.throwNotImplemented(\"starting up the database instance\");\n  }\n\n  //---------------------------------------------------------------------------\n  // subscribe()\n  //\n  // Subscribes to events in the database.\n  //---------------------------------------------------------------------------\n  subscribe() {\n    errors.throwNotImplemented(\"subscribing to events in the database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcBegin()\n  //\n  // Starts a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcBegin() {\n    errors.throwNotImplemented(\"starting a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcCommit()\n  //\n  // Commits a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcCommit() {\n    errors.throwNotImplemented(\"committing a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcEnd()\n  //\n  // Ends a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcEnd() {\n    errors.throwNotImplemented(\"ending a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcForget()\n  //\n  // Forgets a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcForget() {\n    errors.throwNotImplemented(\"forgetting a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcPrepare()\n  //\n  // Prepares a two-phase transaction for commit.\n  //---------------------------------------------------------------------------\n  tpcPrepare() {\n    errors.throwNotImplemented(\"preparing a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcRollback()\n  //\n  // Rolls back a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcRollback() {\n    errors.throwNotImplemented(\"rolling back a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // unsubscribe()\n  //\n  // Unsubscribes from events in the database.\n  //---------------------------------------------------------------------------\n  unsubscribe() {\n    errors.throwNotImplemented(\"unsubscribing from events\");\n  }\n}\n\n// export just the class\nmodule.exports = ConnectionImpl;","map":{"version":3,"names":["settings","require","errors","util","ConnectionImpl","constructor","_inProgress","_dbObjectTypes","Map","_requestQueue","_acquireLock","errorOnConcurrentExecute","throwErr","ERR_CONCURRENT_OPS","Promise","resolve","reject","payload","push","_getConnImpl","_getDbObjectType","schema","name","packageName","oid","dbObjectType","get","fqn","partial","isXmlType","set","_isDate","val","isDate","_releaseLock","length","shift","breakExecution","throwNotImplemented","changePassword","close","commit","createLob","execute","executeMany","getCallTimeout","getCurrentSchema","getDbDomain","getDbName","getDbObjectClass","getExternalName","getInstanceName","getInternalName","getMaxOpenCursors","getOracleServerVersion","getOracleServerVersionString","getQueue","getServiceName","getSodaDatabase","getStatementInfo","getStmtCacheSize","getTag","getTransactionInProgress","getWarning","isHealthy","ping","rollback","setAction","setCallTimeout","setClientId","setClientInfo","setCurrentSchema","setDbOp","setECID","setExternalName","setInternalName","setStmtCacheSize","setModule","setTag","shutdown","startup","subscribe","tpcBegin","tpcCommit","tpcEnd","tpcForget","tpcPrepare","tpcRollback","unsubscribe","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/impl/connection.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst settings = require('../settings.js');\nconst errors = require('../errors.js');\nconst util = require('util');\n\n// define implementation class\nclass ConnectionImpl {\n\n  constructor() {\n    this._inProgress = false;\n    this._dbObjectTypes = new Map();\n    this._requestQueue = [];\n  }\n\n  //---------------------------------------------------------------------------\n  // _acquireLock()\n  //\n  // Acquire a lock on the connection in order to prevent concurrent use of the\n  // connection.\n  //---------------------------------------------------------------------------\n  async _acquireLock() {\n    if (this._inProgress) {\n      if (settings.errorOnConcurrentExecute) {\n        errors.throwErr(errors.ERR_CONCURRENT_OPS);\n      }\n      await new Promise((resolve, reject) => {\n        const payload = {resolve: resolve, reject: reject};\n        this._requestQueue.push(payload);\n      });\n    }\n    this._inProgress = true;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  // ---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDbObjectType()\n  //\n  // Return the object identifying the object type. These are cached by fully\n  // qualified name and by OID (thin mode only).\n  //---------------------------------------------------------------------------\n  _getDbObjectType(schema, name, packageName, oid) {\n    let dbObjectType;\n    if (oid) {\n      dbObjectType = this._dbObjectTypes.get(oid);\n      if (dbObjectType)\n        return dbObjectType;\n    }\n    const fqn = (packageName) ? `${schema}.${packageName}.${name}` :\n      `${schema}.${name}`;\n    dbObjectType = this._dbObjectTypes.get(fqn);\n    if (!dbObjectType) {\n      dbObjectType = {\n        oid: oid,\n        fqn: fqn,\n        schema: schema,\n        name: name,\n        packageName: packageName,\n        partial: true,\n        isXmlType: (schema === 'SYS' && name === 'XMLTYPE')\n      };\n      this._dbObjectTypes.set(fqn, dbObjectType);\n    }\n    if (oid && !dbObjectType.oid) {\n      dbObjectType.oid = oid;\n      this._dbObjectTypes.set(oid, dbObjectType);\n    }\n    return dbObjectType;\n  }\n\n  //---------------------------------------------------------------------------\n  // _isDate()\n  //\n  // Method for determining if a value is a Date object. This method can be\n  // removed once Node-API version 5 is used in the C extension.\n  // ---------------------------------------------------------------------------\n  _isDate(val) {\n    return (util.isDate(val));\n  }\n\n  //---------------------------------------------------------------------------\n  // _releaseLock()\n  //\n  // Release the lock on the connection to allow another use of the connection.\n  //---------------------------------------------------------------------------\n  _releaseLock() {\n    if (this._requestQueue.length > 0) {\n      const payload = this._requestQueue.shift();\n      payload.resolve();\n    } else {\n      this._inProgress = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // breakExecution()\n  //\n  // Breaks execution of a running statement.\n  //---------------------------------------------------------------------------\n  breakExecution() {\n    errors.throwNotImplemented(\"getting Oracle Server version number\");\n  }\n\n  //---------------------------------------------------------------------------\n  // changePassword()\n  //\n  // Changes the password of the specified user.\n  //---------------------------------------------------------------------------\n  changePassword() {\n    errors.throwNotImplemented(\"changing the password\");\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the connection.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // commit()\n  //\n  // Commits the transaction.\n  //---------------------------------------------------------------------------\n  commit() {\n    errors.throwNotImplemented(\"committing the transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // createLob()\n  //\n  // Creates a temporary LOB and returns it.\n  //---------------------------------------------------------------------------\n  createLob() {\n    errors.throwNotImplemented(\"creating a temporary LOB\");\n  }\n\n  //---------------------------------------------------------------------------\n  // execute()\n  //\n  // Executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  execute() {\n    errors.throwNotImplemented(\"executing a SQL statement\");\n  }\n\n  //---------------------------------------------------------------------------\n  // executeMany()\n  //\n  // Executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  executeMany() {\n    errors.throwNotImplemented(\"executing a SQL statement multiple times\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCallTimeout()\n  //\n  // Returns the call timeout value.\n  //---------------------------------------------------------------------------\n  getCallTimeout() {\n    errors.throwNotImplemented(\"getting call timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCurrentSchema()\n  //\n  // Returns the current schema.\n  //---------------------------------------------------------------------------\n  getCurrentSchema() {\n    errors.throwNotImplemented(\"getting current schema\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbDomain()\n  //\n  // Returns the Oracle Database domain name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbDomain() {\n    errors.throwNotImplemented(\"getting db domain\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbName()\n  //\n  // Returns the Oracle Database name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbName() {\n    errors.throwNotImplemented(\"getting db name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbObjectClass()\n  //\n  // Returns a database object class given its name.\n  //---------------------------------------------------------------------------\n  getDbObjectClass() {\n    errors.throwNotImplemented(\"getting a database object class\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getExternalName()\n  //\n  // Returns the external name for TPC logging.\n  //---------------------------------------------------------------------------\n  getExternalName() {\n    errors.throwNotImplemented(\"getting the external name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getInstanceName()\n  //\n  // Returns the Oracle Database instance name associated with the connection.\n  //---------------------------------------------------------------------------\n  getInstanceName() {\n    errors.throwNotImplemented(\"getting the Oracle Database instance name.\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getInternalName()\n  //\n  // Returns the internal name for TPC logging.\n  //---------------------------------------------------------------------------\n  getInternalName() {\n    errors.throwNotImplemented(\"getting the internal name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMaxOpenCursors()\n  //\n  // Returns maximum number of cursors that can be opened in one session.\n  //---------------------------------------------------------------------------\n  getMaxOpenCursors() {\n    errors.throwNotImplemented(\"getting max open cursors\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOracleServerVersion()\n  //\n  // Returns an integer identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  getOracleServerVersion() {\n    errors.throwNotImplemented(\"getting Oracle Server version number\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOracleServerVersionString()\n  //\n  // Returns a string identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  getOracleServerVersionString() {\n    errors.throwNotImplemented(\"getting Oracle Server version as a string\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getQueue()\n  //\n  // Returns a queue with the given name.\n  //---------------------------------------------------------------------------\n  getQueue() {\n    errors.throwNotImplemented(\"getting a queue\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getServiceName()\n  //\n  // Returns the Oracle Database service name associated with the connection.\n  //---------------------------------------------------------------------------\n  getServiceName() {\n    errors.throwNotImplemented(\"getting service name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getSodaDatabase()\n  //\n  // Returns a SodaDatabase object associated with the connection.\n  //---------------------------------------------------------------------------\n  getSodaDatabase() {\n    errors.throwNotImplemented(\"getting a SODA database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStatementInfo()\n  //\n  // Returns information about a statement.\n  //---------------------------------------------------------------------------\n  getStatementInfo() {\n    errors.throwNotImplemented(\"getting information about a statement\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStmtCacheSize()\n  //\n  // Returns the size of the statement cache.\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    errors.throwNotImplemented(\"getting the statement cache size\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTag()\n  //\n  // Returns the tag associated with the connection.\n  //---------------------------------------------------------------------------\n  getTag() {\n    errors.throwNotImplemented(\"getting the tag for the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTransactionInProgress()\n  //\n  // Returns boolean based on the presence of an active transaction on the\n  // connection\n  //---------------------------------------------------------------------------\n  getTransactionInProgress() {\n    errors.throwNotImplemented(\"getting the status of an active transaction\" +\n      \" on the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getWarning()\n  //\n  // Returns a warning on a connection\n  //---------------------------------------------------------------------------\n  getWarning() {\n    errors.throwNotImplemented(\"getting information about warning\");\n  }\n\n  //---------------------------------------------------------------------------\n  // isHealthy()\n  //\n  // Returns whether the connection is healthy or not.\n  //---------------------------------------------------------------------------\n  isHealthy() {\n    errors.throwNotImplemented(\"getting the health of the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // ping()\n  //\n  // Sends a \"ping\" to the database to see if it is \"alive\".\n  //---------------------------------------------------------------------------\n  ping() {\n    errors.throwNotImplemented(\"sending a ping to the database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // rollback()\n  //\n  // Rolls back a transaction.\n  //---------------------------------------------------------------------------\n  rollback() {\n    errors.throwNotImplemented(\"rolling back a transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setAction()\n  //\n  // Sets the end-to-end tracing attribute \"action\".\n  //---------------------------------------------------------------------------\n  setAction() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'action'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCallTimeout()\n  //\n  // Sets the call timeout value.\n  //---------------------------------------------------------------------------\n  setCallTimeout() {\n    errors.throwNotImplemented(\"setting call timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setClientId()\n  //\n  // Sets the end-to-end tracing attribute \"clientId\".\n  //---------------------------------------------------------------------------\n  setClientId() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'clientId'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setClientInfo()\n  //\n  // Sets the end-to-end tracing attribute \"clientInfo\".\n  //---------------------------------------------------------------------------\n  setClientInfo() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'clientInfo'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCurrentSchema()\n  //\n  // Sets the current schema.\n  //---------------------------------------------------------------------------\n  setCurrentSchema() {\n    errors.throwNotImplemented(\"setting the current schema\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setDbOp()\n  //\n  // Sets the end-to-end tracing attribute \"dbOp\".\n  //---------------------------------------------------------------------------\n  setDbOp() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'dbOp'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setECID()\n  //\n  // Sets the end-to-end tracing attribute \"ecid\".\n  //---------------------------------------------------------------------------\n  setECID() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'ecid'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setExternalName()\n  //\n  // Sets the external name for TPC logging.\n  //---------------------------------------------------------------------------\n  setExternalName() {\n    errors.throwNotImplemented(\"setting the external name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setInternalName()\n  //\n  // Sets the internal name for TPC logging.\n  //---------------------------------------------------------------------------\n  setInternalName() {\n    errors.throwNotImplemented(\"setting the internal name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setStmtCacheSize()\n  //\n  // Sets the size of the statement cache.\n  //---------------------------------------------------------------------------\n  setStmtCacheSize() {\n    errors.throwNotImplemented(\"setting the size of the statement cache\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setModule()\n  //\n  // Sets the end-to-end tracing attribute \"module\".\n  //---------------------------------------------------------------------------\n  setModule() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'module'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setTag()\n  //\n  // Sets the tag associated with the connection.\n  //---------------------------------------------------------------------------\n  setTag() {\n    errors.throwNotImplemented(\"setting the tag for the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // shutdown()\n  //\n  // Shuts down the database instance.\n  //---------------------------------------------------------------------------\n  shutdown() {\n    errors.throwNotImplemented(\"shutting down the database instance\");\n  }\n\n  //---------------------------------------------------------------------------\n  // startup()\n  //\n  // Starts up a database instance.\n  //---------------------------------------------------------------------------\n  startup() {\n    errors.throwNotImplemented(\"starting up the database instance\");\n  }\n\n  //---------------------------------------------------------------------------\n  // subscribe()\n  //\n  // Subscribes to events in the database.\n  //---------------------------------------------------------------------------\n  subscribe() {\n    errors.throwNotImplemented(\"subscribing to events in the database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcBegin()\n  //\n  // Starts a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcBegin() {\n    errors.throwNotImplemented(\"starting a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcCommit()\n  //\n  // Commits a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcCommit() {\n    errors.throwNotImplemented(\"committing a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcEnd()\n  //\n  // Ends a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcEnd() {\n    errors.throwNotImplemented(\"ending a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcForget()\n  //\n  // Forgets a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcForget() {\n    errors.throwNotImplemented(\"forgetting a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcPrepare()\n  //\n  // Prepares a two-phase transaction for commit.\n  //---------------------------------------------------------------------------\n  tpcPrepare() {\n    errors.throwNotImplemented(\"preparing a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcRollback()\n  //\n  // Rolls back a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcRollback() {\n    errors.throwNotImplemented(\"rolling back a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // unsubscribe()\n  //\n  // Unsubscribes from events in the database.\n  //---------------------------------------------------------------------------\n  unsubscribe() {\n    errors.throwNotImplemented(\"unsubscribing from events\");\n  }\n\n}\n\n// export just the class\nmodule.exports = ConnectionImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}