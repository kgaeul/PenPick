{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst LobImpl = require('../impl/lob.js');\nconst constants = require('./protocol/constants.js');\nconst LobOpMessage = require('./protocol/messages/lobOp.js');\nconst errors = require('../errors.js');\nclass ThinLobImpl extends LobImpl {\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this.conn;\n  }\n\n  //---------------------------------------------------------------------------\n  // _sendMessage()\n  //\n  // Sends a LOB operation message to the server and processes the response.\n  //---------------------------------------------------------------------------\n  async _sendMessage(options) {\n    const message = new LobOpMessage(this.conn, options);\n    await this.conn._protocol._processMessage(message);\n    if (options.operation === constants.TNS_LOB_OP_READ) {\n      return message.data ? message.data : null;\n    } else {\n      return message.amount;\n    }\n  }\n  getChunkSize() {\n    return this._chunkSize;\n  }\n  async _getChunkSizeAsync() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_GET_CHUNK_SIZE,\n      sourceLobImpl: this,\n      sendAmount: true\n    };\n    this._chunkSize = this._pieceSize = await this._sendMessage(options);\n  }\n  getLength() {\n    return this._length;\n  }\n  getPieceSize() {\n    return this._pieceSize;\n  }\n  setPieceSize(value) {\n    this._pieceSize = value;\n  }\n  getType() {\n    return this.dbType;\n  }\n  async getData() {\n    if (this._length < 0) {\n      errors.throwErr(errors.ERR_INVALID_LOB);\n    }\n    return await this.read(1, this._length);\n  }\n  async read(offset, length) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_READ,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      sendAmount: true,\n      amount: length || this._pieceSize\n    };\n    return await this._sendMessage(options);\n  }\n  async write(offset, data) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_WRITE,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      data: data\n    };\n    await this._sendMessage(options);\n    this._length += data.length;\n  }\n  getCsfrm() {\n    if (this.dbType._csfrm !== constants.CSFRM_NCHAR) {\n      if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_3] & constants.TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET) {\n        return constants.CSFRM_NCHAR;\n      }\n    }\n    return this.dbType._csfrm;\n  }\n\n  /**\n   * Creates a temporary LOB.\n   *\n   * @param {object} conn Connection Impl object\n   * @param {number} dbType indicates BLOB/CLOB DB type\n   */\n  async create(conn, dbType) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this.dbType = dbType;\n    this._locator = Buffer.alloc(40);\n    this._isTempLob = true;\n    this._length = 0;\n    const options = {\n      operation: constants.TNS_LOB_OP_CREATE_TEMP,\n      sourceLobImpl: this,\n      amount: constants.TNS_DURATION_SESSION,\n      destOffset: dbType._oraTypeNum,\n      sourceOffset: dbType._csfrm,\n      sendAmount: true\n    };\n    await this._sendMessage(options);\n    await this._getChunkSizeAsync();\n  }\n  checkConn() {\n    if (!this.conn.nscon.connected) errors.throwErr(errors.ERR_LOB_CLOSED);\n  }\n  close() {\n    this.checkConn();\n    if (this._isTempLob) {\n      // Add to freelist which will be sent in piggyback fashion\n      this.conn._tempLobsToClose.push(this._locator);\n      this.conn._tempLobsTotalSize += this._locator.length;\n    }\n  }\n  init(conn, locator, dbType, len, chunkSize) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this._locator = locator;\n    this._isTempLob = false;\n    if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_4] & constants.TNS_LOB_LOC_FLAGS_TEMP === constants.TNS_LOB_LOC_FLAGS_TEMP || this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_1] & constants.TNS_LOB_LOC_FLAGS_ABSTRACT === constants.TNS_LOB_LOC_FLAGS_ABSTRACT) {\n      this._isTempLob = true;\n    }\n    this.dbType = dbType;\n    this._length = len;\n    this._chunkSize = chunkSize;\n    this._pieceSize = chunkSize;\n  }\n}\nmodule.exports = ThinLobImpl;","map":{"version":3,"names":["Buffer","require","LobImpl","constants","LobOpMessage","errors","ThinLobImpl","_getConnImpl","conn","_sendMessage","options","message","_protocol","_processMessage","operation","TNS_LOB_OP_READ","data","amount","getChunkSize","_chunkSize","_getChunkSizeAsync","checkConn","TNS_LOB_OP_GET_CHUNK_SIZE","sourceLobImpl","sendAmount","_pieceSize","getLength","_length","getPieceSize","setPieceSize","value","getType","dbType","getData","throwErr","ERR_INVALID_LOB","read","offset","length","sourceOffset","write","TNS_LOB_OP_WRITE","getCsfrm","_csfrm","CSFRM_NCHAR","_locator","TNS_LOB_LOC_OFFSET_FLAG_3","TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET","create","dirtyLength","alloc","_isTempLob","TNS_LOB_OP_CREATE_TEMP","TNS_DURATION_SESSION","destOffset","_oraTypeNum","nscon","connected","ERR_LOB_CLOSED","close","_tempLobsToClose","push","_tempLobsTotalSize","init","locator","len","chunkSize","TNS_LOB_LOC_OFFSET_FLAG_4","TNS_LOB_LOC_FLAGS_TEMP","TNS_LOB_LOC_OFFSET_FLAG_1","TNS_LOB_LOC_FLAGS_ABSTRACT","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/lob.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst LobImpl = require('../impl/lob.js');\nconst constants = require('./protocol/constants.js');\nconst LobOpMessage = require('./protocol/messages/lobOp.js');\nconst errors = require('../errors.js');\n\nclass ThinLobImpl extends LobImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this.conn;\n  }\n\n  //---------------------------------------------------------------------------\n  // _sendMessage()\n  //\n  // Sends a LOB operation message to the server and processes the response.\n  //---------------------------------------------------------------------------\n  async _sendMessage(options) {\n    const message = new LobOpMessage(this.conn, options);\n    await this.conn._protocol._processMessage(message);\n    if (options.operation === constants.TNS_LOB_OP_READ) {\n      return (message.data) ? message.data : null;\n    } else {\n      return message.amount;\n    }\n  }\n\n  getChunkSize() {\n    return this._chunkSize;\n  }\n\n  async _getChunkSizeAsync() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_GET_CHUNK_SIZE,\n      sourceLobImpl: this,\n      sendAmount: true\n    };\n    this._chunkSize = this._pieceSize = await this._sendMessage(options);\n  }\n\n  getLength() {\n    return this._length;\n  }\n\n  getPieceSize() {\n    return this._pieceSize;\n  }\n\n  setPieceSize(value) {\n    this._pieceSize = value;\n  }\n\n  getType() {\n    return this.dbType;\n  }\n\n  async getData() {\n    if (this._length < 0) {\n      errors.throwErr(errors.ERR_INVALID_LOB);\n    }\n    return await this.read(1, this._length);\n  }\n\n  async read(offset, length) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_READ,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      sendAmount: true,\n      amount: length || this._pieceSize\n    };\n    return await this._sendMessage(options);\n  }\n\n  async write(offset, data) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_WRITE,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      data: data\n    };\n    await this._sendMessage(options);\n    this._length += data.length;\n  }\n\n  getCsfrm() {\n    if (this.dbType._csfrm !== constants.CSFRM_NCHAR) {\n      if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_3] &\n          constants.TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET) {\n        return constants.CSFRM_NCHAR;\n      }\n    }\n    return this.dbType._csfrm;\n  }\n\n  /**\n   * Creates a temporary LOB.\n   *\n   * @param {object} conn Connection Impl object\n   * @param {number} dbType indicates BLOB/CLOB DB type\n   */\n  async create(conn, dbType) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this.dbType = dbType;\n    this._locator = Buffer.alloc(40);\n    this._isTempLob = true;\n    this._length = 0;\n    const options = {\n      operation: constants.TNS_LOB_OP_CREATE_TEMP,\n      sourceLobImpl: this,\n      amount: constants.TNS_DURATION_SESSION,\n      destOffset: dbType._oraTypeNum,\n      sourceOffset: dbType._csfrm,\n      sendAmount: true\n    };\n    await this._sendMessage(options);\n    await this._getChunkSizeAsync();\n  }\n\n  checkConn() {\n    if (!this.conn.nscon.connected)\n      errors.throwErr(errors.ERR_LOB_CLOSED);\n  }\n\n  close() {\n    this.checkConn();\n    if (this._isTempLob) {\n      // Add to freelist which will be sent in piggyback fashion\n      this.conn._tempLobsToClose.push(this._locator);\n      this.conn._tempLobsTotalSize += this._locator.length;\n    }\n  }\n\n  init(conn, locator, dbType, len, chunkSize) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this._locator = locator;\n    this._isTempLob = false;\n    if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_4] & constants.TNS_LOB_LOC_FLAGS_TEMP === constants.TNS_LOB_LOC_FLAGS_TEMP\n      || this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_1] & constants.TNS_LOB_LOC_FLAGS_ABSTRACT === constants.TNS_LOB_LOC_FLAGS_ABSTRACT) {\n      this._isTempLob = true;\n    }\n    this.dbType = dbType;\n    this._length = len;\n    this._chunkSize = chunkSize;\n    this._pieceSize = chunkSize;\n  }\n\n}\n\nmodule.exports = ThinLobImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}