{"ast":null,"code":"// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\nconst nodbUtil = require('../util.js');\nclass PoolImpl {\n  //---------------------------------------------------------------------------\n  // _accessTokenHandler()\n  //\n  // Access token handler callback function which wraps the user callback and\n  // returns the token to the implementation.\n  //---------------------------------------------------------------------------\n  async _accessTokenHandler(userFn, externalObj, refresh, accessTokenConfig) {\n    let accessToken;\n    try {\n      let result = userFn(refresh, accessTokenConfig);\n      if (result instanceof Promise) {\n        result = await result;\n      }\n      if (!nodbUtil.isTokenValid(result)) {\n        errors.throwErr(errors.ERR_TOKEN_HAS_EXPIRED);\n      }\n      if (typeof result === 'object' && result.privateKey !== undefined) {\n        result.privateKey = nodbUtil.denormalizePrivateKey(result.privateKey);\n      }\n      accessToken = result;\n    } finally {\n      this.returnAccessToken(externalObj, accessToken);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the pool.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // create()\n  //\n  // Creates the pool and makes it available for use.\n  //---------------------------------------------------------------------------\n  create() {\n    errors.throwNotImplemented(\"creating the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnection()\n  //\n  // Returns a connection from the pool.\n  //---------------------------------------------------------------------------\n  getConnection() {\n    errors.throwNotImplemented(\"getting a connection from the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnectionsInUse()\n  //\n  // Returns the number of connections in use in the pool.\n  //---------------------------------------------------------------------------\n  getConnectionsInUse() {\n    errors.throwNotImplemented(\"getting num connection in use\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnectionsOpen()\n  //\n  // Returns the number of connections opened by the pool.\n  //---------------------------------------------------------------------------\n  getConnectionsOpen() {\n    errors.throwNotImplemented(\"getting num connection open\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolIncrement()\n  //\n  // Returns the number of connections to create when the pool needs to grow.\n  //---------------------------------------------------------------------------\n  getPoolIncrement() {\n    errors.throwNotImplemented(\"getting the pool increment\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMax()\n  //\n  // Returns the maximum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMax() {\n    errors.throwNotImplemented(\"getting the pool max\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMaxPerShard()\n  //\n  // Returns the maximum number of connections allowed per shard in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMaxPerShard() {\n    errors.throwNotImplemented(\"getting the pool max per shard\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMin()\n  //\n  // Returns the minimum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMin() {\n    errors.throwNotImplemented(\"getting the pool min\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolPingInterval()\n  //\n  // Returns the pool ping interval (seconds).\n  //---------------------------------------------------------------------------\n  getPoolPingInterval() {\n    errors.throwNotImplemented(\"getting the pool ping interval\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolTimeout()\n  //\n  // Returns the pool timeout.\n  //---------------------------------------------------------------------------\n  getPoolTimeout() {\n    errors.throwNotImplemented(\"getting the pool timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStmtCacheSize()\n  //\n  // Returns the statement cache size associate with the pool.\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    errors.throwNotImplemented(\"getting the pool statement cache size\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getSodaMetaDataCache()\n  //\n  // Returns whether the SODA metadata cache is enabled or not.\n  //---------------------------------------------------------------------------\n  getSodaMetaDataCache() {\n    errors.throwNotImplemented(\"getting the SODA metadata cache flag\");\n  }\n\n  //---------------------------------------------------------------------------\n  // reconfigure()\n  //\n  // Reconfigures the pool with new parameters.\n  //---------------------------------------------------------------------------\n  reconfigure() {\n    errors.throwNotImplemented(\"reconfiguring the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setAccessToken()\n  //\n  // Sets the access token to use with the pool.\n  //---------------------------------------------------------------------------\n  setAccessToken() {\n    errors.throwNotImplemented(\"sets the access token\");\n  }\n}\nmodule.exports = PoolImpl;","map":{"version":3,"names":["errors","require","nodbUtil","PoolImpl","_accessTokenHandler","userFn","externalObj","refresh","accessTokenConfig","accessToken","result","Promise","isTokenValid","throwErr","ERR_TOKEN_HAS_EXPIRED","privateKey","undefined","denormalizePrivateKey","returnAccessToken","close","throwNotImplemented","create","getConnection","getConnectionsInUse","getConnectionsOpen","getPoolIncrement","getPoolMax","getPoolMaxPerShard","getPoolMin","getPoolPingInterval","getPoolTimeout","getStmtCacheSize","getSodaMetaDataCache","reconfigure","setAccessToken","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/impl/pool.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\nconst nodbUtil = require('../util.js');\n\nclass PoolImpl {\n\n  //---------------------------------------------------------------------------\n  // _accessTokenHandler()\n  //\n  // Access token handler callback function which wraps the user callback and\n  // returns the token to the implementation.\n  //---------------------------------------------------------------------------\n  async _accessTokenHandler(userFn, externalObj, refresh, accessTokenConfig) {\n    let accessToken;\n    try {\n      let result = userFn(refresh, accessTokenConfig);\n      if (result instanceof Promise) {\n        result = await result;\n      }\n\n      if (!nodbUtil.isTokenValid(result)) {\n        errors.throwErr(errors.ERR_TOKEN_HAS_EXPIRED);\n      }\n      if (typeof result === 'object' && result.privateKey !== undefined) {\n        result.privateKey = nodbUtil.denormalizePrivateKey(result.privateKey);\n      }\n      accessToken = result;\n    } finally {\n      this.returnAccessToken(externalObj, accessToken);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the pool.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // create()\n  //\n  // Creates the pool and makes it available for use.\n  //---------------------------------------------------------------------------\n  create() {\n    errors.throwNotImplemented(\"creating the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnection()\n  //\n  // Returns a connection from the pool.\n  //---------------------------------------------------------------------------\n  getConnection() {\n    errors.throwNotImplemented(\"getting a connection from the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnectionsInUse()\n  //\n  // Returns the number of connections in use in the pool.\n  //---------------------------------------------------------------------------\n  getConnectionsInUse() {\n    errors.throwNotImplemented(\"getting num connection in use\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnectionsOpen()\n  //\n  // Returns the number of connections opened by the pool.\n  //---------------------------------------------------------------------------\n  getConnectionsOpen() {\n    errors.throwNotImplemented(\"getting num connection open\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolIncrement()\n  //\n  // Returns the number of connections to create when the pool needs to grow.\n  //---------------------------------------------------------------------------\n  getPoolIncrement() {\n    errors.throwNotImplemented(\"getting the pool increment\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMax()\n  //\n  // Returns the maximum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMax() {\n    errors.throwNotImplemented(\"getting the pool max\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMaxPerShard()\n  //\n  // Returns the maximum number of connections allowed per shard in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMaxPerShard() {\n    errors.throwNotImplemented(\"getting the pool max per shard\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMin()\n  //\n  // Returns the minimum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMin() {\n    errors.throwNotImplemented(\"getting the pool min\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolPingInterval()\n  //\n  // Returns the pool ping interval (seconds).\n  //---------------------------------------------------------------------------\n  getPoolPingInterval() {\n    errors.throwNotImplemented(\"getting the pool ping interval\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolTimeout()\n  //\n  // Returns the pool timeout.\n  //---------------------------------------------------------------------------\n  getPoolTimeout() {\n    errors.throwNotImplemented(\"getting the pool timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStmtCacheSize()\n  //\n  // Returns the statement cache size associate with the pool.\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    errors.throwNotImplemented(\"getting the pool statement cache size\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getSodaMetaDataCache()\n  //\n  // Returns whether the SODA metadata cache is enabled or not.\n  //---------------------------------------------------------------------------\n  getSodaMetaDataCache() {\n    errors.throwNotImplemented(\"getting the SODA metadata cache flag\");\n  }\n\n  //---------------------------------------------------------------------------\n  // reconfigure()\n  //\n  // Reconfigures the pool with new parameters.\n  //---------------------------------------------------------------------------\n  reconfigure() {\n    errors.throwNotImplemented(\"reconfiguring the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setAccessToken()\n  //\n  // Sets the access token to use with the pool.\n  //---------------------------------------------------------------------------\n  setAccessToken() {\n    errors.throwNotImplemented(\"sets the access token\");\n  }\n\n}\n\nmodule.exports = PoolImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}