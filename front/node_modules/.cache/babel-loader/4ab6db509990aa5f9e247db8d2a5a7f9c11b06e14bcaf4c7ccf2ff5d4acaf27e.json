{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaury\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\PenPick_project\\\\finalProject\\\\front\\\\src\\\\component\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport Stomp from 'webstomp-client';\nimport React, { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  // 받은 메시지를 저장하기 위한 상태\n  const [messages, setMessages] = useState([]);\n\n  // Stomp 클라이언트를 저장하기 위한 상태\n  const [stompClient, setStompClient] = useState(null);\n\n  // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\n  const [inputMessage, setInputMessage] = useState('');\n\n  // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\n  useEffect(() => {\n    // WebSocket 연결을 설정하는 함수\n    const connect = () => {\n      // WebSocket 통신을 위한 SockJS 객체 생성\n      const socket = new SockJS('http://localhost:8081/websocket');\n      console.log('여기까지 됨');\n      // WebSocket 연결 위에 Stomp 클라이언트 생성\n      var stomp = Stomp.over(socket);\n      console.log('여기까지도 됨');\n      if (socket.readyState === 1) {\n        // <-- This is important\n        return () => {\n          socket.close();\n        };\n      } else {\n        // WebSocket 서버에 연결\n        stomp.connect({}, frame => {\n          console.log('연결됨: ' + frame);\n          // Stomp 클라이언트를 컴포넌트 상태에 설정\n          setStompClient(stomp);\n        });\n      }\n    };\n\n    // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\n    connect();\n  }, []);\n  const sendMessage = content => {\n    if (stompClient) {\n      // 내용과 송신자 정보를 포함한 메시지 객체 생성\n      const message = {\n        content: content,\n        sender: \"user\"\n      };\n      const JSONmessages = JSON.stringify(message);\n      console.log(JSONmessages);\n      // 메시지를 '/app/chat' 목적지로 서버에 전송\n      stompClient.send('/app/websocket', {}, JSONmessages);\n    } else {\n      console.error('Stomp client is not initialized.');\n    }\n  };\n\n  // '/topic/messages' 목적지에서 메시지를 구독하는 함수\n  const subscribeToMessages = () => {\n    // '/topic/messages' 목적지를 구독\n    stompClient.subscribe('/topic/messages', response => {\n      // 받은 메시지를 파싱하고 상태에 추가\n      const message = JSON.parse(response.body);\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n  };\n\n  // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\n  useEffect(() => {\n    if (stompClient) {\n      subscribeToMessages();\n    }\n  }, [stompClient]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [message.sender, \": \", message.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setInputMessage(e.target.value),\n      value: inputMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage(inputMessage),\n      children: \"\\uC804\\uC1A1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"nWnl0H/blwPoFpYhRwGg6Lt2d2o=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Stomp","React","useState","useEffect","SockJS","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","stompClient","setStompClient","inputMessage","setInputMessage","connect","socket","console","log","stomp","over","readyState","close","frame","sendMessage","content","message","sender","JSONmessages","JSON","stringify","send","error","subscribeToMessages","subscribe","response","parse","body","prevMessages","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaury/OneDrive/바탕 화면/PenPick_project/finalProject/front/src/component/Chat.js"],"sourcesContent":["import Stomp from 'webstomp-client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport SockJS from 'sockjs-client';\r\n\r\nconst Chat = () => {\r\n    // 받은 메시지를 저장하기 위한 상태\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Stomp 클라이언트를 저장하기 위한 상태\r\n    const [stompClient, setStompClient] = useState(null);\r\n\r\n    // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\r\n    const [inputMessage, setInputMessage] = useState('');\r\n\r\n    // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\r\n    useEffect(() => {\r\n        // WebSocket 연결을 설정하는 함수\r\n        const connect = () => {\r\n            // WebSocket 통신을 위한 SockJS 객체 생성\r\n            const socket = new SockJS('http://localhost:8081/websocket');\r\n            console.log('여기까지 됨');\r\n            // WebSocket 연결 위에 Stomp 클라이언트 생성\r\n            var stomp = Stomp.over(socket);\r\n            console.log('여기까지도 됨');\r\n\r\n            \r\n                if (socket.readyState === 1) { // <-- This is important\r\n                    return()=>{\r\n                    socket.close();\r\n                    }\r\n                }else{\r\n                    // WebSocket 서버에 연결\r\n                    stomp.connect({}, frame => {\r\n                        console.log('연결됨: ' + frame);\r\n                        // Stomp 클라이언트를 컴포넌트 상태에 설정\r\n                        setStompClient(stomp);\r\n                    });\r\n\r\n                }\r\n            \r\n        };\r\n     \r\n        // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\r\n        connect();\r\n   \r\n    }, []);\r\n\r\n    const sendMessage = content => {\r\n        if (stompClient) {\r\n            // 내용과 송신자 정보를 포함한 메시지 객체 생성\r\n            const message = { content: content, sender: \"user\" };\r\n            const JSONmessages=JSON.stringify(message);\r\n            console.log(JSONmessages);\r\n            // 메시지를 '/app/chat' 목적지로 서버에 전송\r\n            stompClient.send('/app/websocket', {}, JSONmessages);\r\n        } else {\r\n            console.error('Stomp client is not initialized.');\r\n        }\r\n    };\r\n\r\n    // '/topic/messages' 목적지에서 메시지를 구독하는 함수\r\n    const subscribeToMessages = () => {\r\n        // '/topic/messages' 목적지를 구독\r\n        stompClient.subscribe('/topic/messages', response => {\r\n            // 받은 메시지를 파싱하고 상태에 추가\r\n            const message = JSON.parse(response.body);\r\n            setMessages(prevMessages => [...prevMessages, message]);\r\n        });\r\n    };\r\n\r\n    // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\r\n    useEffect(() => {\r\n        if (stompClient) {\r\n            subscribeToMessages();\r\n        }\r\n    }, [stompClient]);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {messages.map((message, index) => (\r\n                    <div key={index}>\r\n                        {message.sender}: {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                onChange={e => setInputMessage(e.target.value)}\r\n                value={inputMessage}\r\n            />\r\n            <button onClick={() => sendMessage(inputMessage)}>전송</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,iBAAiB;AACnC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,OAAO,GAAGA,CAAA,KAAM;MAClB;MACA,MAAMC,MAAM,GAAG,IAAIZ,MAAM,CAAC,iCAAiC,CAAC;MAC5Da,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrB;MACA,IAAIC,KAAK,GAAGnB,KAAK,CAACoB,IAAI,CAACJ,MAAM,CAAC;MAC9BC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MAGlB,IAAIF,MAAM,CAACK,UAAU,KAAK,CAAC,EAAE;QAAE;QAC3B,OAAM,MAAI;UACVL,MAAM,CAACM,KAAK,CAAC,CAAC;QACd,CAAC;MACL,CAAC,MAAI;QACD;QACAH,KAAK,CAACJ,OAAO,CAAC,CAAC,CAAC,EAAEQ,KAAK,IAAI;UACvBN,OAAO,CAACC,GAAG,CAAC,OAAO,GAAGK,KAAK,CAAC;UAC5B;UACAX,cAAc,CAACO,KAAK,CAAC;QACzB,CAAC,CAAC;MAEN;IAER,CAAC;;IAED;IACAJ,OAAO,CAAC,CAAC;EAEb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,WAAW,GAAGC,OAAO,IAAI;IAC3B,IAAId,WAAW,EAAE;MACb;MACA,MAAMe,OAAO,GAAG;QAAED,OAAO,EAAEA,OAAO;QAAEE,MAAM,EAAE;MAAO,CAAC;MACpD,MAAMC,YAAY,GAACC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC;MAC1CT,OAAO,CAACC,GAAG,CAACU,YAAY,CAAC;MACzB;MACAjB,WAAW,CAACoB,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAEH,YAAY,CAAC;IACxD,CAAC,MAAM;MACHX,OAAO,CAACe,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACJ,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAC9B;IACAtB,WAAW,CAACuB,SAAS,CAAC,iBAAiB,EAAEC,QAAQ,IAAI;MACjD;MACA,MAAMT,OAAO,GAAGG,IAAI,CAACO,KAAK,CAACD,QAAQ,CAACE,IAAI,CAAC;MACzC3B,WAAW,CAAC4B,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEZ,OAAO,CAAC,CAAC;IAC3D,CAAC,CAAC;EACN,CAAC;;EAED;EACAvB,SAAS,CAAC,MAAM;IACZ,IAAIQ,WAAW,EAAE;MACbsB,mBAAmB,CAAC,CAAC;IACzB;EACJ,CAAC,EAAE,CAACtB,WAAW,CAAC,CAAC;EAEjB,oBACIL,OAAA;IAAAiC,QAAA,gBACIjC,OAAA;MAAAiC,QAAA,EACK9B,QAAQ,CAAC+B,GAAG,CAAC,CAACd,OAAO,EAAEe,KAAK,kBACzBnC,OAAA;QAAAiC,QAAA,GACKb,OAAO,CAACC,MAAM,EAAC,IAAE,EAACD,OAAO,CAACD,OAAO;MAAA,GAD5BgB,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNvC,OAAA;MACIwC,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAEC,CAAC,IAAIlC,eAAe,CAACkC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAC/CA,KAAK,EAAErC;IAAa;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACFvC,OAAA;MAAQ6C,OAAO,EAAEA,CAAA,KAAM3B,WAAW,CAACX,YAAY,CAAE;MAAA0B,QAAA,EAAC;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEd,CAAC;AAACrC,EAAA,CA1FID,IAAI;AAAA6C,EAAA,GAAJ7C,IAAI;AA4FV,eAAeA,IAAI;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}