{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst util = require('util');\nconst dbTypeByNum = new Map();\nconst dbTypeByOraTypeNum = new Map();\nconst dbTypeByColumnTypeName = new Map();\n\n// define class used for database types\nclass DbType {\n  constructor(num, name, columnTypeName, options) {\n    this.num = num;\n    this.name = name;\n    this.columnTypeName = columnTypeName;\n    this._bufferSizeFactor = options.bufferSizeFactor || 0;\n    this._oraTypeNum = options.oraTypeNum || 0;\n    this._csfrm = options.csfrm || 0;\n    dbTypeByNum.set(num, this);\n    const key = (options.csfrm || 0) * 256 + options.oraTypeNum;\n    dbTypeByOraTypeNum.set(key, this);\n    dbTypeByColumnTypeName.set(columnTypeName, this);\n  }\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return this.num;\n      default:\n        return this.toString();\n    }\n  }\n  [util.inspect.custom]() {\n    return this.toString();\n  }\n  toString() {\n    return `[DbType ${this.name}]`;\n  }\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByColumnTypeName()\n//\n// Return the type given a column type name. If the column type name cannot be\n// found an exception is thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByColumnTypeName(name) {\n  const dbType = dbTypeByColumnTypeName.get(name);\n  if (!dbType) errors.throwErr(errors.ERR_UNKNOWN_COLUMN_TYPE_NAME, name);\n  return dbType;\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByNum()\n//\n// Return the type given the type number. If the type number is incorrect an\n// exception is thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByNum(num) {\n  const dbType = dbTypeByNum.get(num);\n  if (!dbType) errors.throwErr(errors.ERR_INVALID_TYPE_NUM, num);\n  return dbType;\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByOraTypeNum()\n//\n// Return the type given the Oracle type number and character set form. If the\n// Oracle type number and character set form are incorrect an exception is\n// thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByOraTypeNum(oraTypeNum, csfrm) {\n  const key = (csfrm || 0) * 256 + oraTypeNum;\n  const dbType = dbTypeByOraTypeNum.get(key);\n  if (!dbType) errors.throwErr(errors.ERR_INVALID_ORACLE_TYPE_NUM, oraTypeNum, csfrm);\n  return dbType;\n}\nconst DB_TYPE_BFILE = new DbType(2020, \"DB_TYPE_BFILE\", \"BFILE\", {\n  oraTypeNum: 114,\n  bufferSizeFactor: 112\n});\nconst DB_TYPE_BINARY_DOUBLE = new DbType(2008, \"DB_TYPE_BINARY_DOUBLE\", \"BINARY_DOUBLE\", {\n  oraTypeNum: 101,\n  bufferSizeFactor: 8\n});\nconst DB_TYPE_BINARY_FLOAT = new DbType(2007, \"DB_TYPE_BINARY_FLOAT\", \"BINARY_FLOAT\", {\n  oraTypeNum: 100,\n  bufferSizeFactor: 4\n});\nconst DB_TYPE_BINARY_INTEGER = new DbType(2009, \"DB_TYPE_BINARY_INTEGER\", \"BINARY_INTEGER\", {\n  oraTypeNum: 3,\n  bufferSizeFactor: 22\n});\nconst DB_TYPE_BLOB = new DbType(2019, \"DB_TYPE_BLOB\", \"BLOB\", {\n  oraTypeNum: 113,\n  bufferSizeFactor: 112\n});\nconst DB_TYPE_BOOLEAN = new DbType(2022, \"DB_TYPE_BOOLEAN\", \"BOOLEAN\", {\n  oraTypeNum: 252,\n  bufferSizeFactor: 4\n});\nconst DB_TYPE_CHAR = new DbType(2003, \"DB_TYPE_CHAR\", \"CHAR\", {\n  oraTypeNum: 96,\n  csfrm: constants.CSFRM_IMPLICIT,\n  bufferSizeFactor: 4\n});\nconst DB_TYPE_CLOB = new DbType(2017, \"DB_TYPE_CLOB\", \"CLOB\", {\n  oraTypeNum: 112,\n  csfrm: constants.CSFRM_IMPLICIT,\n  bufferSizeFactor: 112\n});\nconst DB_TYPE_CURSOR = new DbType(2021, \"DB_TYPE_CURSOR\", \"CURSOR\", {\n  oraTypeNum: 102,\n  bufferSizeFactor: 4\n});\nconst DB_TYPE_DATE = new DbType(2011, \"DB_TYPE_DATE\", \"DATE\", {\n  oraTypeNum: 12,\n  bufferSizeFactor: 7\n});\nconst DB_TYPE_INTERVAL_DS = new DbType(2015, \"DB_TYPE_INTERVAL_DS\", \"INTERVAL DAY TO SECOND\", {\n  oraTypeNum: 183,\n  bufferSizeFactor: 11\n});\nconst DB_TYPE_INTERVAL_YM = new DbType(2016, \"DB_TYPE_INTERVAL_YM\", \"INTERVAL YEAR TO MONTH\", {\n  oraTypeNum: 182\n});\nconst DB_TYPE_JSON = new DbType(2027, \"DB_TYPE_JSON\", \"JSON\", {\n  oraTypeNum: 119\n});\nconst DB_TYPE_LONG = new DbType(2024, \"DB_TYPE_LONG\", \"LONG\", {\n  oraTypeNum: 8,\n  csfrm: constants.CSFRM_IMPLICIT,\n  bufferSizeFactor: 2 ** 31 - 1\n});\nconst DB_TYPE_LONG_NVARCHAR = new DbType(2031, \"DB_TYPE_LONG_NVARCHAR\", \"LONG\", {\n  oraTypeNum: 8,\n  csfrm: constants.CSFRM_NCHAR,\n  bufferSizeFactor: 2 ** 31 - 1\n});\nconst DB_TYPE_LONG_RAW = new DbType(2025, \"DB_TYPE_LONG_RAW\", \"LONG RAW\", {\n  oraTypeNum: 24,\n  bufferSizeFactor: 2 ** 31 - 1\n});\nconst DB_TYPE_NCHAR = new DbType(2004, \"DB_TYPE_NCHAR\", \"NCHAR\", {\n  oraTypeNum: 96,\n  csfrm: constants.CSFRM_NCHAR,\n  bufferSizeFactor: 4\n});\nconst DB_TYPE_NCLOB = new DbType(2018, \"DB_TYPE_NCLOB\", \"NCLOB\", {\n  oraTypeNum: 112,\n  csfrm: constants.CSFRM_NCHAR,\n  bufferSizeFactor: 112\n});\nconst DB_TYPE_NUMBER = new DbType(2010, \"DB_TYPE_NUMBER\", \"NUMBER\", {\n  oraTypeNum: 2,\n  bufferSizeFactor: 22\n});\nconst DB_TYPE_NVARCHAR = new DbType(2002, \"DB_TYPE_NVARCHAR\", \"NVARCHAR2\", {\n  oraTypeNum: 1,\n  csfrm: constants.CSFRM_NCHAR,\n  bufferSizeFactor: 4\n});\nconst DB_TYPE_OBJECT = new DbType(2023, \"DB_TYPE_OBJECT\", \"OBJECT\", {\n  oraTypeNum: 109\n});\nconst DB_TYPE_RAW = new DbType(2006, \"DB_TYPE_RAW\", \"RAW\", {\n  oraTypeNum: 23,\n  bufferSizeFactor: 1\n});\nconst DB_TYPE_ROWID = new DbType(2005, \"DB_TYPE_ROWID\", \"ROWID\", {\n  oraTypeNum: 11,\n  bufferSizeFactor: 18\n});\nconst DB_TYPE_TIMESTAMP = new DbType(2012, \"DB_TYPE_TIMESTAMP\", \"TIMESTAMP\", {\n  oraTypeNum: 180,\n  bufferSizeFactor: 11\n});\nconst DB_TYPE_TIMESTAMP_LTZ = new DbType(2014, \"DB_TYPE_TIMESTAMP_LTZ\", \"TIMESTAMP WITH LOCAL TIME ZONE\", {\n  oraTypeNum: 231,\n  bufferSizeFactor: 11\n});\nconst DB_TYPE_TIMESTAMP_TZ = new DbType(2013, \"DB_TYPE_TIMESTAMP_TZ\", \"TIMESTAMP WITH TIME ZONE\", {\n  oraTypeNum: 181,\n  bufferSizeFactor: 13\n});\nconst DB_TYPE_UROWID = new DbType(2030, \"DB_TYPE_UROWID\", \"UROWID\", {\n  oraTypeNum: 208\n});\nconst DB_TYPE_VARCHAR = new DbType(2001, \"DB_TYPE_VARCHAR\", \"VARCHAR2\", {\n  oraTypeNum: 1,\n  csfrm: constants.CSFRM_IMPLICIT,\n  bufferSizeFactor: 4\n});\nconst DB_TYPE_XMLTYPE = new DbType(2032, \"DB_TYPE_XMLTYPE\", \"XMLTYPE\", {\n  oraTypeNum: 109,\n  csfrm: constants.CSFRM_IMPLICIT,\n  bufferSizeFactor: 2147483647\n});\n\n// database type conversion map: the top level key refers to the database\n// type being fetched and the value is another map; this map's key is the\n// type requested by the user and its value is the actual type that will be\n// used in the define call; only entries are included where the database type\n// and the requested fetch type are different\nconst DB_TYPE_CONVERSION_MAP = new Map([[DB_TYPE_BINARY_DOUBLE, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]])], [DB_TYPE_BINARY_FLOAT, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]])], [DB_TYPE_BLOB, new Map([[DB_TYPE_RAW, DB_TYPE_LONG_RAW], [DB_TYPE_LONG_RAW, DB_TYPE_LONG_RAW]])], [DB_TYPE_CHAR, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]])], [DB_TYPE_CLOB, new Map([[DB_TYPE_VARCHAR, DB_TYPE_LONG], [DB_TYPE_LONG, DB_TYPE_LONG]])], [DB_TYPE_DATE, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR], [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]])], [DB_TYPE_JSON, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]])], [DB_TYPE_LONG, new Map([[DB_TYPE_VARCHAR, DB_TYPE_LONG]])], [DB_TYPE_LONG_RAW, new Map([[DB_TYPE_RAW, DB_TYPE_LONG_RAW]])], [DB_TYPE_NCHAR, new Map([[DB_TYPE_CHAR, DB_TYPE_NCHAR], [DB_TYPE_VARCHAR, DB_TYPE_NVARCHAR], [DB_TYPE_NVARCHAR, DB_TYPE_NVARCHAR]])], [DB_TYPE_NCLOB, new Map([[DB_TYPE_VARCHAR, DB_TYPE_LONG_NVARCHAR], [DB_TYPE_NVARCHAR, DB_TYPE_LONG_NVARCHAR], [DB_TYPE_LONG, DB_TYPE_LONG_NVARCHAR], [DB_TYPE_LONG_NVARCHAR, DB_TYPE_LONG_NVARCHAR]])], [DB_TYPE_NUMBER, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]])], [DB_TYPE_NVARCHAR, new Map([[DB_TYPE_CHAR, DB_TYPE_NCHAR], [DB_TYPE_NCHAR, DB_TYPE_NCHAR], [DB_TYPE_VARCHAR, DB_TYPE_NVARCHAR]])], [DB_TYPE_RAW, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]])], [DB_TYPE_ROWID, new Map([[DB_TYPE_VARCHAR, DB_TYPE_ROWID]])], [DB_TYPE_TIMESTAMP, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR], [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]])], [DB_TYPE_TIMESTAMP_LTZ, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR], [DB_TYPE_TIMESTAMP_TZ, DB_TYPE_TIMESTAMP_TZ]])], [DB_TYPE_TIMESTAMP_TZ, new Map([[DB_TYPE_VARCHAR, DB_TYPE_VARCHAR], [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]])], [DB_TYPE_UROWID, new Map([[DB_TYPE_VARCHAR, DB_TYPE_ROWID]])]]);\n\n// default fetch type map\nconst DB_TYPE_FETCH_TYPE_MAP = new Map([[DB_TYPE_BFILE, DB_TYPE_BFILE], [DB_TYPE_BINARY_DOUBLE, DB_TYPE_BINARY_DOUBLE], [DB_TYPE_BINARY_FLOAT, DB_TYPE_BINARY_FLOAT], [DB_TYPE_BINARY_INTEGER, DB_TYPE_BINARY_INTEGER], [DB_TYPE_BLOB, DB_TYPE_BLOB], [DB_TYPE_BOOLEAN, DB_TYPE_BOOLEAN], [DB_TYPE_CHAR, DB_TYPE_CHAR], [DB_TYPE_CLOB, DB_TYPE_CLOB], [DB_TYPE_CURSOR, DB_TYPE_CURSOR], [DB_TYPE_DATE, DB_TYPE_DATE], [DB_TYPE_INTERVAL_DS, DB_TYPE_INTERVAL_DS], [DB_TYPE_INTERVAL_YM, DB_TYPE_INTERVAL_YM], [DB_TYPE_JSON, DB_TYPE_JSON], [DB_TYPE_LONG, DB_TYPE_LONG], [DB_TYPE_LONG_NVARCHAR, DB_TYPE_LONG_NVARCHAR], [DB_TYPE_LONG_RAW, DB_TYPE_LONG_RAW], [DB_TYPE_NCHAR, DB_TYPE_NCHAR], [DB_TYPE_NCLOB, DB_TYPE_NCLOB], [DB_TYPE_NUMBER, DB_TYPE_NUMBER], [DB_TYPE_NVARCHAR, DB_TYPE_NVARCHAR], [DB_TYPE_OBJECT, DB_TYPE_OBJECT], [DB_TYPE_RAW, DB_TYPE_RAW], [DB_TYPE_ROWID, DB_TYPE_ROWID], [DB_TYPE_TIMESTAMP, DB_TYPE_TIMESTAMP], [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_TZ], [DB_TYPE_TIMESTAMP_TZ, DB_TYPE_TIMESTAMP_TZ], [DB_TYPE_UROWID, DB_TYPE_UROWID], [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR], [DB_TYPE_XMLTYPE, DB_TYPE_XMLTYPE]]);\n\n// additional aliases for types by column type name\ndbTypeByColumnTypeName.set(\"DOUBLE PRECISION\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"FLOAT\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"INTEGER\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"PL/SQL BOOLEAN\", DB_TYPE_BOOLEAN);\ndbTypeByColumnTypeName.set(\"PL/SQL BINARY INTEGER\", DB_TYPE_BINARY_INTEGER);\ndbTypeByColumnTypeName.set(\"PL/SQL PLS INTEGER\", DB_TYPE_BINARY_INTEGER);\ndbTypeByColumnTypeName.set(\"REAL\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"SMALLINT\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"TIMESTAMP WITH LOCAL TZ\", DB_TYPE_TIMESTAMP_LTZ);\ndbTypeByColumnTypeName.set(\"TIMESTAMP WITH TZ\", DB_TYPE_TIMESTAMP_TZ);\nmodule.exports = {\n  DbType,\n  DB_TYPE_BFILE,\n  DB_TYPE_BINARY_DOUBLE,\n  DB_TYPE_BINARY_FLOAT,\n  DB_TYPE_BINARY_INTEGER,\n  DB_TYPE_BLOB,\n  DB_TYPE_BOOLEAN,\n  DB_TYPE_CHAR,\n  DB_TYPE_CLOB,\n  DB_TYPE_CURSOR,\n  DB_TYPE_DATE,\n  DB_TYPE_INTERVAL_DS,\n  DB_TYPE_INTERVAL_YM,\n  DB_TYPE_JSON,\n  DB_TYPE_LONG,\n  DB_TYPE_LONG_NVARCHAR,\n  DB_TYPE_LONG_RAW,\n  DB_TYPE_NCHAR,\n  DB_TYPE_NCLOB,\n  DB_TYPE_NUMBER,\n  DB_TYPE_NVARCHAR,\n  DB_TYPE_OBJECT,\n  DB_TYPE_RAW,\n  DB_TYPE_ROWID,\n  DB_TYPE_TIMESTAMP,\n  DB_TYPE_TIMESTAMP_LTZ,\n  DB_TYPE_TIMESTAMP_TZ,\n  DB_TYPE_UROWID,\n  DB_TYPE_VARCHAR,\n  DB_TYPE_CONVERSION_MAP,\n  DB_TYPE_FETCH_TYPE_MAP,\n  DB_TYPE_XMLTYPE,\n  getTypeByColumnTypeName,\n  getTypeByNum,\n  getTypeByOraTypeNum\n};","map":{"version":3,"names":["constants","require","errors","util","dbTypeByNum","Map","dbTypeByOraTypeNum","dbTypeByColumnTypeName","DbType","constructor","num","name","columnTypeName","options","_bufferSizeFactor","bufferSizeFactor","_oraTypeNum","oraTypeNum","_csfrm","csfrm","set","key","Symbol","toPrimitive","hint","toString","inspect","custom","getTypeByColumnTypeName","dbType","get","throwErr","ERR_UNKNOWN_COLUMN_TYPE_NAME","getTypeByNum","ERR_INVALID_TYPE_NUM","getTypeByOraTypeNum","ERR_INVALID_ORACLE_TYPE_NUM","DB_TYPE_BFILE","DB_TYPE_BINARY_DOUBLE","DB_TYPE_BINARY_FLOAT","DB_TYPE_BINARY_INTEGER","DB_TYPE_BLOB","DB_TYPE_BOOLEAN","DB_TYPE_CHAR","CSFRM_IMPLICIT","DB_TYPE_CLOB","DB_TYPE_CURSOR","DB_TYPE_DATE","DB_TYPE_INTERVAL_DS","DB_TYPE_INTERVAL_YM","DB_TYPE_JSON","DB_TYPE_LONG","DB_TYPE_LONG_NVARCHAR","CSFRM_NCHAR","DB_TYPE_LONG_RAW","DB_TYPE_NCHAR","DB_TYPE_NCLOB","DB_TYPE_NUMBER","DB_TYPE_NVARCHAR","DB_TYPE_OBJECT","DB_TYPE_RAW","DB_TYPE_ROWID","DB_TYPE_TIMESTAMP","DB_TYPE_TIMESTAMP_LTZ","DB_TYPE_TIMESTAMP_TZ","DB_TYPE_UROWID","DB_TYPE_VARCHAR","DB_TYPE_XMLTYPE","DB_TYPE_CONVERSION_MAP","DB_TYPE_FETCH_TYPE_MAP","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/types.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst util = require('util');\n\nconst dbTypeByNum = new Map();\nconst dbTypeByOraTypeNum = new Map();\nconst dbTypeByColumnTypeName = new Map();\n\n// define class used for database types\nclass DbType {\n\n  constructor(num, name, columnTypeName, options) {\n    this.num = num;\n    this.name = name;\n    this.columnTypeName = columnTypeName;\n    this._bufferSizeFactor = options.bufferSizeFactor || 0;\n    this._oraTypeNum = options.oraTypeNum || 0;\n    this._csfrm = options.csfrm || 0;\n    dbTypeByNum.set(num, this);\n    const key = (options.csfrm || 0) * 256 + options.oraTypeNum;\n    dbTypeByOraTypeNum.set(key, this);\n    dbTypeByColumnTypeName.set(columnTypeName, this);\n  }\n\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return this.num;\n      default:\n        return this.toString();\n    }\n  }\n\n  [util.inspect.custom]() {\n    return this.toString();\n  }\n\n  toString() {\n    return `[DbType ${this.name}]`;\n  }\n\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByColumnTypeName()\n//\n// Return the type given a column type name. If the column type name cannot be\n// found an exception is thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByColumnTypeName(name) {\n  const dbType = dbTypeByColumnTypeName.get(name);\n  if (!dbType)\n    errors.throwErr(errors.ERR_UNKNOWN_COLUMN_TYPE_NAME, name);\n  return dbType;\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByNum()\n//\n// Return the type given the type number. If the type number is incorrect an\n// exception is thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByNum(num) {\n  const dbType = dbTypeByNum.get(num);\n  if (!dbType)\n    errors.throwErr(errors.ERR_INVALID_TYPE_NUM, num);\n  return dbType;\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByOraTypeNum()\n//\n// Return the type given the Oracle type number and character set form. If the\n// Oracle type number and character set form are incorrect an exception is\n// thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByOraTypeNum(oraTypeNum, csfrm) {\n  const key = (csfrm || 0) * 256 + oraTypeNum;\n  const dbType = dbTypeByOraTypeNum.get(key);\n  if (!dbType)\n    errors.throwErr(errors.ERR_INVALID_ORACLE_TYPE_NUM, oraTypeNum, csfrm);\n  return dbType;\n}\n\nconst DB_TYPE_BFILE = new DbType(2020,\n  \"DB_TYPE_BFILE\", \"BFILE\",\n  { oraTypeNum: 114, bufferSizeFactor: 112 });\nconst DB_TYPE_BINARY_DOUBLE = new DbType(2008,\n  \"DB_TYPE_BINARY_DOUBLE\", \"BINARY_DOUBLE\",\n  { oraTypeNum: 101, bufferSizeFactor: 8 });\nconst DB_TYPE_BINARY_FLOAT = new DbType(2007,\n  \"DB_TYPE_BINARY_FLOAT\", \"BINARY_FLOAT\",\n  { oraTypeNum: 100, bufferSizeFactor: 4 });\nconst DB_TYPE_BINARY_INTEGER = new DbType(2009,\n  \"DB_TYPE_BINARY_INTEGER\", \"BINARY_INTEGER\",\n  { oraTypeNum: 3, bufferSizeFactor: 22 });\nconst DB_TYPE_BLOB = new DbType(2019,\n  \"DB_TYPE_BLOB\", \"BLOB\",\n  { oraTypeNum: 113, bufferSizeFactor: 112 });\nconst DB_TYPE_BOOLEAN = new DbType(2022,\n  \"DB_TYPE_BOOLEAN\", \"BOOLEAN\",\n  { oraTypeNum: 252, bufferSizeFactor: 4 });\nconst DB_TYPE_CHAR = new DbType(2003,\n  \"DB_TYPE_CHAR\", \"CHAR\",\n  { oraTypeNum: 96, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 4 });\nconst DB_TYPE_CLOB = new DbType(2017,\n  \"DB_TYPE_CLOB\", \"CLOB\",\n  { oraTypeNum: 112, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 112 });\nconst DB_TYPE_CURSOR = new DbType(2021,\n  \"DB_TYPE_CURSOR\", \"CURSOR\",\n  { oraTypeNum: 102, bufferSizeFactor: 4 });\nconst DB_TYPE_DATE = new DbType(2011,\n  \"DB_TYPE_DATE\", \"DATE\",\n  { oraTypeNum: 12, bufferSizeFactor: 7 });\nconst DB_TYPE_INTERVAL_DS = new DbType(2015,\n  \"DB_TYPE_INTERVAL_DS\", \"INTERVAL DAY TO SECOND\",\n  { oraTypeNum: 183, bufferSizeFactor: 11 });\nconst DB_TYPE_INTERVAL_YM = new DbType(2016,\n  \"DB_TYPE_INTERVAL_YM\", \"INTERVAL YEAR TO MONTH\",\n  { oraTypeNum: 182 });\nconst DB_TYPE_JSON = new DbType(2027,\n  \"DB_TYPE_JSON\", \"JSON\",\n  { oraTypeNum: 119 });\nconst DB_TYPE_LONG = new DbType(2024,\n  \"DB_TYPE_LONG\", \"LONG\",\n  { oraTypeNum: 8, csfrm: constants.CSFRM_IMPLICIT,\n    bufferSizeFactor: 2 ** 31 - 1 });\nconst DB_TYPE_LONG_NVARCHAR = new DbType(2031,\n  \"DB_TYPE_LONG_NVARCHAR\", \"LONG\",\n  { oraTypeNum: 8, csfrm: constants.CSFRM_NCHAR,\n    bufferSizeFactor: 2 ** 31 - 1 });\nconst DB_TYPE_LONG_RAW = new DbType(2025,\n  \"DB_TYPE_LONG_RAW\", \"LONG RAW\",\n  { oraTypeNum: 24, bufferSizeFactor: 2 ** 31 - 1 });\nconst DB_TYPE_NCHAR = new DbType(2004,\n  \"DB_TYPE_NCHAR\", \"NCHAR\",\n  { oraTypeNum: 96, csfrm: constants.CSFRM_NCHAR, bufferSizeFactor: 4 });\nconst DB_TYPE_NCLOB = new DbType(2018,\n  \"DB_TYPE_NCLOB\", \"NCLOB\",\n  { oraTypeNum: 112, csfrm: constants.CSFRM_NCHAR, bufferSizeFactor: 112 });\nconst DB_TYPE_NUMBER = new DbType(2010,\n  \"DB_TYPE_NUMBER\", \"NUMBER\",\n  { oraTypeNum: 2, bufferSizeFactor: 22 });\nconst DB_TYPE_NVARCHAR = new DbType(2002,\n  \"DB_TYPE_NVARCHAR\", \"NVARCHAR2\",\n  { oraTypeNum: 1, csfrm: constants.CSFRM_NCHAR, bufferSizeFactor: 4 });\nconst DB_TYPE_OBJECT = new DbType(2023,\n  \"DB_TYPE_OBJECT\", \"OBJECT\",\n  { oraTypeNum: 109 });\nconst DB_TYPE_RAW = new DbType(2006,\n  \"DB_TYPE_RAW\", \"RAW\",\n  { oraTypeNum: 23, bufferSizeFactor: 1 });\nconst DB_TYPE_ROWID = new DbType(2005,\n  \"DB_TYPE_ROWID\", \"ROWID\",\n  { oraTypeNum: 11, bufferSizeFactor: 18 });\nconst DB_TYPE_TIMESTAMP = new DbType(2012,\n  \"DB_TYPE_TIMESTAMP\", \"TIMESTAMP\",\n  { oraTypeNum: 180, bufferSizeFactor: 11 });\nconst DB_TYPE_TIMESTAMP_LTZ = new DbType(2014,\n  \"DB_TYPE_TIMESTAMP_LTZ\", \"TIMESTAMP WITH LOCAL TIME ZONE\",\n  { oraTypeNum: 231, bufferSizeFactor: 11 });\nconst DB_TYPE_TIMESTAMP_TZ = new DbType(2013,\n  \"DB_TYPE_TIMESTAMP_TZ\", \"TIMESTAMP WITH TIME ZONE\",\n  { oraTypeNum: 181, bufferSizeFactor: 13 });\nconst DB_TYPE_UROWID = new DbType(2030,\n  \"DB_TYPE_UROWID\", \"UROWID\",\n  { oraTypeNum: 208 });\nconst DB_TYPE_VARCHAR = new DbType(2001,\n  \"DB_TYPE_VARCHAR\", \"VARCHAR2\",\n  { oraTypeNum: 1, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 4 });\nconst DB_TYPE_XMLTYPE = new DbType(2032,\n  \"DB_TYPE_XMLTYPE\", \"XMLTYPE\",\n  { oraTypeNum: 109, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 2147483647 });\n\n// database type conversion map: the top level key refers to the database\n// type being fetched and the value is another map; this map's key is the\n// type requested by the user and its value is the actual type that will be\n// used in the define call; only entries are included where the database type\n// and the requested fetch type are different\nconst DB_TYPE_CONVERSION_MAP = new Map([\n  [DB_TYPE_BINARY_DOUBLE, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_BINARY_FLOAT, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_BLOB, new Map([\n    [DB_TYPE_RAW, DB_TYPE_LONG_RAW],\n    [DB_TYPE_LONG_RAW, DB_TYPE_LONG_RAW]\n  ])],\n  [DB_TYPE_CHAR, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_CLOB, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_LONG],\n    [DB_TYPE_LONG, DB_TYPE_LONG]\n  ])],\n  [DB_TYPE_DATE, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]\n  ])],\n  [DB_TYPE_JSON, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_LONG, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_LONG]\n  ])],\n  [DB_TYPE_LONG_RAW, new Map([\n    [DB_TYPE_RAW, DB_TYPE_LONG_RAW]\n  ])],\n  [DB_TYPE_NCHAR, new Map([\n    [DB_TYPE_CHAR, DB_TYPE_NCHAR],\n    [DB_TYPE_VARCHAR, DB_TYPE_NVARCHAR],\n    [DB_TYPE_NVARCHAR, DB_TYPE_NVARCHAR]\n  ])],\n  [DB_TYPE_NCLOB, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_LONG_NVARCHAR],\n    [DB_TYPE_NVARCHAR, DB_TYPE_LONG_NVARCHAR],\n    [DB_TYPE_LONG, DB_TYPE_LONG_NVARCHAR],\n    [DB_TYPE_LONG_NVARCHAR, DB_TYPE_LONG_NVARCHAR]\n  ])],\n  [DB_TYPE_NUMBER, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_NVARCHAR, new Map([\n    [DB_TYPE_CHAR, DB_TYPE_NCHAR],\n    [DB_TYPE_NCHAR, DB_TYPE_NCHAR],\n    [DB_TYPE_VARCHAR, DB_TYPE_NVARCHAR]\n  ])],\n  [DB_TYPE_RAW, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_ROWID, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_ROWID]\n  ])],\n  [DB_TYPE_TIMESTAMP, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]\n  ])],\n  [DB_TYPE_TIMESTAMP_LTZ, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_TZ, DB_TYPE_TIMESTAMP_TZ]\n  ])],\n  [DB_TYPE_TIMESTAMP_TZ, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]\n  ])],\n  [DB_TYPE_UROWID, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_ROWID]\n  ])],\n]);\n\n// default fetch type map\nconst DB_TYPE_FETCH_TYPE_MAP = new Map([\n  [DB_TYPE_BFILE, DB_TYPE_BFILE],\n  [DB_TYPE_BINARY_DOUBLE, DB_TYPE_BINARY_DOUBLE],\n  [DB_TYPE_BINARY_FLOAT, DB_TYPE_BINARY_FLOAT],\n  [DB_TYPE_BINARY_INTEGER, DB_TYPE_BINARY_INTEGER],\n  [DB_TYPE_BLOB, DB_TYPE_BLOB],\n  [DB_TYPE_BOOLEAN, DB_TYPE_BOOLEAN],\n  [DB_TYPE_CHAR, DB_TYPE_CHAR],\n  [DB_TYPE_CLOB, DB_TYPE_CLOB],\n  [DB_TYPE_CURSOR, DB_TYPE_CURSOR],\n  [DB_TYPE_DATE, DB_TYPE_DATE],\n  [DB_TYPE_INTERVAL_DS, DB_TYPE_INTERVAL_DS],\n  [DB_TYPE_INTERVAL_YM, DB_TYPE_INTERVAL_YM],\n  [DB_TYPE_JSON, DB_TYPE_JSON],\n  [DB_TYPE_LONG, DB_TYPE_LONG],\n  [DB_TYPE_LONG_NVARCHAR, DB_TYPE_LONG_NVARCHAR],\n  [DB_TYPE_LONG_RAW, DB_TYPE_LONG_RAW],\n  [DB_TYPE_NCHAR, DB_TYPE_NCHAR],\n  [DB_TYPE_NCLOB, DB_TYPE_NCLOB],\n  [DB_TYPE_NUMBER, DB_TYPE_NUMBER],\n  [DB_TYPE_NVARCHAR, DB_TYPE_NVARCHAR],\n  [DB_TYPE_OBJECT, DB_TYPE_OBJECT],\n  [DB_TYPE_RAW, DB_TYPE_RAW],\n  [DB_TYPE_ROWID, DB_TYPE_ROWID],\n  [DB_TYPE_TIMESTAMP, DB_TYPE_TIMESTAMP],\n  [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_TZ],\n  [DB_TYPE_TIMESTAMP_TZ, DB_TYPE_TIMESTAMP_TZ],\n  [DB_TYPE_UROWID, DB_TYPE_UROWID],\n  [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n  [DB_TYPE_XMLTYPE, DB_TYPE_XMLTYPE]\n]);\n\n// additional aliases for types by column type name\ndbTypeByColumnTypeName.set(\"DOUBLE PRECISION\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"FLOAT\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"INTEGER\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"PL/SQL BOOLEAN\", DB_TYPE_BOOLEAN);\ndbTypeByColumnTypeName.set(\"PL/SQL BINARY INTEGER\", DB_TYPE_BINARY_INTEGER);\ndbTypeByColumnTypeName.set(\"PL/SQL PLS INTEGER\", DB_TYPE_BINARY_INTEGER);\ndbTypeByColumnTypeName.set(\"REAL\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"SMALLINT\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"TIMESTAMP WITH LOCAL TZ\", DB_TYPE_TIMESTAMP_LTZ);\ndbTypeByColumnTypeName.set(\"TIMESTAMP WITH TZ\", DB_TYPE_TIMESTAMP_TZ);\n\nmodule.exports = {\n  DbType,\n  DB_TYPE_BFILE,\n  DB_TYPE_BINARY_DOUBLE,\n  DB_TYPE_BINARY_FLOAT,\n  DB_TYPE_BINARY_INTEGER,\n  DB_TYPE_BLOB,\n  DB_TYPE_BOOLEAN,\n  DB_TYPE_CHAR,\n  DB_TYPE_CLOB,\n  DB_TYPE_CURSOR,\n  DB_TYPE_DATE,\n  DB_TYPE_INTERVAL_DS,\n  DB_TYPE_INTERVAL_YM,\n  DB_TYPE_JSON,\n  DB_TYPE_LONG,\n  DB_TYPE_LONG_NVARCHAR,\n  DB_TYPE_LONG_RAW,\n  DB_TYPE_NCHAR,\n  DB_TYPE_NCLOB,\n  DB_TYPE_NUMBER,\n  DB_TYPE_NVARCHAR,\n  DB_TYPE_OBJECT,\n  DB_TYPE_RAW,\n  DB_TYPE_ROWID,\n  DB_TYPE_TIMESTAMP,\n  DB_TYPE_TIMESTAMP_LTZ,\n  DB_TYPE_TIMESTAMP_TZ,\n  DB_TYPE_UROWID,\n  DB_TYPE_VARCHAR,\n  DB_TYPE_CONVERSION_MAP,\n  DB_TYPE_FETCH_TYPE_MAP,\n  DB_TYPE_XMLTYPE,\n  getTypeByColumnTypeName,\n  getTypeByNum,\n  getTypeByOraTypeNum\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}