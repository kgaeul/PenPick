{"ast":null,"code":"console.log('Start of the script');\nconst oracledb = require('oracledb');\nconst fs = require('fs');\nconst dbConfig = {\n  user: 'carrot',\n  password: 'carrot',\n  connectString: 'localhost:1521/XE'\n};\nasync function insertData() {\n  try {\n    // C:\\Users\\SAY\\Desktop\\파이널프로젝트\n    const filePath = 'C:\\\\Users\\\\user1\\\\Downloads\\\\pensions.json';\n    const jsonData = fs.readFileSync(filePath, 'utf8');\n    const startIndex = jsonData.indexOf('[');\n    const endIndex = jsonData.lastIndexOf(']');\n    if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {\n      const filteredJsonData = jsonData.substring(startIndex, endIndex + 1);\n      let data;\n      try {\n        data = JSON.parse(filteredJsonData);\n      } catch (parseError) {\n        console.error('JSON 파싱 잘못됨:', parseError.message);\n        return;\n      }\n      const connection = await oracledb.getConnection(dbConfig);\n      for (const item of data) {\n        try {\n          if (item.명칭 && item['숙박 종류']) {\n            const query = `\n              INSERT INTO pensions (NAME, CONTACT, ADDRESS, LATITUDE, LONGITUDE, INTRODUCTION, SCALE, PARKING, COOK, CHECK_IN, CHECK_OUT, DININGHALL, AMENITIES, SEMINAR, SPORTS, SAUNA, BEAUTY, KARAOKE, BARBEQUE, CAMPFIRE, PC_ROOM, PUBLIC_SHOWER, REFUND)\n              VALUES (:NAME, :CONTACT, :ADDRESS, :LATITUDE, :LONGITUDE, :INTRODUCTION, :SCALE, :PARKING, :COOK, :CHECK_IN, :CHECK_OUT, :DININGHALL, :AMENITIES, :SEMINAR, :SPORTS, :SAUNA, :BEAUTY, :KARAOKE, :BARBEQUE, :CAMPFIRE, :PC_ROOM, :PUBLIC_SHOWER, :REFUND)\n            `;\n            const binds = {\n              NAME: item.명칭,\n              CONTACT: item.전화번호 || '',\n              ADDRESS: item.주소 || '',\n              LATITUDE: item.위도 || '',\n              LONGITUDE: item.경도 || '',\n              INTRODUCTION: item.개요 || '',\n              SCALE: item.규모 || '',\n              PARKING: item['주차 가능'] || '',\n              COOK: item['조리 가능'] || '',\n              CHECK_IN: item.체크인 || '',\n              CHECK_OUT: item.체크아웃 || '',\n              DININGHALL: item.식음료장 || '',\n              AMENITIES: item['부대 시설'] || '',\n              SEMINAR: item.세미나 || '',\n              SPORTS: item.스포츠시설 || '',\n              SAUNA: item.사우나실 || '',\n              BEAUTY: item['뷰티 시설'] || '',\n              KARAOKE: item.노래방 || '',\n              BARBEQUE: item.바베큐장 || '',\n              CAMPFIRE: item.캠프화이어 || '',\n              PC_ROOM: item['공용 PC실'] || '',\n              PUBLIC_SHOWER: item['공용 샤워실'] || '',\n              REFUND: item.환불규정 || ''\n            };\n            await connection.execute(query, binds, {\n              autoCommit: true\n            });\n          }\n        } catch (insertError) {\n          console.error('데이터 넣을 수 없음:', insertError.message);\n        }\n      }\n      console.log('데이터 넣기 성공.');\n      await connection.close();\n    } else {\n      console.error('JSON 포멧이 잘못됨.');\n    }\n  } catch (err) {\n    console.error('Error:', err.message);\n  }\n}\ninsertData();","map":{"version":3,"names":["console","log","oracledb","require","fs","dbConfig","user","password","connectString","insertData","filePath","jsonData","readFileSync","startIndex","indexOf","endIndex","lastIndexOf","filteredJsonData","substring","data","JSON","parse","parseError","error","message","connection","getConnection","item","명칭","query","binds","NAME","CONTACT","전화번호","ADDRESS","주소","LATITUDE","위도","LONGITUDE","경도","INTRODUCTION","개요","SCALE","규모","PARKING","COOK","CHECK_IN","체크인","CHECK_OUT","체크아웃","DININGHALL","식음료장","AMENITIES","SEMINAR","세미나","SPORTS","스포츠시설","SAUNA","사우나실","BEAUTY","KARAOKE","노래방","BARBEQUE","바베큐장","CAMPFIRE","캠프화이어","PC_ROOM","PUBLIC_SHOWER","REFUND","환불규정","execute","autoCommit","insertError","close","err"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/src/DbConfig.js"],"sourcesContent":["console.log('Start of the script');\r\nconst oracledb = require('oracledb');\r\nconst fs = require('fs');\r\n\r\nconst dbConfig = {\r\n  user: 'carrot',\r\n  password: 'carrot',\r\n  connectString: 'localhost:1521/XE',\r\n};\r\n\r\nasync function insertData() {\r\n  try {\r\n    // C:\\Users\\SAY\\Desktop\\파이널프로젝트\r\n    const filePath = 'C:\\\\Users\\\\user1\\\\Downloads\\\\pensions.json';\r\n    const jsonData = fs.readFileSync(filePath, 'utf8');\r\n    const startIndex = jsonData.indexOf('[');\r\n    const endIndex = jsonData.lastIndexOf(']');\r\n\r\n    if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {\r\n      const filteredJsonData = jsonData.substring(startIndex, endIndex + 1);\r\n      let data;\r\n\r\n      try {\r\n        data = JSON.parse(filteredJsonData);\r\n      } catch (parseError) {\r\n        console.error('JSON 파싱 잘못됨:', parseError.message);\r\n        return;\r\n      }\r\n\r\n      const connection = await oracledb.getConnection(dbConfig);\r\n\r\n      for (const item of data) {\r\n        try {\r\n          if (item.명칭 && item['숙박 종류']) {\r\n            const query = `\r\n              INSERT INTO pensions (NAME, CONTACT, ADDRESS, LATITUDE, LONGITUDE, INTRODUCTION, SCALE, PARKING, COOK, CHECK_IN, CHECK_OUT, DININGHALL, AMENITIES, SEMINAR, SPORTS, SAUNA, BEAUTY, KARAOKE, BARBEQUE, CAMPFIRE, PC_ROOM, PUBLIC_SHOWER, REFUND)\r\n              VALUES (:NAME, :CONTACT, :ADDRESS, :LATITUDE, :LONGITUDE, :INTRODUCTION, :SCALE, :PARKING, :COOK, :CHECK_IN, :CHECK_OUT, :DININGHALL, :AMENITIES, :SEMINAR, :SPORTS, :SAUNA, :BEAUTY, :KARAOKE, :BARBEQUE, :CAMPFIRE, :PC_ROOM, :PUBLIC_SHOWER, :REFUND)\r\n            `;\r\n\r\n            const binds = {\r\n              NAME: item.명칭,\r\n              CONTACT: item.전화번호 || '',\r\n              ADDRESS: item.주소 || '',\r\n              LATITUDE: item.위도 || '',\r\n              LONGITUDE: item.경도 || '',\r\n              INTRODUCTION: item.개요 || '',\r\n              SCALE: item.규모 || '',\r\n              PARKING: item['주차 가능'] || '',\r\n              COOK: item['조리 가능'] || '',\r\n              CHECK_IN: item.체크인 || '',\r\n              CHECK_OUT: item.체크아웃 || '',\r\n              DININGHALL: item.식음료장 || '',\r\n              AMENITIES: item['부대 시설'] || '',\r\n              SEMINAR: item.세미나 || '',\r\n              SPORTS: item.스포츠시설 || '',\r\n              SAUNA: item.사우나실 || '',\r\n              BEAUTY: item['뷰티 시설'] || '',\r\n              KARAOKE: item.노래방 || '',\r\n              BARBEQUE: item.바베큐장 || '',\r\n              CAMPFIRE: item.캠프화이어 || '',\r\n              PC_ROOM: item['공용 PC실'] || '',\r\n              PUBLIC_SHOWER: item['공용 샤워실'] || '',\r\n              REFUND: item.환불규정 || '',\r\n            };\r\n\r\n            await connection.execute(query, binds, { autoCommit: true });\r\n          }\r\n        } catch (insertError) {\r\n          console.error('데이터 넣을 수 없음:', insertError.message);\r\n        }\r\n      }\r\n\r\n      console.log('데이터 넣기 성공.');\r\n\r\n      await connection.close();\r\n    } else {\r\n      console.error('JSON 포멧이 잘못됨.');\r\n    }\r\n  } catch (err) {\r\n    console.error('Error:', err.message);\r\n  }\r\n}\r\n\r\ninsertData();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}