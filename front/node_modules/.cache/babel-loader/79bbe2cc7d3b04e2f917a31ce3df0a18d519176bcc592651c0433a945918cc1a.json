{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst utils = require(\"../utils\");\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\nconst {\n  ThinDbObjectImpl,\n  readXML\n} = require(\"../../dbObject.js\");\nconst ThinLobImpl = require(\"../../lob.js\");\nconst errors = require('../../../errors');\nconst types = require('../../../types.js');\n\n/**\n * Handles data like row header, rowdata , ... recevied from an RPC Execute\n *\n * @class MessageWithData\n * @extends {Message}\n */\nclass MessageWithData extends Message {\n  constructor(connection, statement = null, options = null) {\n    super(connection);\n    this.statement = statement;\n    this.options = options;\n    this.offset = 0;\n    this.numExecs = 1;\n    this.arrayDmlRowCounts = false;\n    this.requiresDefine = false;\n    this.rowIndex = statement.bufferRowCount || 0;\n    this.dmlRowCounts = [];\n    this.batchErrors = false;\n    this.outVariables = [];\n    this.inFetch = false;\n    this.parseOnly = false;\n    this.resultSetsToSetup = [];\n    this.deferredErr = null;\n  }\n\n  /**\n    * processMessage() - Process the data type message\n    */\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_DESCRIBE_INFO) {\n      buf.skipBytesChunked();\n      const prevQueryVars = this.statement.queryVars;\n      this.statement.queryVars = [];\n      this.statement.numQueryVars = 0;\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n      this.processDescribeInfo(buf, this.resultSet, prevQueryVars);\n      this.outVariables = this.statement.queryVars;\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_HEADER) {\n      this.processRowHeader(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_DATA) {\n      this.processRowData(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IMPLICIT_RESULTSET) {\n      this.processImplicitResultSet(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_BIT_VECTOR) {\n      this.processBitVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IO_VECTOR) {\n      this.processIOVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS) {\n      this.flushOutBinds = true;\n    } else if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n  hasMoreData() {\n    return !this.processedError && !this.flushOutBinds;\n  }\n  processErrorInfo(buf) {\n    super.processErrorInfo(buf);\n    if (this.errorInfo.cursorId !== 0) {\n      this.statement.cursorId = this.errorInfo.cursorId;\n    }\n    if (!this.statement.isPlSql) {\n      this.statement.rowCount = this.errorInfo.rowCount;\n    }\n    // we do not set the lastRowid if the rows affected is 0\n    if (this.errorInfo.rowCount > 0) {\n      this.statement.lastRowid = utils.encodeRowID(this.errorInfo.rowID);\n    }\n    this.options.batchErrors = this.errorInfo.batchErrors;\n    if (this.batchErrors && this.options.batchErrors === null) {\n      this.options.batchErrors = [];\n    }\n    if (this.errorInfo.num === constants.TNS_ERR_NO_DATA_FOUND && this.statement.isQuery) {\n      this.errorInfo.num = 0;\n      this.errorOccurred = false;\n      this.statement.moreRowsToFetch = false;\n    } else if (this.errorInfo.num !== 0 && this.errorInfo.cursorId !== 0) {\n      this.connection.statementCache.delete(this.statement.sql);\n      this.statement.returnToCache = false;\n    }\n    if (this.errorInfo.batchErrors) {\n      this.errorOccurred = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // If we have fetched this column earlier, we set that\n  // fetch type for the describe info variable received\n  // assuming the returned column order is same as previous.\n  //---------------------------------------------------------------------------\n  _adjustFetchType(pVar, cVar) {\n    if (cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_CLOB && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG || cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      cVar.type = pVar.fetchInfo.fetchType;\n      cVar.maxSize = pVar.maxSize;\n    }\n  }\n  processDescribeInfo(buf, resultSet, prevQueryVars) {\n    const statement = resultSet.statement;\n    buf.skipUB4(); // max row size\n    statement.numQueryVars = buf.readUB4();\n    if (statement.numQueryVars > 0) {\n      buf.skipUB1();\n    }\n    resultSet.metadata = [];\n    for (let i = 0; i < statement.numQueryVars; i++) {\n      const variable = this.processColumnInfo(buf, i + 1);\n      if (prevQueryVars && i < prevQueryVars.length) {\n        this._adjustFetchType(prevQueryVars[i], variable);\n      }\n      statement.queryVars.push(variable);\n      resultSet.metadata.push(variable.fetchInfo);\n    }\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked(); // current date\n    }\n    buf.skipUB4(); // dcbflag\n    buf.skipUB4(); // dcbmdbz\n    buf.skipUB4(); // dcbmnpr\n    buf.skipUB4(); // dcbmxpr\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n    this.resultSetsToSetup.push(resultSet);\n  }\n  processColumnInfo(buf, columnNum) {\n    const dataType = buf.readUInt8();\n    buf.skipUB1(); // flags\n    const precision = buf.readInt8();\n    const scale = buf.readInt8();\n    const maxSize = buf.readUB4();\n    buf.skipUB4(); // max number of array elements\n    buf.skipUB8(); // cont flags\n    let oid;\n    let numBytes = buf.readUB4(); // OID\n    if (numBytes > 0) {\n      oid = Buffer.from(buf.readBytesWithLength());\n    }\n    buf.skipUB2(); // version\n    buf.skipUB2(); // character set id\n    const csfrm = buf.readUInt8(); // character set form\n    let size = buf.readUB4();\n    if (dataType === constants.TNS_DATA_TYPE_RAW) {\n      size = maxSize;\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n      buf.skipUB4(); // oaccolid\n    }\n    const nullable = Boolean(buf.readUInt8());\n    buf.skipUB1(); // v7 length of name\n    let name;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      name = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    let schema;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      schema = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    numBytes = buf.readUB4();\n    let typeName;\n    if (numBytes > 0) {\n      typeName = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    buf.skipUB2(); // column position\n    const udsFlags = buf.readUB4(); // uds flag\n\n    // build metadata\n    const fetchInfo = {\n      name: name,\n      dbType: types.getTypeByOraTypeNum(dataType, csfrm),\n      nullable: nullable\n    };\n    fetchInfo.isJson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_JSON);\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1) {\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainSchema = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainName = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_3) {\n      if (buf.readUB4() > 0) {\n        fetchInfo.annotations = {};\n        buf.skipUB1();\n        const numAnnotations = buf.readUB4();\n        buf.skipUB1();\n        let key, value;\n        for (let i = 0; i < numAnnotations; i++) {\n          buf.skipUB4();\n          value = \"\";\n          key = buf.readStr(constants.CSFRM_IMPLICIT);\n          numBytes = buf.readUB4();\n          if (numBytes > 0) {\n            value = buf.readStr(constants.CSFRM_IMPLICIT);\n          }\n          fetchInfo.annotations[key] = value;\n          buf.skipUB4(); // flags\n        }\n        buf.skipUB4(); // flags\n      }\n    }\n    switch (fetchInfo.dbType) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_CHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_RAW:\n        fetchInfo.byteSize = size;\n        break;\n      case types.DB_TYPE_NUMBER:\n        fetchInfo.precision = precision;\n        break;\n      case types.DB_TYPE_TIMESTAMP:\n      case types.DB_TYPE_TIMESTAMP_TZ:\n      case types.DB_TYPE_TIMESTAMP_LTZ:\n        fetchInfo.precision = scale;\n        break;\n      case types.DB_TYPE_OBJECT:\n        fetchInfo.dbTypeClass = this.connection._getDbObjectType(schema, typeName, undefined, oid);\n        if (fetchInfo.dbTypeClass.partial) {\n          this.connection._partialDbObjectTypes.push(fetchInfo.dbTypeClass);\n        }\n        if (fetchInfo.dbTypeClass.isXmlType) {\n          fetchInfo.dbType = types.DB_TYPE_XMLTYPE;\n        }\n        break;\n      default:\n        break;\n    }\n    if (fetchInfo.dbType === types.DB_TYPE_NUMBER) {\n      fetchInfo.scale = scale;\n    }\n    return {\n      fetchInfo: fetchInfo,\n      type: fetchInfo.dbType,\n      maxSize: maxSize,\n      columnNum: columnNum,\n      values: new Array(this.options.fetchArraySize)\n    };\n  }\n  processRowHeader(buf) {\n    buf.skipUB1(); // flags\n    buf.skipUB2(); // num requests\n    buf.skipUB4(); // iteration number\n    buf.skipUB4(); // num iters\n    buf.skipUB2(); // buffer length\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      this.bitVector = Buffer.from(buf.readBytesWithLength());\n    }\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked(); // rxhrid\n    }\n  }\n  isDuplicateData(columnName) {\n    if (!this.bitVector) {\n      return false;\n    }\n    const byteNum = Math.floor(columnName / 8);\n    const bitNum = columnName % 8;\n    return (this.bitVector[byteNum] & 1 << bitNum) === 0;\n  }\n  processRowData(buf) {\n    let value;\n    for (const [col, variable] of this.outVariables.entries()) {\n      if (variable.isArray) {\n        variable.numElementsInArray = buf.readUB4();\n        const values = new Array(variable.numElementsInArray).fill(null);\n        for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n          value = this.processColumnData(buf, variable, pos);\n          values[pos] = value;\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.statement.isReturning) {\n        const numRows = buf.readUB4();\n        const values = Array(numRows).fill(null);\n        for (let j = 0; j < numRows; j++) {\n          values[j] = this.processColumnData(buf, variable, j);\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.isDuplicateData(col)) {\n        if (this.rowIndex === 0 && variable.outConverter) {\n          value = variable.lastRawValue;\n        } else {\n          value = variable.values[this.statement.lastRowIndex];\n        }\n        variable.values[this.rowIndex] = value;\n      } else {\n        value = this.processColumnData(buf, variable, this.rowIndex);\n        variable.values[this.rowIndex] = value;\n      }\n    }\n    this.rowIndex++;\n    if (this.inFetch) {\n      this.statement.lastRowIndex = this.rowIndex - 1;\n      this.statement.bufferRowCount++;\n      this.bitVector = null;\n    }\n  }\n  processIOVector(buf) {\n    let numBytes;\n    buf.skipUB1(); // flag\n    const temp16 = buf.readUB2(); // num requests\n    const temp32 = buf.readUB4(); // iter num\n    const numBinds = temp32 * 256 + temp16;\n    buf.skipUB4(); // num iters this time\n    buf.skipUB2(); // uac buffer length\n    numBytes = buf.readUB2(); // bit vector for fast fetch\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numBytes = buf.readUB2(); // rowid\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    this.outVariables = [];\n    for (let i = 0; i < numBinds; i++) {\n      // bind directions\n      const bindInfo = this.statement.bindInfoList[i];\n      bindInfo.bindDir = buf.readUInt8();\n      if (bindInfo.bindDir === constants.TNS_BIND_DIR_INPUT) {\n        continue;\n      }\n      this.outVariables.push(bindInfo.bindVar);\n    }\n  }\n  processColumnData(buf, variable) {\n    const dbType = variable.type;\n    const oraTypeNum = dbType._oraTypeNum;\n    const csfrm = dbType._csfrm;\n    const maxSize = variable.maxSize;\n    let colValue = null;\n    if (maxSize === 0 && oraTypeNum !== constants.TNS_DATA_TYPE_LONG && oraTypeNum !== constants.TNS_DATA_TYPE_LONG_RAW && oraTypeNum !== constants.TNS_DATA_TYPE_UROWID) {\n      colValue = null;\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR || oraTypeNum === constants.TNS_DATA_TYPE_CHAR || oraTypeNum === constants.TNS_DATA_TYPE_LONG) {\n      if (csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n      }\n      colValue = buf.readStr(csfrm);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_RAW || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      colValue = buf.readBytesWithLength();\n      if (colValue !== null) {\n        colValue = Buffer.from(colValue);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER) {\n      colValue = buf.readOracleNumber();\n      if (!this.inFetch && colValue !== null) colValue = parseFloat(colValue);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_DATE || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ) {\n      const useLocalTime = oraTypeNum === constants.TNS_DATA_TYPE_DATE || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP;\n      colValue = buf.readOracleDate(useLocalTime);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_ROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        const numBytes = buf.readUInt8();\n        if (isNullLength(numBytes)) {\n          colValue = null;\n        } else {\n          const rowid = buf.readRowID();\n          colValue = utils.encodeRowID(rowid);\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_UROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        colValue = buf.readURowID();\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      colValue = buf.readBinaryDouble();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      colValue = buf.readBinaryFloat();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      colValue = buf.readOracleNumber();\n      if (colValue !== null) colValue = parseFloat(colValue);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      const numBytes = buf.readUInt8();\n      if (isNullLength(numBytes)) {\n        colValue = null;\n      } else {\n        colValue = this.createCursorFromDescribe(buf);\n        colValue.statement.cursorId = buf.readUB2();\n        // If the cursor ID is 0 for the returned ref cursor then\n        // it is an invalid cursor\n        if (colValue.statement.cursorId === 0 && variable.dir !== constants.BIND_IN) {\n          if (this.options.nullifyInvalidCursor) {\n            colValue = null;\n          } else {\n            errors.throwErr(errors.ERR_INVALID_REF_CURSOR);\n          }\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      colValue = buf.readBool();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n      const bvalue = buf.readUB4();\n      if (bvalue > 0) {\n        // Non Null data in column\n        colValue = new ThinLobImpl();\n        const length = buf.readUB8();\n        const chunkSize = buf.readUB4();\n        const locator = Buffer.from(buf.readBytesWithLength());\n        colValue.init(this.connection, locator, dbType, length, chunkSize);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      colValue = buf.readOson();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      const obj = buf.readDbObject();\n      if (obj.packedData) {\n        const objType = variable.fetchInfo ? variable.fetchInfo.dbTypeClass : variable.typeClass;\n        if (variable.type === types.DB_TYPE_XMLTYPE) {\n          colValue = readXML(this.connection, obj.packedData);\n        } else {\n          colValue = new ThinDbObjectImpl(objType, obj.packedData);\n          colValue.toid = obj.toid;\n          colValue.oid = obj.oid;\n        }\n      }\n    } else {\n      errors.throwErr(errors.ERR_UNSUPPORTED_DATA_TYPE, dbType.num, variable.columnNum);\n    }\n    if (!this.inFetch) {\n      const actualNumBytes = buf.readSB4();\n      if (actualNumBytes < 0 && oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        colValue = null;\n\n        // For objects, maxsize validation is skipped\n      } else if (actualNumBytes !== 0 && colValue !== null && oraTypeNum !== constants.TNS_DATA_TYPE_INT_NAMED) {\n        this.saveDeferredErr(errors.ERR_INSUFFICIENT_BUFFER_FOR_BINDS);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_LONG || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW || variable.maxSize > buf.caps.maxStringSize) {\n      buf.skipSB4(); // null indicator\n      buf.skipUB4(); // return code\n    }\n    return colValue;\n  }\n  processReturnParameter(buf) {\n    let keywordNum = 0;\n    let keyTextValue;\n    let numParams = buf.readUB2(); // al8o4l (ignored)\n\n    for (let i = 0; i < numParams; i++) {\n      buf.skipUB4();\n    }\n    let numBytes = buf.readUB2(); // al8txl (ignored)\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numParams = buf.readUB2(); // num key/value pairs\n    for (let i = 0; i < numParams; i++) {\n      numBytes = buf.readUB2(); // key\n      if (numBytes > 0) {\n        keyTextValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB2(); // value\n      if (numBytes > 0) {\n        buf.skipBytesChunked();\n      }\n      keywordNum = buf.readUB2(); // keyword num\n      if (keywordNum === constants.TNS_KEYWORD_NUM_CURRENT_SCHEMA) {\n        this.connection.currentSchema = keyTextValue;\n      } else if (keywordNum === constants.TNS_KEYWORD_NUM_EDITION) {\n        this.connection._edition = keyTextValue;\n      }\n    }\n    numBytes = buf.readUB2(); // registration\n    if (numBytes > 0) {\n      buf.skip(numBytes);\n    }\n    if (this.arrayDmlRowCounts) {\n      const numRows = buf.readUB4();\n      const rowCounts = this.options.dmlRowCounts = [];\n      for (let i = 0; i < numRows; i++) {\n        const rowCount = buf.readUB8();\n        rowCounts.push(rowCount);\n      }\n    }\n  }\n  async postProcess() {\n    if (this.deferredErr) {\n      throw this.deferredErr;\n    }\n    if (this.outVariables) {\n      for (const variable of this.outVariables) {\n        if (variable.isArray) {\n          if (variable.outConverter) {\n            for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n              variable.values[0][pos] = await variable.outConverter(variable.values[0][pos]);\n            }\n          }\n        } else {\n          if (variable.outConverter) {\n            variable.values[0] = await variable.outConverter(variable.values[0]);\n          }\n        }\n      }\n    }\n    await this.connection._populatePartialDbObjectTypes();\n    for (const resultSet of this.resultSetsToSetup) {\n      resultSet._setup(this.options, resultSet.metadata);\n      // LOBs always require define and they change the type that is actually\n      // returned by the server\n      for (const variable of resultSet.statement.queryVars) {\n        if (variable.type === types.DB_TYPE_CLOB || variable.type === types.DB_TYPE_NCLOB || variable.type === types.DB_TYPE_BLOB || variable.type === types.DB_TYPE_JSON) {\n          if (variable.type !== variable.fetchInfo.fetchType) {\n            variable.type = variable.fetchInfo.fetchType;\n            variable.maxSize = constants.TNS_MAX_LONG_LENGTH;\n          }\n          if (!resultSet.statement.noPrefetch) {\n            resultSet.statement.requiresDefine = true;\n            resultSet.statement.noPrefetch = true;\n          }\n        }\n      }\n    }\n  }\n  preProcess() {\n    if (this.statement.isReturning && !this.parseOnly) {\n      this.outVariables = [];\n      for (const bindInfo of this.statement.bindInfoList) {\n        if (bindInfo.isReturnBind) {\n          this.outVariables.push(bindInfo.bindVar);\n        }\n      }\n    }\n    if (this.statement.isQuery) {\n      this.inFetch = true;\n      if (this.statement.queryVars) {\n        this.outVariables = [];\n        for (let i = 0; i < this.statement.queryVars.length; i++) {\n          this.outVariables.push(this.statement.queryVars[i]);\n        }\n      }\n    }\n  }\n  processBitVector(buf) {\n    this.numColumnsSent = buf.readUB2();\n    let numBytes = Math.floor(this.statement.numQueryVars / 8);\n    if (this.statement.numQueryVars % 8 > 0) {\n      numBytes += 1;\n    }\n    this.bitVector = Buffer.from(buf.readBytes(numBytes));\n  }\n  processBindParams(buf, params) {\n    const bindVars = [];\n    const nonReturningParams = [];\n    for (const bindInfo of params) {\n      if (!bindInfo.isReturnBind) {\n        nonReturningParams.push(bindInfo);\n      }\n      bindVars.push(bindInfo.bindVar);\n    }\n    this.writeColumnMetadata(buf, bindVars);\n    return nonReturningParams;\n  }\n  writeColumnMetadata(buf, bindVars) {\n    for (const variable of bindVars) {\n      let oraTypeNum = variable.type._oraTypeNum;\n      let maxSize = variable.maxSize || variable.type._bufferSizeFactor;\n      let lobPrefetchLength = 0;\n\n      // NCHAR, NVARCHAR reports ORA-01460: unimplemented or unreasonable\n      // conversion requested if maxSize is not multiplied by the\n      // bufferSizeFactor\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        maxSize *= variable.type._bufferSizeFactor;\n      }\n      if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n        oraTypeNum = constants.TNS_DATA_TYPE_VARCHAR;\n        maxSize = constants.TNS_MAX_UROWID_LENGTH;\n      }\n      let flag = constants.TNS_BIND_USE_INDICATORS;\n      if (variable.isArray) {\n        flag |= constants.TNS_BIND_ARRAY;\n      }\n      let contFlag = 0;\n      if (variable.type === types.DB_TYPE_BLOB || variable.type === types.DB_TYPE_CLOB || variable.type === types.DB_TYPE_NCLOB) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n      } else if (variable.type === types.DB_TYPE_JSON) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_JSON_MAX_LENGTH;\n      }\n      buf.writeUInt8(oraTypeNum);\n      buf.writeUInt8(flag);\n      // precision and scale are always written as zero as the server\n      // expects that and complains if any other value is sent!\n      buf.writeUInt8(0);\n      buf.writeUInt8(0);\n      if (maxSize > buf.caps.maxStringSize) {\n        buf.writeUB4(constants.TNS_MAX_LONG_LENGTH);\n      } else {\n        buf.writeUB4(maxSize);\n      }\n      if (variable.isArray) {\n        buf.writeUB4(variable.maxArraySize);\n      } else {\n        buf.writeUB4(0); // max num elements\n      }\n      buf.writeUB4(contFlag);\n      if (variable.objType) {\n        const objType = variable.objType;\n        buf.writeUB4(objType.oid.length);\n        buf.writeBytesWithLength(objType.oid);\n        buf.writeUB2(objType.version);\n      } else {\n        buf.writeUB4(0); // OID\n        buf.writeUB2(0); // version\n      }\n      if (variable.type._csfrm !== 0) {\n        buf.writeUB2(constants.TNS_CHARSET_UTF8);\n      } else {\n        buf.writeUB2(0);\n      }\n      buf.writeUInt8(variable.type._csfrm);\n      buf.writeUB4(lobPrefetchLength); // max chars (LOB prefetch)\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n        buf.writeUB4(0); // oaccolid\n      }\n    }\n  }\n  writeBindParamsRow(buf, params, pos) {\n    const offset = this.offset;\n    let foundLong = false;\n    for (const bindInfo of params) {\n      if (bindInfo.isReturnBind) continue;\n      const variable = bindInfo.bindVar;\n      if (variable.isArray) {\n        const numElements = variable.values.length;\n        buf.writeUB4(numElements);\n        for (let i = 0; i < numElements; i++) {\n          this.writeBindParamsColumn(buf, variable, variable.values[i]);\n        }\n      } else {\n        if (!this.statement.isPlSql && variable.maxSize > buf.caps.maxStringSize) {\n          foundLong = true;\n        } else {\n          this.writeBindParamsColumn(buf, variable, variable.values[pos + offset]);\n        }\n      }\n    }\n    if (foundLong) {\n      for (const bindInfo of params) {\n        if (bindInfo.isReturnBind) continue;\n        const variable = bindInfo.bindVar;\n        if (variable.maxSize > buf.caps.maxStringSize) {\n          this.writeBindParamsColumn(buf, variable, variable.values[pos + offset]);\n        }\n      }\n    }\n  }\n  writeBindParamsColumn(buf, variable, value) {\n    const oraTypeNum = variable.type._oraTypeNum;\n    let tempVal;\n    if ((value === undefined || value === null) && oraTypeNum !== constants.TNS_DATA_TYPE_CURSOR && oraTypeNum !== constants.TNS_DATA_TYPE_JSON) {\n      if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        buf.writeUInt8(constants.TNS_ESCAPE_CHAR);\n        buf.writeUInt8(1);\n      } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n        buf.writeUB4(0); // TOID\n        buf.writeUB4(0); // OID\n        buf.writeUB4(0); // snapshot\n        buf.writeUB4(0); // version\n        buf.writeUB4(0); // packed data length\n        buf.writeUB4(constants.TNS_OBJ_TOP_LEVEL); // flags\n      } else {\n        buf.writeUInt8(0);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER || oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      if (typeof value === 'boolean') {\n        tempVal = value ? \"1\" : \"0\";\n      } else {\n        tempVal = value.toString();\n      }\n      buf.writeOracleNumber(tempVal);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR || oraTypeNum === constants.TNS_DATA_TYPE_CHAR || oraTypeNum === constants.TNS_DATA_TYPE_LONG || oraTypeNum === constants.TNS_DATA_TYPE_RAW || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        value = Buffer.from(value, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        value = Buffer.from(value);\n      }\n      buf.writeBytesWithLength(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_DATE || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ || oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ) {\n      buf.writeOracleDate(value, variable.type);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      buf.writeBinaryDouble(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      buf.writeBinaryFloat(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      let cursor = value;\n      if (!value) {\n        cursor = this.connection._createResultSet();\n      }\n      if (cursor.statement.cursorId === 0) {\n        buf.writeUInt8(1);\n        buf.writeUInt8(0);\n      } else {\n        buf.writeUB4(1);\n        buf.writeUB4(cursor.statement.cursorId);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      if (value) {\n        buf.writeUInt8(2);\n        buf.writeUInt16BE(0x0101);\n      } else {\n        buf.writeUInt16BE(0x0100);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n      buf.writeUB4(value._locator.length);\n      buf.writeBytesWithLength(value._locator);\n    } else if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n      buf.writeBytesWithLength(Buffer.from(value));\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      buf.writeOson(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      buf.writeDbObject(value);\n    } else {\n      const message = `Binding data of type ${variable.type}`;\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, message);\n    }\n  }\n  createCursorFromDescribe(buf) {\n    const resultSet = this.connection._createResultSet(this.options);\n    resultSet.options.moreRowsToFetch = true;\n    resultSet.statement.isQuery = true;\n    resultSet.statement.requiresFullExecute = true;\n    this.processDescribeInfo(buf, resultSet);\n    return resultSet;\n  }\n  processImplicitResultSet(buf) {\n    this.options.implicitResultSet = [];\n    const numResults = buf.readUB4();\n    for (let i = 0; i < numResults; i++) {\n      const numBytes = buf.readUInt8();\n      buf.skipBytes(numBytes);\n      const childResultSet = this.createCursorFromDescribe(buf);\n      childResultSet.statement.cursorId = buf.readUB2();\n      this.options.implicitResultSet.push(childResultSet);\n    }\n  }\n}\nconst isNullLength = len => {\n  return len === 0 || len === constants.TNS_NULL_LENGTH_INDICATOR;\n};\nmodule.exports = MessageWithData;","map":{"version":3,"names":["Buffer","require","utils","constants","Message","ThinDbObjectImpl","readXML","ThinLobImpl","errors","types","MessageWithData","constructor","connection","statement","options","offset","numExecs","arrayDmlRowCounts","requiresDefine","rowIndex","bufferRowCount","dmlRowCounts","batchErrors","outVariables","inFetch","parseOnly","resultSetsToSetup","deferredErr","processMessage","buf","messageType","TNS_MSG_TYPE_DESCRIBE_INFO","skipBytesChunked","prevQueryVars","queryVars","numQueryVars","bufferRowIndex","processDescribeInfo","resultSet","TNS_MSG_TYPE_ROW_HEADER","processRowHeader","TNS_MSG_TYPE_ROW_DATA","processRowData","TNS_MSG_TYPE_IMPLICIT_RESULTSET","processImplicitResultSet","TNS_MSG_TYPE_BIT_VECTOR","processBitVector","TNS_MSG_TYPE_IO_VECTOR","processIOVector","TNS_MSG_TYPE_FLUSH_OUT_BINDS","flushOutBinds","TNS_MSG_TYPE_ERROR","processErrorInfo","hasMoreData","processedError","errorInfo","cursorId","isPlSql","rowCount","lastRowid","encodeRowID","rowID","num","TNS_ERR_NO_DATA_FOUND","isQuery","errorOccurred","moreRowsToFetch","statementCache","delete","sql","returnToCache","_adjustFetchType","pVar","cVar","fetchInfo","dbType","_oraTypeNum","TNS_DATA_TYPE_CLOB","fetchType","TNS_DATA_TYPE_LONG","TNS_DATA_TYPE_BLOB","TNS_DATA_TYPE_LONG_RAW","type","maxSize","skipUB4","readUB4","skipUB1","metadata","i","variable","processColumnInfo","length","push","numBytes","columnNum","dataType","readUInt8","precision","readInt8","scale","skipUB8","oid","from","readBytesWithLength","skipUB2","csfrm","size","TNS_DATA_TYPE_RAW","caps","ttcFieldVersion","TNS_CCAP_FIELD_VERSION_12_2","nullable","Boolean","name","readStr","CSFRM_IMPLICIT","schema","typeName","udsFlags","getTypeByOraTypeNum","isJson","TNS_UDS_FLAGS_IS_JSON","TNS_CCAP_FIELD_VERSION_23_1","domainSchema","domainName","TNS_CCAP_FIELD_VERSION_23_1_EXT_3","annotations","numAnnotations","key","value","DB_TYPE_VARCHAR","DB_TYPE_NVARCHAR","DB_TYPE_CHAR","DB_TYPE_NCHAR","DB_TYPE_RAW","byteSize","DB_TYPE_NUMBER","DB_TYPE_TIMESTAMP","DB_TYPE_TIMESTAMP_TZ","DB_TYPE_TIMESTAMP_LTZ","DB_TYPE_OBJECT","dbTypeClass","_getDbObjectType","undefined","partial","_partialDbObjectTypes","isXmlType","DB_TYPE_XMLTYPE","values","Array","fetchArraySize","bitVector","isDuplicateData","columnName","byteNum","Math","floor","bitNum","col","entries","isArray","numElementsInArray","fill","pos","processColumnData","isReturning","numRows","j","outConverter","lastRawValue","lastRowIndex","temp16","readUB2","temp32","numBinds","skipBytes","bindInfo","bindInfoList","bindDir","TNS_BIND_DIR_INPUT","bindVar","oraTypeNum","_csfrm","colValue","TNS_DATA_TYPE_UROWID","TNS_DATA_TYPE_VARCHAR","TNS_DATA_TYPE_CHAR","CSFRM_NCHAR","checkNCharsetId","TNS_DATA_TYPE_NUMBER","readOracleNumber","parseFloat","TNS_DATA_TYPE_DATE","TNS_DATA_TYPE_TIMESTAMP","TNS_DATA_TYPE_TIMESTAMP_LTZ","TNS_DATA_TYPE_TIMESTAMP_TZ","useLocalTime","readOracleDate","TNS_DATA_TYPE_ROWID","isNullLength","rowid","readRowID","readURowID","TNS_DATA_TYPE_BINARY_DOUBLE","readBinaryDouble","TNS_DATA_TYPE_BINARY_FLOAT","readBinaryFloat","TNS_DATA_TYPE_BINARY_INTEGER","TNS_DATA_TYPE_CURSOR","createCursorFromDescribe","dir","BIND_IN","nullifyInvalidCursor","throwErr","ERR_INVALID_REF_CURSOR","TNS_DATA_TYPE_BOOLEAN","readBool","bvalue","readUB8","chunkSize","locator","init","TNS_DATA_TYPE_JSON","readOson","TNS_DATA_TYPE_INT_NAMED","obj","readDbObject","packedData","objType","typeClass","toid","ERR_UNSUPPORTED_DATA_TYPE","actualNumBytes","readSB4","saveDeferredErr","ERR_INSUFFICIENT_BUFFER_FOR_BINDS","maxStringSize","skipSB4","processReturnParameter","keywordNum","keyTextValue","numParams","TNS_KEYWORD_NUM_CURRENT_SCHEMA","currentSchema","TNS_KEYWORD_NUM_EDITION","_edition","skip","rowCounts","postProcess","_populatePartialDbObjectTypes","_setup","DB_TYPE_CLOB","DB_TYPE_NCLOB","DB_TYPE_BLOB","DB_TYPE_JSON","TNS_MAX_LONG_LENGTH","noPrefetch","preProcess","isReturnBind","numColumnsSent","readBytes","processBindParams","params","bindVars","nonReturningParams","writeColumnMetadata","_bufferSizeFactor","lobPrefetchLength","includes","TNS_MAX_UROWID_LENGTH","flag","TNS_BIND_USE_INDICATORS","TNS_BIND_ARRAY","contFlag","TNS_LOB_PREFETCH_FLAG","TNS_JSON_MAX_LENGTH","writeUInt8","writeUB4","maxArraySize","writeBytesWithLength","writeUB2","version","TNS_CHARSET_UTF8","writeBindParamsRow","foundLong","numElements","writeBindParamsColumn","tempVal","TNS_ESCAPE_CHAR","TNS_OBJ_TOP_LEVEL","toString","writeOracleNumber","TNS_ENCODING_UTF16","swap16","writeOracleDate","writeBinaryDouble","writeBinaryFloat","cursor","_createResultSet","writeUInt16BE","_locator","writeOson","writeDbObject","message","ERR_NOT_IMPLEMENTED","requiresFullExecute","implicitResultSet","numResults","childResultSet","len","TNS_NULL_LENGTH_INDICATOR","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/protocol/messages/withData.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst utils = require(\"../utils\");\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\nconst { ThinDbObjectImpl, readXML } = require(\"../../dbObject.js\");\nconst ThinLobImpl = require(\"../../lob.js\");\nconst errors = require('../../../errors');\nconst types = require('../../../types.js');\n\n/**\n * Handles data like row header, rowdata , ... recevied from an RPC Execute\n *\n * @class MessageWithData\n * @extends {Message}\n */\nclass MessageWithData extends Message {\n  constructor(connection, statement = null, options = null) {\n    super(connection);\n    this.statement = statement;\n    this.options = options;\n    this.offset = 0;\n    this.numExecs = 1;\n    this.arrayDmlRowCounts = false;\n    this.requiresDefine = false;\n    this.rowIndex = statement.bufferRowCount || 0;\n    this.dmlRowCounts = [];\n    this.batchErrors = false;\n    this.outVariables = [];\n    this.inFetch = false;\n    this.parseOnly = false;\n    this.resultSetsToSetup = [];\n    this.deferredErr = null;\n  }\n\n  /**\n    * processMessage() - Process the data type message\n    */\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_DESCRIBE_INFO) {\n      buf.skipBytesChunked();\n      const prevQueryVars = this.statement.queryVars;\n      this.statement.queryVars = [];\n      this.statement.numQueryVars = 0;\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n      this.processDescribeInfo(buf, this.resultSet, prevQueryVars);\n      this.outVariables = this.statement.queryVars;\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_HEADER) {\n      this.processRowHeader(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_DATA) {\n      this.processRowData(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IMPLICIT_RESULTSET) {\n      this.processImplicitResultSet(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_BIT_VECTOR) {\n      this.processBitVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IO_VECTOR) {\n      this.processIOVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS) {\n      this.flushOutBinds = true;\n    } else if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n\n  hasMoreData() {\n    return !this.processedError && !this.flushOutBinds;\n  }\n\n  processErrorInfo(buf) {\n    super.processErrorInfo(buf);\n    if (this.errorInfo.cursorId !== 0) {\n      this.statement.cursorId = this.errorInfo.cursorId;\n    }\n    if (!this.statement.isPlSql) {\n      this.statement.rowCount = this.errorInfo.rowCount;\n    }\n    // we do not set the lastRowid if the rows affected is 0\n    if (this.errorInfo.rowCount > 0) {\n      this.statement.lastRowid = utils.encodeRowID(this.errorInfo.rowID);\n    }\n    this.options.batchErrors = this.errorInfo.batchErrors;\n    if (this.batchErrors && this.options.batchErrors === null) {\n      this.options.batchErrors = [];\n    }\n    if (this.errorInfo.num === constants.TNS_ERR_NO_DATA_FOUND && this.statement.isQuery) {\n      this.errorInfo.num = 0;\n      this.errorOccurred = false;\n      this.statement.moreRowsToFetch = false;\n    } else if (this.errorInfo.num !== 0 && this.errorInfo.cursorId !== 0) {\n      this.connection.statementCache.delete(this.statement.sql);\n      this.statement.returnToCache = false;\n    }\n    if (this.errorInfo.batchErrors) {\n      this.errorOccurred = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // If we have fetched this column earlier, we set that\n  // fetch type for the describe info variable received\n  // assuming the returned column order is same as previous.\n  //---------------------------------------------------------------------------\n  _adjustFetchType(pVar, cVar) {\n    if ((cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_CLOB\n       && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG)\n        || (cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB\n          && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW)) {\n      cVar.type = pVar.fetchInfo.fetchType;\n      cVar.maxSize = pVar.maxSize;\n    }\n  }\n\n  processDescribeInfo(buf, resultSet, prevQueryVars) {\n    const statement = resultSet.statement;\n    buf.skipUB4();                              // max row size\n    statement.numQueryVars = buf.readUB4();\n    if (statement.numQueryVars > 0) {\n      buf.skipUB1();\n    }\n    resultSet.metadata = [];\n    for (let i = 0; i < statement.numQueryVars; i++) {\n      const variable = this.processColumnInfo(buf, i + 1);\n      if (prevQueryVars && i < prevQueryVars.length) {\n        this._adjustFetchType(prevQueryVars[i], variable);\n      }\n      statement.queryVars.push(variable);\n      resultSet.metadata.push(variable.fetchInfo);\n    }\n\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();                   // current date\n    }\n    buf.skipUB4();                              // dcbflag\n    buf.skipUB4();                              // dcbmdbz\n    buf.skipUB4();                              // dcbmnpr\n    buf.skipUB4();                              // dcbmxpr\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n\n    this.resultSetsToSetup.push(resultSet);\n  }\n\n  processColumnInfo(buf, columnNum) {\n    const dataType = buf.readUInt8();\n    buf.skipUB1(); // flags\n    const precision = buf.readInt8();\n    const scale = buf.readInt8();\n    const maxSize = buf.readUB4();\n    buf.skipUB4();                              // max number of array elements\n    buf.skipUB8();                              // cont flags\n    let oid;\n    let numBytes = buf.readUB4();               // OID\n    if (numBytes > 0) {\n      oid = Buffer.from(buf.readBytesWithLength());\n    }\n    buf.skipUB2();                              // version\n    buf.skipUB2();                              // character set id\n    const csfrm = buf.readUInt8();              // character set form\n    let size = buf.readUB4();\n    if (dataType === constants.TNS_DATA_TYPE_RAW) {\n      size = maxSize;\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n      buf.skipUB4();                            // oaccolid\n    }\n    const nullable = Boolean(buf.readUInt8());\n    buf.skipUB1();                              // v7 length of name\n    let name;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      name = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    let schema;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      schema = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    numBytes = buf.readUB4();\n    let typeName;\n    if (numBytes > 0) {\n      typeName = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    buf.skipUB2();                              // column position\n    const udsFlags = buf.readUB4();             // uds flag\n\n    // build metadata\n    const fetchInfo = {\n      name: name,\n      dbType: types.getTypeByOraTypeNum(dataType, csfrm),\n      nullable: nullable\n    };\n    fetchInfo.isJson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_JSON);\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1) {\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainSchema = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainName = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_3) {\n      if (buf.readUB4() > 0) {\n        fetchInfo.annotations = {};\n        buf.skipUB1();\n        const numAnnotations = buf.readUB4();\n        buf.skipUB1();\n        let key, value;\n        for (let i = 0; i < numAnnotations; i++) {\n          buf.skipUB4();\n          value = \"\";\n          key = buf.readStr(constants.CSFRM_IMPLICIT);\n          numBytes = buf.readUB4();\n          if (numBytes > 0) {\n            value = buf.readStr(constants.CSFRM_IMPLICIT);\n          }\n          fetchInfo.annotations[key] = value;\n          buf.skipUB4();                        // flags\n        }\n        buf.skipUB4();                          // flags\n      }\n    }\n\n    switch (fetchInfo.dbType) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_CHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_RAW:\n        fetchInfo.byteSize = size;\n        break;\n      case types.DB_TYPE_NUMBER:\n        fetchInfo.precision = precision;\n        break;\n      case types.DB_TYPE_TIMESTAMP:\n      case types.DB_TYPE_TIMESTAMP_TZ:\n      case types.DB_TYPE_TIMESTAMP_LTZ:\n        fetchInfo.precision = scale;\n        break;\n      case types.DB_TYPE_OBJECT:\n        fetchInfo.dbTypeClass = this.connection._getDbObjectType(schema,\n          typeName, undefined, oid);\n        if (fetchInfo.dbTypeClass.partial) {\n          this.connection._partialDbObjectTypes.push(fetchInfo.dbTypeClass);\n        }\n        if (fetchInfo.dbTypeClass.isXmlType) {\n          fetchInfo.dbType = types.DB_TYPE_XMLTYPE;\n        }\n        break;\n      default:\n        break;\n    }\n    if (fetchInfo.dbType === types.DB_TYPE_NUMBER) {\n      fetchInfo.scale = scale;\n    }\n    return {\n      fetchInfo: fetchInfo,\n      type: fetchInfo.dbType,\n      maxSize: maxSize,\n      columnNum: columnNum,\n      values: new Array(this.options.fetchArraySize)\n    };\n  }\n\n  processRowHeader(buf) {\n    buf.skipUB1();                              // flags\n    buf.skipUB2();                              // num requests\n    buf.skipUB4();                              // iteration number\n    buf.skipUB4();                              // num iters\n    buf.skipUB2();                              // buffer length\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      this.bitVector = Buffer.from(buf.readBytesWithLength());\n    }\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();                   // rxhrid\n    }\n  }\n\n  isDuplicateData(columnName) {\n    if (!this.bitVector) {\n      return false;\n    }\n    const byteNum = Math.floor(columnName / 8);\n    const bitNum = columnName % 8;\n    return (this.bitVector[byteNum] & (1 << bitNum)) === 0;\n  }\n\n  processRowData(buf) {\n    let value;\n    for (const [col, variable] of this.outVariables.entries()) {\n      if (variable.isArray) {\n        variable.numElementsInArray = buf.readUB4();\n        const values = new Array(variable.numElementsInArray).fill(null);\n        for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n          value = this.processColumnData(buf, variable, pos);\n          values[pos] = value;\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.statement.isReturning) {\n        const numRows = buf.readUB4();\n        const values = Array(numRows).fill(null);\n        for (let j = 0; j < numRows; j++) {\n          values[j] = this.processColumnData(buf, variable, j);\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.isDuplicateData(col)) {\n        if (this.rowIndex === 0 && variable.outConverter) {\n          value = variable.lastRawValue;\n        } else {\n          value = variable.values[this.statement.lastRowIndex];\n        }\n        variable.values[this.rowIndex] = value;\n      } else {\n        value = this.processColumnData(buf, variable, this.rowIndex);\n        variable.values[this.rowIndex] = value;\n      }\n    }\n    this.rowIndex++;\n    if (this.inFetch) {\n      this.statement.lastRowIndex = this.rowIndex - 1;\n      this.statement.bufferRowCount++;\n      this.bitVector = null;\n    }\n  }\n\n  processIOVector(buf) {\n    let numBytes;\n    buf.skipUB1();                              // flag\n    const temp16 = buf.readUB2();              // num requests\n    const temp32 = buf.readUB4();              // iter num\n    const numBinds = temp32 * 256 + temp16;\n    buf.skipUB4();                              // num iters this time\n    buf.skipUB2();                              // uac buffer length\n    numBytes = buf.readUB2();                   // bit vector for fast fetch\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numBytes = buf.readUB2();                   // rowid\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    this.outVariables = [];\n    for (let i = 0; i < numBinds; i++) {              // bind directions\n      const bindInfo = this.statement.bindInfoList[i];\n      bindInfo.bindDir = buf.readUInt8();\n      if (bindInfo.bindDir === constants.TNS_BIND_DIR_INPUT) {\n        continue;\n      }\n      this.outVariables.push(bindInfo.bindVar);\n    }\n  }\n\n  processColumnData(buf, variable) {\n    const dbType = variable.type;\n    const oraTypeNum = dbType._oraTypeNum;\n    const csfrm = dbType._csfrm;\n    const maxSize = variable.maxSize;\n\n    let colValue = null;\n    if (maxSize === 0 && oraTypeNum !== constants.TNS_DATA_TYPE_LONG\n      && oraTypeNum !== constants.TNS_DATA_TYPE_LONG_RAW\n      && oraTypeNum !== constants.TNS_DATA_TYPE_UROWID) {\n      colValue = null;\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_CHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG\n    ) {\n      if (csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n      }\n      colValue = buf.readStr(csfrm);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_RAW ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      colValue = buf.readBytesWithLength();\n      if (colValue !== null) {\n        colValue = Buffer.from(colValue);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER) {\n      colValue = buf.readOracleNumber();\n      if (!this.inFetch && colValue !== null)\n        colValue = parseFloat(colValue);\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ\n    ) {\n      const useLocalTime = (oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n        oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP);\n      colValue = buf.readOracleDate(useLocalTime);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_ROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        const numBytes = buf.readUInt8();\n        if (isNullLength(numBytes)) {\n          colValue = null;\n        } else {\n          const rowid = buf.readRowID();\n          colValue = utils.encodeRowID(rowid);\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_UROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        colValue = buf.readURowID();\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      colValue = buf.readBinaryDouble();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      colValue = buf.readBinaryFloat();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      colValue = buf.readOracleNumber();\n      if (colValue !== null)\n        colValue = parseFloat(colValue);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      const numBytes = buf.readUInt8();\n      if (isNullLength(numBytes)) {\n        colValue = null;\n      } else {\n        colValue = this.createCursorFromDescribe(buf);\n        colValue.statement.cursorId = buf.readUB2();\n        // If the cursor ID is 0 for the returned ref cursor then\n        // it is an invalid cursor\n        if (colValue.statement.cursorId === 0 && variable.dir !== constants.BIND_IN) {\n          if (this.options.nullifyInvalidCursor) {\n            colValue = null;\n          } else {\n            errors.throwErr(errors.ERR_INVALID_REF_CURSOR);\n          }\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      colValue = buf.readBool();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n      const bvalue = buf.readUB4();\n      if (bvalue > 0) { // Non Null data in column\n        colValue = new ThinLobImpl();\n        const length = buf.readUB8();\n        const chunkSize = buf.readUB4();\n        const locator = Buffer.from(buf.readBytesWithLength());\n        colValue.init(this.connection, locator, dbType, length, chunkSize);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      colValue = buf.readOson();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      const obj = buf.readDbObject();\n      if (obj.packedData) {\n        const objType = (variable.fetchInfo) ? variable.fetchInfo.dbTypeClass :\n          variable.typeClass;\n\n        if (variable.type === types.DB_TYPE_XMLTYPE) {\n          colValue = readXML(this.connection, obj.packedData);\n        } else {\n          colValue = new ThinDbObjectImpl(objType, obj.packedData);\n          colValue.toid = obj.toid;\n          colValue.oid = obj.oid;\n        }\n      }\n    } else {\n      errors.throwErr(errors.ERR_UNSUPPORTED_DATA_TYPE, dbType.num,\n        variable.columnNum);\n    }\n\n    if (!this.inFetch) {\n      const actualNumBytes = buf.readSB4();\n      if (actualNumBytes < 0 && oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        colValue = null;\n\n      // For objects, maxsize validation is skipped\n      } else if (actualNumBytes !== 0 && colValue !== null &&\n        oraTypeNum !== constants.TNS_DATA_TYPE_INT_NAMED) {\n        this.saveDeferredErr(errors.ERR_INSUFFICIENT_BUFFER_FOR_BINDS);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_LONG || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW || variable.maxSize > buf.caps.maxStringSize) {\n      buf.skipSB4();                            // null indicator\n      buf.skipUB4();                            // return code\n    }\n    return colValue;\n  }\n\n  processReturnParameter(buf) {\n    let keywordNum = 0;\n    let keyTextValue;\n    let numParams = buf.readUB2();              // al8o4l (ignored)\n\n    for (let i = 0; i < numParams; i++) {\n      buf.skipUB4();\n    }\n    let numBytes = buf.readUB2();               // al8txl (ignored)\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numParams = buf.readUB2();                  // num key/value pairs\n    for (let i = 0; i < numParams; i++) {\n      numBytes = buf.readUB2();                 // key\n      if (numBytes > 0) {\n        keyTextValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB2();                 // value\n      if (numBytes > 0) {\n        buf.skipBytesChunked();\n      }\n      keywordNum = buf.readUB2();               // keyword num\n      if (keywordNum === constants.TNS_KEYWORD_NUM_CURRENT_SCHEMA) {\n        this.connection.currentSchema = keyTextValue;\n      } else if (keywordNum === constants.TNS_KEYWORD_NUM_EDITION) {\n        this.connection._edition = keyTextValue;\n      }\n    }\n    numBytes = buf.readUB2();                   // registration\n    if (numBytes > 0) {\n      buf.skip(numBytes);\n    }\n    if (this.arrayDmlRowCounts) {\n      const numRows = buf.readUB4();\n      const rowCounts = this.options.dmlRowCounts = [];\n      for (let i = 0; i < numRows; i++) {\n        const rowCount = buf.readUB8();\n        rowCounts.push(rowCount);\n      }\n    }\n  }\n\n  async postProcess() {\n    if (this.deferredErr) {\n      throw this.deferredErr;\n    }\n\n    if (this.outVariables) {\n      for (const variable of this.outVariables) {\n        if (variable.isArray) {\n          if (variable.outConverter) {\n            for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n              variable.values[0][pos] = await variable.outConverter(variable.values[0][pos]);\n            }\n          }\n        } else {\n          if (variable.outConverter) {\n            variable.values[0] = await variable.outConverter(variable.values[0]);\n          }\n        }\n      }\n    }\n    await this.connection._populatePartialDbObjectTypes();\n    for (const resultSet of this.resultSetsToSetup) {\n      resultSet._setup(this.options, resultSet.metadata);\n      // LOBs always require define and they change the type that is actually\n      // returned by the server\n      for (const variable of resultSet.statement.queryVars) {\n        if (variable.type === types.DB_TYPE_CLOB ||\n            variable.type === types.DB_TYPE_NCLOB ||\n            variable.type === types.DB_TYPE_BLOB ||\n            variable.type === types.DB_TYPE_JSON) {\n          if (variable.type !== variable.fetchInfo.fetchType) {\n            variable.type = variable.fetchInfo.fetchType;\n            variable.maxSize = constants.TNS_MAX_LONG_LENGTH;\n          }\n          if (!resultSet.statement.noPrefetch) {\n            resultSet.statement.requiresDefine = true;\n            resultSet.statement.noPrefetch = true;\n          }\n        }\n      }\n    }\n  }\n\n  preProcess() {\n    if (this.statement.isReturning && !this.parseOnly) {\n      this.outVariables = [];\n      for (const bindInfo of this.statement.bindInfoList) {\n        if (bindInfo.isReturnBind) {\n          this.outVariables.push(bindInfo.bindVar);\n        }\n      }\n    }\n\n    if (this.statement.isQuery) {\n      this.inFetch = true;\n      if (this.statement.queryVars) {\n        this.outVariables = [];\n        for (let i = 0; i < this.statement.queryVars.length; i++) {\n          this.outVariables.push(this.statement.queryVars[i]);\n        }\n      }\n    }\n  }\n\n  processBitVector(buf) {\n    this.numColumnsSent = buf.readUB2();\n    let numBytes = Math.floor(this.statement.numQueryVars / 8);\n    if (this.statement.numQueryVars % 8 > 0) {\n      numBytes += 1;\n    }\n    this.bitVector = Buffer.from(buf.readBytes(numBytes));\n  }\n\n  processBindParams(buf, params) {\n    const bindVars = [];\n    const nonReturningParams = [];\n    for (const bindInfo of params) {\n      if (!bindInfo.isReturnBind) {\n        nonReturningParams.push(bindInfo);\n      }\n      bindVars.push(bindInfo.bindVar);\n    }\n    this.writeColumnMetadata(buf, bindVars);\n    return nonReturningParams;\n  }\n\n  writeColumnMetadata(buf, bindVars) {\n    for (const variable of bindVars) {\n      let oraTypeNum = variable.type._oraTypeNum;\n      let maxSize = variable.maxSize || variable.type._bufferSizeFactor;\n      let lobPrefetchLength = 0;\n\n      // NCHAR, NVARCHAR reports ORA-01460: unimplemented or unreasonable\n      // conversion requested if maxSize is not multiplied by the\n      // bufferSizeFactor\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        maxSize *= variable.type._bufferSizeFactor;\n      }\n      if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n        oraTypeNum = constants.TNS_DATA_TYPE_VARCHAR;\n        maxSize = constants.TNS_MAX_UROWID_LENGTH;\n      }\n      let flag = constants.TNS_BIND_USE_INDICATORS;\n      if (variable.isArray) {\n        flag |= constants.TNS_BIND_ARRAY;\n      }\n      let contFlag = 0;\n      if (variable.type === types.DB_TYPE_BLOB ||\n          variable.type === types.DB_TYPE_CLOB ||\n          variable.type === types.DB_TYPE_NCLOB) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n      } else if (variable.type === types.DB_TYPE_JSON) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_JSON_MAX_LENGTH;\n      }\n      buf.writeUInt8(oraTypeNum);\n      buf.writeUInt8(flag);\n      // precision and scale are always written as zero as the server\n      // expects that and complains if any other value is sent!\n      buf.writeUInt8(0);\n      buf.writeUInt8(0);\n      if (maxSize > buf.caps.maxStringSize) {\n        buf.writeUB4(constants.TNS_MAX_LONG_LENGTH);\n      } else {\n        buf.writeUB4(maxSize);\n      }\n\n      if (variable.isArray) {\n        buf.writeUB4(variable.maxArraySize);\n      } else {\n        buf.writeUB4(0);                        // max num elements\n      }\n      buf.writeUB4(contFlag);\n      if (variable.objType) {\n        const objType = variable.objType;\n        buf.writeUB4(objType.oid.length);\n        buf.writeBytesWithLength(objType.oid);\n        buf.writeUB2(objType.version);\n      } else {\n        buf.writeUB4(0);                        // OID\n        buf.writeUB2(0);                        // version\n      }\n      if (variable.type._csfrm !== 0) {\n        buf.writeUB2(constants.TNS_CHARSET_UTF8);\n      } else {\n        buf.writeUB2(0);\n      }\n      buf.writeUInt8(variable.type._csfrm);\n      buf.writeUB4(lobPrefetchLength);          // max chars (LOB prefetch)\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n        buf.writeUB4(0);                        // oaccolid\n      }\n    }\n  }\n\n  writeBindParamsRow(buf, params, pos) {\n    const offset = this.offset;\n    let foundLong = false;\n    for (const bindInfo of params) {\n      if (bindInfo.isReturnBind)\n        continue;\n      const variable = bindInfo.bindVar;\n      if (variable.isArray) {\n        const numElements = variable.values.length;\n        buf.writeUB4(numElements);\n        for (let i = 0; i < numElements; i++) {\n          this.writeBindParamsColumn(buf, variable, variable.values[i]);\n        }\n      } else {\n        if ((!this.statement.isPlSql) && variable.maxSize > buf.caps.maxStringSize) {\n          foundLong = true;\n        } else {\n          this.writeBindParamsColumn(buf, variable,\n            variable.values[pos + offset]);\n        }\n      }\n    }\n    if (foundLong) {\n      for (const bindInfo of params) {\n        if (bindInfo.isReturnBind)\n          continue;\n        const variable = bindInfo.bindVar;\n        if (variable.maxSize > buf.caps.maxStringSize) {\n          this.writeBindParamsColumn(buf, variable, variable.values[pos + offset]);\n        }\n      }\n    }\n  }\n\n  writeBindParamsColumn(buf, variable, value) {\n    const oraTypeNum = variable.type._oraTypeNum;\n    let tempVal;\n    if ((value === undefined || value === null) && oraTypeNum !== constants.TNS_DATA_TYPE_CURSOR && oraTypeNum !== constants.TNS_DATA_TYPE_JSON) {\n      if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        buf.writeUInt8(constants.TNS_ESCAPE_CHAR);\n        buf.writeUInt8(1);\n      } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n        buf.writeUB4(0);                // TOID\n        buf.writeUB4(0);                // OID\n        buf.writeUB4(0);                // snapshot\n        buf.writeUB4(0);                // version\n        buf.writeUB4(0);                // packed data length\n        buf.writeUB4(constants.TNS_OBJ_TOP_LEVEL);    // flags\n      } else {\n        buf.writeUInt8(0);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER ||\n      oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      if (typeof value === 'boolean') {\n        tempVal = (value) ? \"1\" : \"0\";\n      } else {\n        tempVal = value.toString();\n      }\n      buf.writeOracleNumber(tempVal);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_CHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG ||\n      oraTypeNum === constants.TNS_DATA_TYPE_RAW ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        value = Buffer.from(value, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        value = Buffer.from(value);\n      }\n      buf.writeBytesWithLength(value);\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ\n    ) {\n      buf.writeOracleDate(value, variable.type);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      buf.writeBinaryDouble(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      buf.writeBinaryFloat(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      let cursor = value;\n      if (!value) {\n        cursor = this.connection._createResultSet();\n      }\n      if (cursor.statement.cursorId === 0) {\n        buf.writeUInt8(1);\n        buf.writeUInt8(0);\n      } else {\n        buf.writeUB4(1);\n        buf.writeUB4(cursor.statement.cursorId);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      if (value) {\n        buf.writeUInt8(2);\n        buf.writeUInt16BE(0x0101);\n      } else {\n        buf.writeUInt16BE(0x0100);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n      buf.writeUB4(value._locator.length);\n      buf.writeBytesWithLength(value._locator);\n    } else if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n      buf.writeBytesWithLength(Buffer.from(value));\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      buf.writeOson(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      buf.writeDbObject(value);\n    } else {\n      const message = `Binding data of type ${variable.type}`;\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, message);\n    }\n  }\n\n  createCursorFromDescribe(buf) {\n    const resultSet = this.connection._createResultSet(this.options);\n    resultSet.options.moreRowsToFetch = true;\n    resultSet.statement.isQuery = true;\n    resultSet.statement.requiresFullExecute = true;\n    this.processDescribeInfo(buf, resultSet);\n    return resultSet;\n  }\n\n  processImplicitResultSet(buf) {\n    this.options.implicitResultSet = [];\n    const numResults = buf.readUB4();\n    for (let i = 0; i < numResults; i++) {\n      const numBytes = buf.readUInt8();\n      buf.skipBytes(numBytes);\n      const childResultSet = this.createCursorFromDescribe(buf);\n      childResultSet.statement.cursorId = buf.readUB2();\n      this.options.implicitResultSet.push(childResultSet);\n    }\n  }\n}\n\nconst isNullLength = (len) => {\n  return len === 0 || len === constants.TNS_NULL_LENGTH_INDICATOR;\n};\n\nmodule.exports = MessageWithData;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}