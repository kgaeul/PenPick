{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\Desktop\\\\finalproject_penpick - \\uBCF5\\uC0AC\\uBCF8\\\\finalProject\\\\front\\\\src\\\\component\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport Stomp from 'webstomp-client';\nimport React, { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport Header from './Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  // 받은 메시지를 저장하기 위한 상태\n  const [messages, setMessages] = useState([]);\n\n  // Stomp 클라이언트를 저장하기 위한 상태\n  const [stompClient, setStompClient] = useState(null);\n\n  // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\n  const [inputMessage, setInputMessage] = useState('');\n\n  // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\n  useEffect(() => {\n    // WebSocket 연결을 설정하는 함수\n    const connect = () => {\n      // WebSocket 통신을 위한 SockJS 객체 생성\n      const socket = new SockJS('http://localhost:8081/websocket');\n      console.log('여기까지 됨');\n      // WebSocket 연결 위에 Stomp 클라이언트 생성\n      var stomp = Stomp.over(socket);\n      console.log('여기까지도 됨');\n\n      // WebSocket 연결 상태를 확인하여 연결이 안 되어 있다면 연결 시도\n      if (socket.readyState !== 1) {\n        stomp.connect({}, frame => {\n          console.log('연결됨: ' + frame);\n          setStompClient(stomp);\n        });\n      }\n\n      // 컴포넌트가 언마운트될 때 소켓 연결을 닫음\n      return () => {\n        socket.close();\n      };\n    };\n\n    // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\n    connect();\n  }, []);\n  const sendMessage = content => {\n    if (stompClient) {\n      const message = {\n        content: content,\n        sender: 'user'\n      };\n      // 메시지를 '/app/chat' 목적지로 서버에 전송\n      stompClient.send('/app/websocket', {},\n      // 내용과 유저정보를 포함한 메시지 객체 생성\n      JSON.stringify(message));\n      console.log(JSON.stringify(message));\n    } else {\n      console.error('Stomp client is not initialized.');\n    }\n  };\n\n  // '/topic/messages' 목적지에서 메시지를 구독하는 함수\n  const subscribeToMessages = () => {\n    // '/topic/messages' 목적지를 구독\n    stompClient.subscribe('/topic/messages', response => {\n      // 받은 메시지를 파싱하고 상태에 추가\n      const message = JSON.parse(response.body);\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n  };\n\n  // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\n  useEffect(() => {\n    if (stompClient) {\n      subscribeToMessages();\n    }\n  }, [stompClient]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"ChatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"messageBox\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [message.sender, \": \", message.content]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setInputMessage(e.target.value),\n        value: inputMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(inputMessage),\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"nWnl0H/blwPoFpYhRwGg6Lt2d2o=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Stomp","React","useState","useEffect","SockJS","Header","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","stompClient","setStompClient","inputMessage","setInputMessage","connect","socket","console","log","stomp","over","readyState","frame","close","sendMessage","content","message","sender","send","JSON","stringify","error","subscribeToMessages","subscribe","response","parse","body","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","index","type","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user1/Desktop/finalproject_penpick - 복사본/finalProject/front/src/component/Chat.js"],"sourcesContent":["import Stomp from 'webstomp-client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport Header from './Header';\r\n\r\nconst Chat = () => {\r\n  // 받은 메시지를 저장하기 위한 상태\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Stomp 클라이언트를 저장하기 위한 상태\r\n  const [stompClient, setStompClient] = useState(null);\r\n\r\n  // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\r\n  const [inputMessage, setInputMessage] = useState('');\r\n\r\n  // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\r\n  useEffect(() => {\r\n    // WebSocket 연결을 설정하는 함수\r\n    const connect = () => {\r\n      // WebSocket 통신을 위한 SockJS 객체 생성\r\n      const socket = new SockJS('http://localhost:8081/websocket');\r\n      console.log('여기까지 됨');\r\n      // WebSocket 연결 위에 Stomp 클라이언트 생성\r\n      var stomp = Stomp.over(socket);\r\n      console.log('여기까지도 됨');\r\n\r\n      // WebSocket 연결 상태를 확인하여 연결이 안 되어 있다면 연결 시도\r\n      if (socket.readyState !== 1) {\r\n        stomp.connect({}, (frame) => {\r\n          console.log('연결됨: ' + frame);\r\n          setStompClient(stomp);\r\n        });\r\n      }\r\n\r\n      // 컴포넌트가 언마운트될 때 소켓 연결을 닫음\r\n      return () => {\r\n        socket.close();\r\n      };\r\n    };\r\n\r\n    // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\r\n    connect();\r\n  }, []);\r\n\r\n  const sendMessage = (content) => {\r\n    if (stompClient) {\r\n      const message = { content: content, sender: 'user' };\r\n      // 메시지를 '/app/chat' 목적지로 서버에 전송\r\n      stompClient.send(\r\n        '/app/websocket',\r\n        {}, // 내용과 유저정보를 포함한 메시지 객체 생성\r\n        JSON.stringify(message)\r\n      );\r\n      console.log(JSON.stringify(message));\r\n    } else {\r\n      console.error('Stomp client is not initialized.');\r\n    }\r\n  };\r\n\r\n  // '/topic/messages' 목적지에서 메시지를 구독하는 함수\r\n  const subscribeToMessages = () => {\r\n    // '/topic/messages' 목적지를 구독\r\n    stompClient.subscribe('/topic/messages', (response) => {\r\n      // 받은 메시지를 파싱하고 상태에 추가\r\n      const message = JSON.parse(response.body);\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n  };\r\n\r\n  // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\r\n  useEffect(() => {\r\n    if (stompClient) {\r\n      subscribeToMessages();\r\n    }\r\n  }, [stompClient]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div id='ChatContainer'>\r\n        <div id='messageBox'>\r\n          {messages.map((message, index) => (\r\n            <div key={index}>\r\n              {message.sender}: {message.content}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <input\r\n          type='text'\r\n          onChange={(e) => setInputMessage(e.target.value)}\r\n          value={inputMessage}\r\n        />\r\n        <button onClick={() => sendMessage(inputMessage)}>전송</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}