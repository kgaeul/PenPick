{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  findNVPairRecurse,\n  createNVPair\n} = require('./nvStrToNvPair.js');\nconst errors = require(\"../../errors.js\");\nconst os = require(\"os\");\nconst net = require('net');\nconst dns = require('dns');\nconst dnsPromises = dns.promises;\nconst cInfo = require(\"../util.js\").CLIENT_INFO;\nconst SchemaObjectFactoryInterface = {\n  ADDR: 0,\n  ADDR_LIST: 1,\n  DESC: 2,\n  DESC_LIST: 3\n};\n\n/**\n * Class representing Address Object\n */\nclass Address {\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   *  Error thrown if invalid NV-string format (ie, bad parens)\n   *  Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...)) and  \")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    if (nvp == null || !(nvp.name.toUpperCase() == \"ADDRESS\")) errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    const protnvp = findNVPairRecurse(nvp, 'protocol');\n    const portnvp = findNVPairRecurse(nvp, 'port');\n    const hostnvp = findNVPairRecurse(nvp, 'host');\n    const httpsProxyNVP = findNVPairRecurse(nvp, 'https_proxy');\n    const httpsProxyPortNVP = findNVPairRecurse(nvp, 'https_proxy_port');\n    if (portnvp) this.port = Number(portnvp.atom);\n    if (hostnvp) this.host = hostnvp.atom;\n    if (protnvp) this.prot = protnvp.atom;\n    if (httpsProxyNVP) this.httpsProxy = httpsProxyNVP.atom;\n    if (httpsProxyPortNVP) this.httpsProxyPort = Number(httpsProxyPortNVP.atom);\n    this.addr = nvp.toString();\n  }\n\n  /** return the string representation of this object */\n  toString() {\n    return this.addr;\n  }\n}\n\n/**\n * Class representing addressList object\n */\nclass AddressList {\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = false;\n    this.failover = true;\n  }\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR_LIST;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   *  Error thrown if invalid NV-string format (ie, bad parens)\n   *  Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    /* for each child of \"ADDRESS_LIST\", create child or set SR/LB/FO */\n    this.children = [];\n    let childnv, child;\n    const listsize = nvp.getListSize();\n    if (listsize == 0) /* atom can not be valid */\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"ADDRESS\") {\n        child = new NavAddress();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"ADDRESS_LIST\") {\n        child = new NavAddressList();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.children.length == 0) errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  /** return the string representation of this object */\n  toString() {\n    let s = new String(\"\");\n    if (this.children.size() < 1)\n      // there is no address list without addresses\n      return s;\n    s += \"(ADDRESS_LIST=\";\n    for (let i = 0; i < this.children.size(); i++) s += this.children[i].toString();\n    if (this.sourceRoute) s += \"(SOURCE_ROUTE=yes)\" + NavSchemaObject.HC;\n    if (this.loadBalance) s += \"(LOAD_BALANCE=yes)\";\n    if (!this.failover) s += \"(FAILOVER=false)\";\n    s += \")\";\n    return s;\n  }\n}\n\n/**\n * Class represnting description object\n */\nclass Description {\n  // description-level stuff\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = false;\n    this.failover = true;\n    this.delayInMillis = -1;\n    this.params = {};\n  }\n\n  /**\n    * Return the type of this SchemaObject\n   */\n  isS() {\n    return SchemaObjectFactoryInterface.DESC;\n  }\n\n  /**\n    * Initialize this object from the given string\n    *\n    * @param string\n    *          the string\n    * Error rhrown if invalid NV-string format (ie, bad parens)\n    * Error thrown if invalid syntax (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n  */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  //errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  initFromNVPair(nvp) {\n    const listsize = nvp.getListSize();\n    let childnv, child;\n    if (listsize == 0)\n      // atom can not be valid\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"ADDRESS_LIST\") {\n        child = new NavAddressList();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"ADDRESS\") {\n        child = new NavAddress();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"CONNECT_DATA\") {\n        let tmpnv;\n        const listsize = childnv.getListSize();\n        for (let i = 0; i < listsize; i++) {\n          tmpnv = childnv.getListElement(i);\n          if (tmpnv.name.toUpperCase() == \"CONNECTION_ID_PREFIX\") {\n            this.params.connectionIdPrefix = tmpnv.atom;\n            childnv.removeListElement(i);\n            break;\n          }\n        }\n        this.connectData = childnv.valueToString();\n      } else if (childnv.name.toUpperCase() == \"RETRY_DELAY\") {\n        // Delay between retries.\n        // If no unit is provided, it is interpreted in seconds.\n        // The value is internally stored in milliseconds.\n        if (childnv.atom > 0) this.delayInMillis = childnv.atom * 1000;\n      } else if (childnv.name.toUpperCase() == \"RETRY_COUNT\") {\n        this.retryCount = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"CONNECTION_ID_PREFIX\") {\n        this.conidPrefix = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"CONNECT_TIMEOUT\") {\n        if (childnv.atom > 0) this.params.connectTimeout = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"TRANSPORT_CONNECT_TIMEOUT\") {\n        if (childnv.atom > 0) this.params.transportConnectTimeout = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"ENABLE\") {\n        this.params.enable = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"RECV_TIMEOUT\") {\n        if (childnv.atom > 0) {\n          this.params.recvTimeout = childnv.atom;\n        }\n      } else if (childnv.name.toUpperCase() == \"SDU\") {\n        this.params.sdu = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"EXPIRE_TIME\") {\n        if (childnv.atom > 0) this.params.expireTime = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"SECURITY\") {\n        const listsize = childnv.getListSize();\n        let tmpnv;\n        for (let i = 0; i < listsize; i++) {\n          tmpnv = childnv.getListElement(i);\n          if (tmpnv.name.toUpperCase() == \"SSL_SERVER_CERT_DN\") {\n            this.params.sslServerCertDN = tmpnv.valueToString();\n          } else if (tmpnv.name.toUpperCase() == \"SSL_SERVER_DN_MATCH\") {\n            this.params.sslServerDNMatch = tmpnv.atom.toLowerCase() == \"yes\" || tmpnv.atom.toLowerCase() == \"on\" || tmpnv.atom.toLowerCase() == \"true\";\n          } else if (tmpnv.name.toUpperCase() == \"SSL_ALLOW_WEAK_DN_MATCH\") {\n            this.params.sslAllowWeakDNMatch = tmpnv.atom.toLowerCase() == \"yes\" || tmpnv.atom.toLowerCase() == \"on\" || tmpnv.atom.toLowerCase() == \"true\";\n          } else if (tmpnv.name.toUpperCase() == \"WALLET_LOCATION\" || tmpnv.name.toUpperCase() == \"MY_WALLET_DIRECTORY\") {\n            this.params.walletLocation = tmpnv.atom;\n          }\n        }\n      }\n    }\n  }\n  toString() {\n    let s = new String(\"\"),\n      child;\n\n    // see if there are any endpoints\n    child = new String(\"\");\n    for (let i = 0; i < this.children.size(); i++) {\n      child = this.children[i].toString();\n      if (!child == \"\") s += child;\n    }\n\n    // some parameters make sense only if there are endpoints defined\n    if (!s == \"\" && this.sourceRoute) s += \"(SOURCE_ROUTE=yes)\";\n    if (!s == \"\" && this.loadBalance) s += \"(LOAD_BALANCE=yes)\";\n    if (!s == \"\" && !this.failover) s += \"(FAILOVER=false)\";\n    if (!s.equals(\"\")) s = \"(DESCRIPTION=\" + s + \")\";\n    return s;\n  }\n}\n\n/**\n * Class representing DescriptionList object.\n */\nclass DescriptionList {\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = true;\n    this.failover = true;\n  }\n\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR_LIST;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   * Error thrown if invalid NV-string format (ie, bad parens)\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    const listsize = nvp.getListSize();\n    let child, childnv;\n    if (listsize == 0) /* atom can not be valid */\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase == \"true\";\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = childnv.atom.toLowerCase() == \"yes\" || childnv.atom.toLowerCase() == \"on\" || childnv.atom.toLowerCase() == \"true\";\n      } else if (childnv.name.toUpperCase() == \"DESCRIPTION\") {\n        child = new NavDescription();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.children.length == 0) errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  /** return the string representation of this object */\n  toString() {\n    let s = new String(\"\");\n    if (this.children.size() < 1)\n      // no descr list without descriptions\n      return s;\n    let child = new String(\"\");\n    for (let i = 0; i < this.children.size(); i++) {\n      child = this.children[i].toString();\n      if (!child.equals(\"\")) s += child;\n    }\n\n    // some parameters make sense only if there are endpoints defined\n    if (s.equals(\"\") && this.sourceRoute) s += \"(SOURCE_ROUTE=yes)\";\n    if (s.equals(\"\") && !this.loadBalance) s += \"(LOAD_BALANCE=no)\";\n    if (s.equals(\"\") && !this.failover) s += \"(FAILOVER=false)\";\n    if (!s.equals(\"\"))\n      // no valid children were found\n      s = \"(DESCRIPTION_LIST=\" + s + \")\";\n    return s;\n  }\n}\n\n/**\n * Class that contains information about a possible connection.\n */\nclass ConnOption {\n  constructor() {\n    this.CNdata = new Array();\n  }\n}\nconst NavSchemaObject = {\n  DEBUG: false,\n  SR: \"(SOURCE_ROUTE=yes)\",\n  HC: \"(HOP_COUNT=0)\",\n  LB: \"(LOAD_BALANCE=yes)\",\n  NFO: \"(FAILOVER=false)\",\n  CD: \"(CONNECT_DATA=\",\n  CONID: \"(CONNECTION_ID=\"\n};\nconst options = {\n  all: true\n};\n/**\n * Class that navigates the address node in the tree.\n */\nclass NavAddress extends Address {\n  constructor() {\n    super();\n  }\n  /**\n   * Set the connection option to this address.\n   * @param {object} cs\n   */\n  async navigate(cs) {\n    let addresses;\n    let nullHost = 0;\n    let needToCloseDescription = false;\n    if (!this.host) {\n      nullHost = 1;\n      this.host = os.hostname();\n      try {\n        await dnsPromises.lookup(this.host, options);\n      } catch {\n        this.host = 'localhost';\n      }\n    }\n    // Sometimes REDIRECT packets do not have DESCRIPTION\n    // this is for handling such conditions.\n    if (cs.getcurrentDescription() == null) {\n      cs.newConnectionDescription();\n      needToCloseDescription = true;\n    }\n    if (!net.isIP(this.host)) {\n      try {\n        addresses = await dnsPromises.lookup(this.host, options);\n        for (const addr in addresses) {\n          const co = new ConnOption();\n          co.hostname = this.host;\n          co.port = this.port;\n          co.protocol = this.prot;\n          co.httpsProxy = this.httpsProxy;\n          co.httpsProxyPort = this.httpsProxyPort;\n          co.desc = cs.getcurrentDescription();\n          co.CNdata.push(cs.sBuf.join(\"\"));\n          if (nullHost == 1) co.CNdata.push('(address=(protocol=' + this.prot + ')(host=' + this.host + ')(port=' + this.port + '))');else co.CNdata.push(this.toString());\n          co.host = addresses[addr].address;\n          co.addr = this.addr;\n          cs.getcurrentDescription().addConnectOption(co);\n        }\n      } catch {\n        // do nothing\n      }\n    } else {\n      const co = new ConnOption();\n      co.hostname = this.host;\n      co.port = this.port;\n      co.protocol = this.prot;\n      co.httpsProxy = this.httpsProxy;\n      co.httpsProxyPort = this.httpsProxyPort;\n      co.desc = cs.getcurrentDescription();\n      co.CNdata.push(cs.sBuf.join(\"\"));\n      co.CNdata.push(this.toString());\n      co.host = this.host;\n      co.addr = this.addr;\n      cs.getcurrentDescription().addConnectOption(co);\n    }\n    if (needToCloseDescription) {\n      cs.closeDescription();\n    }\n  }\n\n  /**\n   * AddToString is used to construct a string representation of the TNS\n   * Address. Constructing a string is mainly needed when source route is ON.\n   */\n  addToString(cs) {\n    const NVString = this.toString();\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0; i < cOpts.length; i++) {\n      if (cOpts[i].done) {\n        continue;\n      }\n      cOpts[i].CNdata.push(NVString);\n    }\n  }\n}\n\n/**\n * Class that navigates the addressList node in the tree.\n */\nclass NavAddressList extends AddressList {\n  constructor() {\n    super();\n    this.activeChildren = new Array();\n    this.sBuflength = 0;\n  }\n\n  /**\n  * Method decides how to traverse and sets the active children based on\n  * the loadbalancing, failover values.\n  * @param {object} cs\n  */\n  async navigate(cs) {\n    await this.navigate2(cs, 0);\n  }\n  async navigate2(cs, reCurCnt) {\n    reCurCnt++;\n    this.sBuflength = cs.sBuf.length;\n    cs.sBuf.push(\"(ADDRESS_LIST=\");\n    if (this.sourceRoute) {\n      this.activeChildren = this.children;\n      await this.activeChildren[0].navigate(cs);\n      for (let i = 1; i < this.activeChildren.length; i++) {\n        this.activeChildren[i].addToString(cs);\n      }\n    } else {\n      // SR is off\n      this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover, this.loadBalance);\n      for (let i = 0; i < this.activeChildren.length; i++) {\n        if (this.getChildrenType(i) == 1) {\n          await this.activeChildren[i].navigate2(cs, reCurCnt);\n        } else {\n          await this.activeChildren[i].navigate(cs);\n        }\n      }\n    }\n    this.closeNVPair(cs);\n    cs.sBuf.length = this.sBuflength;\n  }\n  addToString(cs) {\n    const NVString = this.toString();\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0; i < cOpts.length; i++) {\n      if (cOpts[i].done) {\n        continue;\n      }\n      cOpts[i].CNdata.push(NVString);\n    }\n  }\n  getChildrenSize() {\n    let size = 0;\n    for (let i = 0; i < this.activeChildren.length; i++) {\n      if (this.getChildrenType(i) == 1) {\n        size += this.activeChildren[i].getChildrenSize();\n      } else {\n        size++;\n      }\n      if (this.sourceRoute) return size;\n    }\n    return size;\n  }\n\n  /**\n   * get children type\n  */\n  getChildrenType(childNum) {\n    return this.activeChildren[childNum].isS();\n  }\n\n  /**\n   *get child at a given pos\n  */\n  getChild(childNum) {\n    return this.children[childNum];\n  }\n  closeNVPair(cs) {\n    let cOpts = new Array();\n    const childS = this.getChildrenSize();\n    if (cs.getcurrentDescription() != null) {\n      cOpts = cs.getcurrentDescription().getConnectOptions();\n      let numChildren = 0;\n      let prevHost = null;\n      let prevPort = null;\n      for (let i = cOpts.length - 1; i >= 0 && !cOpts[i].done; i--) {\n        if (cOpts[i].hostname != prevHost || cOpts[i].port != prevPort) numChildren++;\n        prevHost = cOpts[i].hostname;\n        prevPort = cOpts[i].port;\n\n        // close NV Pair for current active children\n        if (numChildren > childS) {\n          break;\n        }\n        if (this.sourceRoute) {\n          cOpts[i].CNdata.push(NavSchemaObject.SR);\n          cOpts[i].CNdata.push(NavSchemaObject.HC);\n          cOpts[i].done = true;\n        }\n        // Always close the NV Pair with a \")\"\n        cOpts[i].CNdata.push(\")\");\n      }\n    }\n  }\n}\n\n/**\n * Class that navigates the description node in a tree.\n */\nclass NavDescription extends Description {\n  constructor() {\n    super();\n    this.activeChildren = new Array();\n    this.descProcessed = 0;\n  }\n\n  /**\n  * Method decides how to traverse and sets the active children based on\n  * the loadbalancing, failover values. Also creates connection description\n  * object.\n  * @param {object} cs\n  */\n  async navigate(cs) {\n    cs.sBuf.length = 0; //reset\n    cs.sBuf.push(\"(DESCRIPTION=\");\n    const desc = cs.newConnectionDescription(); //connectiondescription\n    if (this.retryCount != null) {\n      cs.retryCount = this.getIntValue(this.retryCount, cs.retryCount);\n      desc.retryCount = cs.retryCount;\n    }\n    if (this.delayInMillis != -1) {\n      desc.delayInMillis = this.delayInMillis;\n    }\n    desc.params = this.params;\n    if ('connectTimeout' in this.params) {\n      cs.sBuf.push(\"(CONNECT_TIMEOUT=\" + this.params.connectTimeout + \")\");\n    }\n    if ('transportConnectTimeout' in this.params) {\n      cs.sBuf.push(\"(TRANSPORT_CONNECT_TIMEOUT=\" + this.params.transportConnectTimeout + \")\");\n    }\n    if ('recvTimeout' in this.params) {\n      cs.sBuf.push(\"(RECV_TIMEOUT=\" + this.params.recvTimeout + \")\");\n    }\n    if ('sdu' in this.params) {\n      cs.sBuf.push(\"(SDU=\" + this.params.sdu + \")\");\n    }\n    if ('expireTime' in this.params) {\n      cs.sBuf.push(\"(EXPIRE_TIME=\" + this.params.expireTime + \")\");\n    }\n    if ('enable' in this.params) {\n      cs.sBuf.push(\"(ENABLE=\" + this.params.enable + \")\");\n    }\n    if ('sslServerCertDN' in this.params || 'sslServerDNMatch' in this.params || 'walletLocation' in this.params || 'sslAllowWeakDNMatch' in this.params) {\n      cs.sBuf.push(\"(SECURITY=\");\n      if ('sslServerCertDN' in this.params) {\n        cs.sBuf.push(\"(SSL_SERVER_CERT_DN=\" + this.params.sslServerCertDN + \")\");\n      }\n      if ('sslServerDNMatch' in this.params) {\n        cs.sBuf.push(\"(SSL_SERVER_DN_MATCH=\" + this.params.sslServerDNMatch + \")\");\n      }\n      if ('sslAllowWeakDNMatch' in this.params) {\n        cs.sBuf.push(\"(SSL_ALLOW_WEAK_DN_MATCH=\" + this.params.sslAllowWeakDNMatch + \")\");\n      }\n      if ('walletLocation' in this.params) {\n        cs.sBuf.push(\"(WALLET_LOCATION=\" + this.params.walletLocation + \")\");\n      }\n      cs.sBuf.push(\")\");\n    }\n    if ('httpsProxyPort' in this.params) {\n      cs.sBuf.push(\"(HTTPS_PROXY_PORT=\" + this.params.httpsProxyPort + \")\");\n    }\n    if ('httpsProxy' in this.params) {\n      cs.sBuf.push(\"(HTTPS_PROXY=\" + this.params.httpsProxy + \")\");\n    }\n    if (!this.failover) {\n      cs.sBuf.push(NavSchemaObject.NFO);\n    }\n    if (!this.sourceRoute) {\n      // SR is off, navigate every child and close the NV Pair\n      this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover, this.loadBalance);\n      for (let i = 0; i < this.activeChildren.length; i++) {\n        await this.activeChildren[i].navigate(cs);\n      }\n      this.closeNVPair(cs);\n    } else {\n      // SR is ON\n      this.activeChildren = this.children;\n      await this.activeChildren[0].navigate(cs);\n      for (let i = 1; i < this.activeChildren.length; i++) {\n        this.activeChildren[i].addToString(cs);\n      }\n      this.closeNVPair(cs);\n    }\n    cs.closeDescription();\n  }\n  closeNVPair(cs) {\n    if (cs.getcurrentDescription() == null) return;\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0; i < cOpts.length; ++i) {\n      if (this.sourceRoute) {\n        cOpts[i].CNdata.push(NavSchemaObject.SR);\n      }\n\n      // Use default service, if no connect_data\n      if (this.connectData == null) {\n        this.connectData = \"(SERVICE_NAME=)\";\n      }\n      const cid = `(CID=(PROGRAM=${cInfo.program})(HOST=${cInfo.hostName})(USER=${cInfo.userName}))`;\n      cOpts[i].CNdata.push(NavSchemaObject.CD);\n      cOpts[i].CNdata.push(this.connectData);\n      cOpts[i].CNdata.push(cid);\n      cOpts[i].CNdata.push(\")\");\n      if (this.SID != null) {\n        cOpts[i].sid = this.SID;\n      }\n      if (this.serviceName != null) {\n        cOpts[i].service_name = this.serviceName;\n      }\n      if (this.instanceName != null) {\n        cOpts[i].instance_name = this.instanceName;\n      }\n      // Close the description\n      cOpts[i].CNdata.push(\")\");\n      cOpts[i].done = true;\n    }\n  }\n  getIntValue(stringInt, defaultValue) {\n    try {\n      return parseInt(stringInt);\n    } catch (exception) {\n      return defaultValue;\n    }\n  }\n}\n\n/**\n * Class that navigates descriptionlist node in a tree.\n */\nclass NavDescriptionList extends DescriptionList {\n  constructor(activeChildren = new Array(), descProcessed = 0, done = 0) {\n    super();\n    this.activeChildren = activeChildren;\n    this.descProcessed = descProcessed;\n    this.done = done;\n  }\n\n  /**\n  * Method decides how to traverse and sets the active children based on\n  * the loadbalancing, failover values.\n  * @param {object} cs\n  */\n  async navigate(cs) {\n    cs.sBuf.push(\"(DESCRIPTION_LIST=\");\n    this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover, this.loadBalance);\n    while (this.descProcessed < this.activeChildren.length) {\n      await this.activeChildren[this.descProcessed].navigate(cs);\n      this.descProcessed++;\n    }\n  }\n\n  /** set active children based on lb and failover values.\n   * @param children\n   * @param failover\n   * @param loadBalance\n   */\n  static setActiveChildren(children, failover, loadBalance) {\n    let randNumber;\n    const listSize = children.length;\n    let tmpChildren = new Array();\n    const rand = Math.floor(Math.random() * 10);\n    const arr = new Array(listSize).fill(false);\n    if (failover) {\n      if (loadBalance) {\n        for (let i = 0; i < listSize; i++) {\n          do {\n            randNumber = Math.abs(Math.floor(Math.random() * 10)) % listSize;\n          } while (arr[randNumber]);\n          arr[randNumber] = true;\n          tmpChildren.push(children[randNumber]);\n        }\n      } else {\n        tmpChildren = children;\n      }\n    } else {\n      // not failover\n      if (loadBalance) {\n        randNumber = Math.abs(rand) % listSize;\n        tmpChildren.push(children[randNumber]);\n      } else {\n        tmpChildren.push(children[0]);\n      }\n    }\n    return tmpChildren;\n  }\n}\nmodule.exports = {\n  NavAddress,\n  NavAddressList,\n  NavDescription,\n  NavDescriptionList\n};","map":{"version":3,"names":["findNVPairRecurse","createNVPair","require","errors","os","net","dns","dnsPromises","promises","cInfo","CLIENT_INFO","SchemaObjectFactoryInterface","ADDR","ADDR_LIST","DESC","DESC_LIST","Address","isS","initFromString","s","nvp","initFromNVPair","name","toUpperCase","throwErr","ERR_INVALID_CONNECT_STRING_SYNTAX","protnvp","portnvp","hostnvp","httpsProxyNVP","httpsProxyPortNVP","port","Number","atom","host","prot","httpsProxy","httpsProxyPort","addr","toString","AddressList","constructor","children","Array","sourceRoute","loadBalance","failover","childnv","child","listsize","getListSize","i","getListElement","toLowerCase","NavAddress","push","NavAddressList","length","String","size","NavSchemaObject","HC","Description","delayInMillis","params","tmpnv","connectionIdPrefix","removeListElement","connectData","valueToString","retryCount","conidPrefix","connectTimeout","transportConnectTimeout","enable","recvTimeout","sdu","expireTime","sslServerCertDN","sslServerDNMatch","sslAllowWeakDNMatch","walletLocation","equals","DescriptionList","NavDescription","ConnOption","CNdata","DEBUG","SR","LB","NFO","CD","CONID","options","all","navigate","cs","addresses","nullHost","needToCloseDescription","hostname","lookup","getcurrentDescription","newConnectionDescription","isIP","co","protocol","desc","sBuf","join","address","addConnectOption","closeDescription","addToString","NVString","cOpts","getConnectOptions","done","activeChildren","sBuflength","navigate2","reCurCnt","NavDescriptionList","setActiveChildren","getChildrenType","closeNVPair","getChildrenSize","childNum","getChild","childS","numChildren","prevHost","prevPort","descProcessed","getIntValue","cid","program","hostName","userName","SID","sid","serviceName","service_name","instanceName","instance_name","stringInt","defaultValue","parseInt","exception","randNumber","listSize","tmpChildren","rand","Math","floor","random","arr","fill","abs","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/sqlnet/navNodes.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { findNVPairRecurse, createNVPair } = require('./nvStrToNvPair.js');\nconst errors = require(\"../../errors.js\");\nconst os = require(\"os\");\nconst net = require('net');\nconst dns = require('dns');\nconst dnsPromises = dns.promises;\nconst cInfo = require(\"../util.js\").CLIENT_INFO;\n\nconst SchemaObjectFactoryInterface = {\n  ADDR: 0,\n  ADDR_LIST: 1,\n  DESC: 2,\n  DESC_LIST: 3,\n};\n\n/**\n * Class representing Address Object\n */\nclass Address {\n\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   *  Error thrown if invalid NV-string format (ie, bad parens)\n   *  Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...)) and  \")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    if (nvp == null || !(nvp.name.toUpperCase() == \"ADDRESS\"))\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    const protnvp = findNVPairRecurse(nvp, 'protocol');\n    const portnvp = findNVPairRecurse(nvp, 'port');\n    const hostnvp = findNVPairRecurse(nvp, 'host');\n    const httpsProxyNVP = findNVPairRecurse(nvp, 'https_proxy');\n    const httpsProxyPortNVP = findNVPairRecurse(nvp, 'https_proxy_port');\n\n    if (portnvp)\n      this.port = Number(portnvp.atom);\n\n    if (hostnvp)\n      this.host = hostnvp.atom;\n\n    if (protnvp)\n      this.prot = protnvp.atom;\n\n    if (httpsProxyNVP)\n      this.httpsProxy = httpsProxyNVP.atom;\n    if (httpsProxyPortNVP)\n      this.httpsProxyPort = Number(httpsProxyPortNVP.atom);\n\n    this.addr = nvp.toString();\n  }\n\n  /** return the string representation of this object */\n  toString() {\n    return this.addr;\n  }\n}\n\n/**\n * Class representing addressList object\n */\nclass AddressList {\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = false;\n    this.failover = true;\n  }\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR_LIST;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   *  Error thrown if invalid NV-string format (ie, bad parens)\n   *  Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    /* for each child of \"ADDRESS_LIST\", create child or set SR/LB/FO */\n    this.children = [];\n    let childnv, child;\n    const listsize = nvp.getListSize();\n    if (listsize == 0) /* atom can not be valid */\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = (childnv.atom.toLowerCase() == \"yes\"\n          || childnv.atom.toLowerCase() == \"on\"\n          || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = (childnv.atom.toLowerCase() == \"yes\"\n          || childnv.atom.toLowerCase() == \"on\"\n          || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = (childnv.atom.toLowerCase() == \"yes\"\n          || childnv.atom.toLowerCase() == \"on\"\n          || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"ADDRESS\") {\n        child = new NavAddress();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"ADDRESS_LIST\") {\n        child = new NavAddressList();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.children.length == 0) errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n\n  /** return the string representation of this object */\n  toString() {\n    let s = new String(\"\");\n    if (this.children.size() < 1) // there is no address list without addresses\n      return s;\n    s += \"(ADDRESS_LIST=\";\n\n    for (let i = 0; i < this.children.size(); i++)\n      s += this.children[i].toString();\n\n    if (this.sourceRoute) s += \"(SOURCE_ROUTE=yes)\" + NavSchemaObject.HC;\n    if (this.loadBalance) s += \"(LOAD_BALANCE=yes)\";\n    if (!this.failover) s += \"(FAILOVER=false)\";\n\n    s += \")\";\n\n    return s;\n  }\n}\n\n/**\n * Class represnting description object\n */\nclass Description {\n  // description-level stuff\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = false;\n    this.failover = true;\n    this.delayInMillis = -1;\n    this.params = {};\n  }\n\n  /**\n    * Return the type of this SchemaObject\n   */\n  isS() {\n    return SchemaObjectFactoryInterface.DESC;\n  }\n\n  /**\n    * Initialize this object from the given string\n    *\n    * @param string\n    *          the string\n    * Error rhrown if invalid NV-string format (ie, bad parens)\n    * Error thrown if invalid syntax (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n  */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  //errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  initFromNVPair(nvp) {\n    const listsize = nvp.getListSize();\n    let childnv, child;\n    if (listsize == 0) // atom can not be valid\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"ADDRESS_LIST\") {\n        child = new NavAddressList();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"ADDRESS\") {\n        child = new NavAddress();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"CONNECT_DATA\") {\n        let tmpnv;\n        const listsize = childnv.getListSize();\n        for (let i = 0; i < listsize; i++) {\n          tmpnv = childnv.getListElement(i);\n          if (tmpnv.name.toUpperCase() == \"CONNECTION_ID_PREFIX\") {\n            this.params.connectionIdPrefix = tmpnv.atom;\n            childnv.removeListElement(i);\n            break;\n          }\n        }\n        this.connectData = childnv.valueToString();\n      } else if (childnv.name.toUpperCase() == \"RETRY_DELAY\") {\n        // Delay between retries.\n        // If no unit is provided, it is interpreted in seconds.\n        // The value is internally stored in milliseconds.\n        if (childnv.atom > 0)\n          this.delayInMillis = childnv.atom * 1000;\n      } else if (childnv.name.toUpperCase() == \"RETRY_COUNT\") {\n        this.retryCount = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"CONNECTION_ID_PREFIX\") {\n        this.conidPrefix = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"CONNECT_TIMEOUT\") {\n        if (childnv.atom > 0)\n          this.params.connectTimeout = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"TRANSPORT_CONNECT_TIMEOUT\") {\n        if (childnv.atom > 0)\n          this.params.transportConnectTimeout = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"ENABLE\") {\n        this.params.enable = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"RECV_TIMEOUT\") {\n        if (childnv.atom > 0) {\n          this.params.recvTimeout = childnv.atom;\n        }\n      } else if (childnv.name.toUpperCase() == \"SDU\") {\n        this.params.sdu = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"EXPIRE_TIME\") {\n        if (childnv.atom > 0)\n          this.params.expireTime = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"SECURITY\") {\n        const listsize = childnv.getListSize();\n        let tmpnv;\n        for (let i = 0; i < listsize; i++) {\n          tmpnv = childnv.getListElement(i);\n          if (tmpnv.name.toUpperCase() == \"SSL_SERVER_CERT_DN\") {\n            this.params.sslServerCertDN = tmpnv.valueToString();\n          } else if (tmpnv.name.toUpperCase() == \"SSL_SERVER_DN_MATCH\") {\n            this.params.sslServerDNMatch = (tmpnv.atom.toLowerCase() == \"yes\"\n            || tmpnv.atom.toLowerCase() == \"on\"\n            || tmpnv.atom.toLowerCase() == \"true\");\n          } else if (tmpnv.name.toUpperCase() == \"SSL_ALLOW_WEAK_DN_MATCH\") {\n            this.params.sslAllowWeakDNMatch = (tmpnv.atom.toLowerCase() == \"yes\"\n            || tmpnv.atom.toLowerCase() == \"on\"\n            || tmpnv.atom.toLowerCase() == \"true\");\n          } else if ((tmpnv.name.toUpperCase() == \"WALLET_LOCATION\") || (tmpnv.name.toUpperCase() == \"MY_WALLET_DIRECTORY\")) {\n            this.params.walletLocation = tmpnv.atom;\n          }\n        }\n      }\n    }\n  }\n  toString() {\n    let s = new String(\"\"), child ;\n\n    // see if there are any endpoints\n    child = new String(\"\");\n    for (let i = 0; i < this.children.size(); i++) {\n      child = this.children[i].toString();\n      if (!child == \"\")\n        s += child;\n    }\n\n    // some parameters make sense only if there are endpoints defined\n    if (!s == \"\" && this.sourceRoute)\n      s += \"(SOURCE_ROUTE=yes)\";\n    if (!s == \"\" && this.loadBalance)\n      s += \"(LOAD_BALANCE=yes)\";\n    if (!s == \"\" && !this.failover)\n      s += \"(FAILOVER=false)\";\n    if (!s.equals(\"\"))\n      s = \"(DESCRIPTION=\" + s + \")\";\n\n    return s;\n  }\n}\n\n/**\n * Class representing DescriptionList object.\n */\nclass DescriptionList {\n\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = true;\n    this.failover = true;\n  }\n\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR_LIST;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   * Error thrown if invalid NV-string format (ie, bad parens)\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    const listsize = nvp.getListSize();\n    let child, childnv;\n    if (listsize == 0) /* atom can not be valid */\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = (childnv.atom.toLowerCase() == \"yes\"\n                      || childnv.atom.toLowerCase() == \"on\"\n                      || childnv.atom.toLowerCase == \"true\");\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = (childnv.atom.toLowerCase() == \"yes\"\n                      || childnv.atom.toLowerCase() == \"on\"\n                      || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"DESCRIPTION\") {\n        child = new NavDescription();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.children.length == 0) errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  /** return the string representation of this object */\n  toString() {\n    let s = new String(\"\");\n    if (this.children.size() < 1) // no descr list without descriptions\n      return s;\n\n    let child = new String(\"\");\n    for (let i = 0; i < this.children.size(); i++) {\n      child = this.children[i].toString();\n      if (!child.equals(\"\"))\n        s += child;\n    }\n\n    // some parameters make sense only if there are endpoints defined\n    if (s.equals(\"\") && this.sourceRoute) s += \"(SOURCE_ROUTE=yes)\";\n    if (s.equals(\"\") && !this.loadBalance) s += \"(LOAD_BALANCE=no)\";\n    if (s.equals(\"\") && !this.failover)   s += \"(FAILOVER=false)\";\n\n    if (!s.equals(\"\")) // no valid children were found\n      s = \"(DESCRIPTION_LIST=\" + s + \")\";\n\n    return s;\n  }\n}\n\n\n\n\n\n/**\n * Class that contains information about a possible connection.\n */\nclass ConnOption {\n  constructor() {\n    this.CNdata = new Array();\n  }\n\n}\n\nconst NavSchemaObject = {\n  DEBUG: false,\n  SR: \"(SOURCE_ROUTE=yes)\",\n  HC: \"(HOP_COUNT=0)\",\n  LB: \"(LOAD_BALANCE=yes)\",\n  NFO: \"(FAILOVER=false)\",\n  CD: \"(CONNECT_DATA=\",\n  CONID: \"(CONNECTION_ID=\"\n};\nconst options = {\n  all: true,\n};\n/**\n * Class that navigates the address node in the tree.\n */\nclass NavAddress extends Address {\n  constructor() {\n    super();\n  }\n  /**\n   * Set the connection option to this address.\n   * @param {object} cs\n   */\n  async navigate(cs) {\n    let addresses;\n    let nullHost = 0;\n    let needToCloseDescription = false;\n    if (!this.host) {\n      nullHost = 1;\n      this.host = os.hostname();\n      try {\n        await dnsPromises.lookup(this.host, options);\n      } catch {\n        this.host = 'localhost';\n      }\n    }\n    // Sometimes REDIRECT packets do not have DESCRIPTION\n    // this is for handling such conditions.\n    if (cs.getcurrentDescription() == null) {\n      cs.newConnectionDescription();\n      needToCloseDescription = true;\n    }\n    if (!net.isIP(this.host)) {\n      try {\n        addresses = await dnsPromises.lookup(this.host, options);\n        for (const addr in addresses) {\n          const co = new ConnOption();\n          co.hostname = this.host;\n          co.port = this.port;\n          co.protocol = this.prot;\n          co.httpsProxy = this.httpsProxy;\n          co.httpsProxyPort = this.httpsProxyPort;\n          co.desc = cs.getcurrentDescription();\n          co.CNdata.push(cs.sBuf.join(\"\"));\n          if (nullHost == 1)\n            co.CNdata.push('(address=(protocol=' + this.prot + ')(host=' + this.host + ')(port=' + this.port + '))');\n          else\n            co.CNdata.push(this.toString());\n          co.host = addresses[addr].address;\n          co.addr = this.addr;\n          cs.getcurrentDescription().addConnectOption(co);\n        }\n      } catch {\n        // do nothing\n      }\n    } else {\n      const co = new ConnOption();\n      co.hostname = this.host;\n      co.port = this.port;\n      co.protocol = this.prot;\n      co.httpsProxy = this.httpsProxy;\n      co.httpsProxyPort = this.httpsProxyPort;\n      co.desc = cs.getcurrentDescription();\n      co.CNdata.push(cs.sBuf.join(\"\"));\n      co.CNdata.push(this.toString());\n      co.host = this.host;\n      co.addr = this.addr;\n      cs.getcurrentDescription().addConnectOption(co);\n    }\n\n    if (needToCloseDescription) {\n      cs.closeDescription();\n    }\n\n  }\n\n\n\n  /**\n   * AddToString is used to construct a string representation of the TNS\n   * Address. Constructing a string is mainly needed when source route is ON.\n   */\n  addToString(cs) {\n    const NVString = this.toString();\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0;i < cOpts.length; i++) {\n      if (cOpts[i].done) {\n        continue;\n      }\n      cOpts[i].CNdata.push(NVString);\n    }\n  }\n}\n\n/**\n * Class that navigates the addressList node in the tree.\n */\nclass NavAddressList extends AddressList {\n  constructor() {\n    super();\n    this.activeChildren = new Array();\n    this.sBuflength = 0;\n  }\n\n  /**\n * Method decides how to traverse and sets the active children based on\n * the loadbalancing, failover values.\n * @param {object} cs\n */\n  async navigate(cs) {\n    await this.navigate2(cs, 0);\n  }\n\n  async navigate2(cs, reCurCnt) {\n    reCurCnt++;\n    this.sBuflength = cs.sBuf.length;\n    cs.sBuf.push(\"(ADDRESS_LIST=\");\n    if (this.sourceRoute) {\n      this.activeChildren = this.children;\n      await this.activeChildren[0].navigate(cs);\n\n      for (let i = 1; i < this.activeChildren.length; i++) {\n        this.activeChildren[i].addToString(cs);\n      }\n    } else { // SR is off\n      this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover,\n        this.loadBalance);\n      for (let i = 0; i < this.activeChildren.length; i++) {\n        if (this.getChildrenType(i) == 1) {\n          await this.activeChildren[i].navigate2(cs, reCurCnt);\n        } else {\n          await this.activeChildren[i].navigate(cs);\n        }\n\n      }\n    }\n    this.closeNVPair(cs);\n    cs.sBuf.length = this.sBuflength;\n\n  }\n  addToString(cs) {\n    const NVString = this.toString();\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0;i < cOpts.length; i++) {\n      if (cOpts[i].done) {\n        continue;\n      }\n      cOpts[i].CNdata.push(NVString);\n    }\n  }\n\n\n  getChildrenSize() {\n    let size = 0;\n    for (let i = 0; i < this.activeChildren.length; i++) {\n      if (this.getChildrenType(i) == 1) {\n        size += this.activeChildren[i].getChildrenSize();\n      } else {\n        size++;\n      }\n      if (this.sourceRoute)\n        return size;\n    }\n    return (size);\n  }\n\n  /**\n   * get children type\n  */\n  getChildrenType(childNum) {\n    return (this.activeChildren[childNum].isS());\n  }\n\n  /**\n   *get child at a given pos\n  */\n  getChild(childNum) {\n    return (this.children[childNum]);\n  }\n\n  closeNVPair(cs) {\n    let cOpts = new Array();\n    const childS = this.getChildrenSize();\n    if (cs.getcurrentDescription() != null) {\n      cOpts = cs.getcurrentDescription().getConnectOptions();\n      let numChildren = 0;\n      let prevHost = null;\n      let prevPort = null;\n      for (let i = cOpts.length - 1 ; (i >= 0\n              && !cOpts[i].done); i--) {\n        if (cOpts[i].hostname != prevHost || cOpts[i].port != prevPort)\n          numChildren++;\n        prevHost = cOpts[i].hostname;\n        prevPort = cOpts[i].port;\n\n        // close NV Pair for current active children\n        if ((numChildren > childS)) {\n          break;\n        }\n\n        if (this.sourceRoute) {\n          cOpts[i].CNdata.push(NavSchemaObject.SR);\n          cOpts[i].CNdata.push(NavSchemaObject.HC);\n          cOpts[i].done = true;\n        }\n        // Always close the NV Pair with a \")\"\n        cOpts[i].CNdata.push(\")\");\n      }\n    }\n  }\n\n\n}\n\n/**\n * Class that navigates the description node in a tree.\n */\nclass NavDescription extends Description {\n  constructor() {\n    super();\n    this.activeChildren = new Array();\n    this.descProcessed = 0;\n  }\n\n  /**\n * Method decides how to traverse and sets the active children based on\n * the loadbalancing, failover values. Also creates connection description\n * object.\n * @param {object} cs\n */\n  async navigate(cs) {\n    cs.sBuf.length = 0; //reset\n    cs.sBuf.push(\"(DESCRIPTION=\");\n    const desc = cs.newConnectionDescription(); //connectiondescription\n    if (this.retryCount != null) {\n      cs.retryCount = this.getIntValue(this.retryCount, cs.retryCount);\n      desc.retryCount = cs.retryCount;\n    }\n    if (this.delayInMillis != -1) {\n      desc.delayInMillis = this.delayInMillis;\n    }\n\n    desc.params = this.params;\n\n    if ('connectTimeout' in this.params) {\n      cs.sBuf.push(\"(CONNECT_TIMEOUT=\" + this.params.connectTimeout + \")\");\n    }\n    if ('transportConnectTimeout' in this.params) {\n      cs.sBuf.push(\"(TRANSPORT_CONNECT_TIMEOUT=\" + this.params.transportConnectTimeout + \")\");\n    }\n    if ('recvTimeout' in this.params) {\n      cs.sBuf.push(\"(RECV_TIMEOUT=\" + this.params.recvTimeout + \")\");\n    }\n    if ('sdu' in this.params) {\n      cs.sBuf.push(\"(SDU=\" + this.params.sdu + \")\");\n    }\n    if ('expireTime' in this.params) {\n      cs.sBuf.push(\"(EXPIRE_TIME=\" + this.params.expireTime + \")\");\n    }\n    if ('enable' in this.params) {\n      cs.sBuf.push(\"(ENABLE=\" + this.params.enable + \")\");\n    }\n    if (('sslServerCertDN' in this.params) || ('sslServerDNMatch' in this.params) || ('walletLocation' in this.params) || ('sslAllowWeakDNMatch' in this.params)) {\n      cs.sBuf.push(\"(SECURITY=\");\n      if ('sslServerCertDN' in this.params) {\n        cs.sBuf.push(\"(SSL_SERVER_CERT_DN=\" + this.params.sslServerCertDN + \")\");\n      }\n      if ('sslServerDNMatch' in this.params) {\n        cs.sBuf.push(\"(SSL_SERVER_DN_MATCH=\" + this.params.sslServerDNMatch + \")\");\n      }\n      if ('sslAllowWeakDNMatch' in this.params) {\n        cs.sBuf.push(\"(SSL_ALLOW_WEAK_DN_MATCH=\" + this.params.sslAllowWeakDNMatch + \")\");\n      }\n      if ('walletLocation' in this.params) {\n        cs.sBuf.push(\"(WALLET_LOCATION=\" + this.params.walletLocation + \")\");\n      }\n      cs.sBuf.push(\")\");\n    }\n    if ('httpsProxyPort' in this.params) {\n      cs.sBuf.push(\"(HTTPS_PROXY_PORT=\" + this.params.httpsProxyPort + \")\");\n    }\n    if ('httpsProxy' in this.params) {\n      cs.sBuf.push(\"(HTTPS_PROXY=\" + this.params.httpsProxy + \")\");\n    }\n    if (!this.failover) {\n      cs.sBuf.push(NavSchemaObject.NFO);\n    }\n    if (!this.sourceRoute) {\n      // SR is off, navigate every child and close the NV Pair\n      this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover,\n        this.loadBalance);\n      for (let i = 0; i < this.activeChildren.length; i++) {\n        await this.activeChildren[i].navigate(cs);\n      }\n      this.closeNVPair(cs);\n    } else {\n      // SR is ON\n      this.activeChildren = this.children;\n      await this.activeChildren[0].navigate(cs);\n      for (let i = 1; i < this.activeChildren.length; i++) {\n        this.activeChildren[i].addToString(cs);\n      }\n      this.closeNVPair(cs);\n    }\n    cs.closeDescription();\n\n  }\n\n  closeNVPair(cs) {\n\n    if (cs.getcurrentDescription() == null)\n      return;\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0; i < cOpts.length; ++i) {\n\n      if (this.sourceRoute) {\n        cOpts[i].CNdata.push(NavSchemaObject.SR);\n      }\n\n      // Use default service, if no connect_data\n      if (this.connectData == null) {\n        this.connectData = \"(SERVICE_NAME=)\";\n      }\n      const cid = `(CID=(PROGRAM=${cInfo.program})(HOST=${cInfo.hostName})(USER=${cInfo.userName}))`;\n      cOpts[i].CNdata.push(NavSchemaObject.CD);\n      cOpts[i].CNdata.push(this.connectData);\n      cOpts[i].CNdata.push(cid);\n      cOpts[i].CNdata.push(\")\");\n\n      if (this.SID != null) {\n        cOpts[i].sid = this.SID;\n      }\n      if (this.serviceName != null) {\n        cOpts[i].service_name = this.serviceName;\n      }\n      if (this.instanceName != null) {\n        cOpts[i].instance_name = this.instanceName;\n      }\n      // Close the description\n      cOpts[i].CNdata.push(\")\");\n      cOpts[i].done = true;\n    }\n  }\n\n  getIntValue(stringInt, defaultValue) {\n    try {\n      return parseInt(stringInt);\n    } catch (exception) {\n      return defaultValue;\n    }\n  }\n\n}\n\n/**\n * Class that navigates descriptionlist node in a tree.\n */\nclass NavDescriptionList extends DescriptionList {\n  constructor(activeChildren = new Array(), descProcessed = 0, done = 0) {\n    super();\n    this.activeChildren = activeChildren;\n    this.descProcessed = descProcessed;\n    this.done = done;\n  }\n\n  /**\n * Method decides how to traverse and sets the active children based on\n * the loadbalancing, failover values.\n * @param {object} cs\n */\n  async navigate(cs) {\n    cs.sBuf.push(\"(DESCRIPTION_LIST=\");\n    this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover, this.loadBalance);\n    while (this.descProcessed < this.activeChildren.length) {\n      await this.activeChildren[this.descProcessed].navigate(cs);\n      this.descProcessed++;\n    }\n\n  }\n\n  /** set active children based on lb and failover values.\n   * @param children\n   * @param failover\n   * @param loadBalance\n   */\n  static setActiveChildren(children, failover, loadBalance) {\n    let randNumber;\n    const listSize = children.length;\n    let tmpChildren = new Array();\n    const rand = Math.floor(Math.random() * 10);\n    const arr = new Array(listSize).fill(false);\n\n    if (failover) {\n      if (loadBalance) {\n        for (let i = 0; i < listSize; i++) {\n          do {\n            randNumber = Math.abs(Math.floor(Math.random() * 10)) % listSize;\n          } while (arr[randNumber]);\n          arr[randNumber] = true;\n          tmpChildren.push(children[randNumber]);\n        }\n      } else {\n        tmpChildren = children;\n      }\n    } else {          // not failover\n      if (loadBalance) {\n        randNumber = Math.abs(rand) % listSize;\n        tmpChildren.push(children[randNumber]);\n      } else {\n        tmpChildren.push(children[0]);\n      }\n    }\n\n    return (tmpChildren);\n\n  }\n\n\n\n}\nmodule.exports = {NavAddress, NavAddressList, NavDescription, NavDescriptionList};\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA,iBAAiB;EAAEC;AAAa,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACzE,MAAMC,MAAM,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACzC,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMI,GAAG,GAAGJ,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMK,WAAW,GAAGD,GAAG,CAACE,QAAQ;AAChC,MAAMC,KAAK,GAAGP,OAAO,CAAC,YAAY,CAAC,CAACQ,WAAW;AAE/C,MAAMC,4BAA4B,GAAG;EACnCC,IAAI,EAAE,CAAC;EACPC,SAAS,EAAE,CAAC;EACZC,IAAI,EAAE,CAAC;EACPC,SAAS,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EAEZ;EACAC,GAAGA,CAAA,EAAG;IACJ,OAAON,4BAA4B,CAACC,IAAI;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEM,cAAcA,CAACC,CAAC,EAAE;IAChB,MAAMC,GAAG,GAAGnB,YAAY,CAACkB,CAAC,CAAC;IAC3B,IAAI,CAACE,cAAc,CAACD,GAAG,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACEC,cAAcA,CAACD,GAAG,EAAE;IAClB,IAAIA,GAAG,IAAI,IAAI,IAAI,EAAEA,GAAG,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,SAAS,CAAC,EACvDpB,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;IAC3D,MAAMC,OAAO,GAAG1B,iBAAiB,CAACoB,GAAG,EAAE,UAAU,CAAC;IAClD,MAAMO,OAAO,GAAG3B,iBAAiB,CAACoB,GAAG,EAAE,MAAM,CAAC;IAC9C,MAAMQ,OAAO,GAAG5B,iBAAiB,CAACoB,GAAG,EAAE,MAAM,CAAC;IAC9C,MAAMS,aAAa,GAAG7B,iBAAiB,CAACoB,GAAG,EAAE,aAAa,CAAC;IAC3D,MAAMU,iBAAiB,GAAG9B,iBAAiB,CAACoB,GAAG,EAAE,kBAAkB,CAAC;IAEpE,IAAIO,OAAO,EACT,IAAI,CAACI,IAAI,GAAGC,MAAM,CAACL,OAAO,CAACM,IAAI,CAAC;IAElC,IAAIL,OAAO,EACT,IAAI,CAACM,IAAI,GAAGN,OAAO,CAACK,IAAI;IAE1B,IAAIP,OAAO,EACT,IAAI,CAACS,IAAI,GAAGT,OAAO,CAACO,IAAI;IAE1B,IAAIJ,aAAa,EACf,IAAI,CAACO,UAAU,GAAGP,aAAa,CAACI,IAAI;IACtC,IAAIH,iBAAiB,EACnB,IAAI,CAACO,cAAc,GAAGL,MAAM,CAACF,iBAAiB,CAACG,IAAI,CAAC;IAEtD,IAAI,CAACK,IAAI,GAAGlB,GAAG,CAACmB,QAAQ,CAAC,CAAC;EAC5B;;EAEA;EACAA,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACD,IAAI;EAClB;AACF;;AAEA;AACA;AACA;AACA,MAAME,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,IAAIC,KAAK,CAAC,CAAC;IAC3B,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACtB;EACA;EACA7B,GAAGA,CAAA,EAAG;IACJ,OAAON,4BAA4B,CAACE,SAAS;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,cAAcA,CAACC,CAAC,EAAE;IAChB,MAAMC,GAAG,GAAGnB,YAAY,CAACkB,CAAC,CAAC;IAC3B,IAAI,CAACE,cAAc,CAACD,GAAG,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACEC,cAAcA,CAACD,GAAG,EAAE;IAClB;IACA,IAAI,CAACsB,QAAQ,GAAG,EAAE;IAClB,IAAIK,OAAO,EAAEC,KAAK;IAClB,MAAMC,QAAQ,GAAG7B,GAAG,CAAC8B,WAAW,CAAC,CAAC;IAClC,IAAID,QAAQ,IAAI,CAAC,EAAE;MACjB9C,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;IAE3D,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjCJ,OAAO,GAAG3B,GAAG,CAACgC,cAAc,CAACD,CAAC,CAAC;MAC/B,IAAIJ,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QAChD,IAAI,CAACqB,WAAW,GAAIG,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IAClDN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MAC5C,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QACvD,IAAI,CAACsB,WAAW,GAAIE,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IAClDN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MAC5C,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,UAAU,EAAE;QACnD,IAAI,CAACuB,QAAQ,GAAIC,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IAC/CN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MAC5C,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,SAAS,EAAE;QAClDyB,KAAK,GAAG,IAAIM,UAAU,CAAC,CAAC;QACxBN,KAAK,CAAC3B,cAAc,CAAC0B,OAAO,CAAC;QAC7B,IAAI,CAACL,QAAQ,CAACa,IAAI,CAACP,KAAK,CAAC;MAC3B,CAAC,MAAM,IAAID,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QACvDyB,KAAK,GAAG,IAAIQ,cAAc,CAAC,CAAC;QAC5BR,KAAK,CAAC3B,cAAc,CAAC0B,OAAO,CAAC;QAC7B,IAAI,CAACL,QAAQ,CAACa,IAAI,CAACP,KAAK,CAAC;MAC3B,CAAC,MAAM7C,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;IAClE;IACA,IAAI,IAAI,CAACiB,QAAQ,CAACe,MAAM,IAAI,CAAC,EAAEtD,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;EAC1F;;EAGA;EACAc,QAAQA,CAAA,EAAG;IACT,IAAIpB,CAAC,GAAG,IAAIuC,MAAM,CAAC,EAAE,CAAC;IACtB,IAAI,IAAI,CAAChB,QAAQ,CAACiB,IAAI,CAAC,CAAC,GAAG,CAAC;MAAE;MAC5B,OAAOxC,CAAC;IACVA,CAAC,IAAI,gBAAgB;IAErB,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,QAAQ,CAACiB,IAAI,CAAC,CAAC,EAAER,CAAC,EAAE,EAC3ChC,CAAC,IAAI,IAAI,CAACuB,QAAQ,CAACS,CAAC,CAAC,CAACZ,QAAQ,CAAC,CAAC;IAElC,IAAI,IAAI,CAACK,WAAW,EAAEzB,CAAC,IAAI,oBAAoB,GAAGyC,eAAe,CAACC,EAAE;IACpE,IAAI,IAAI,CAAChB,WAAW,EAAE1B,CAAC,IAAI,oBAAoB;IAC/C,IAAI,CAAC,IAAI,CAAC2B,QAAQ,EAAE3B,CAAC,IAAI,kBAAkB;IAE3CA,CAAC,IAAI,GAAG;IAER,OAAOA,CAAC;EACV;AACF;;AAEA;AACA;AACA;AACA,MAAM2C,WAAW,CAAC;EAChB;EACArB,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,IAAIC,KAAK,CAAC,CAAC;IAC3B,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACiB,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;EACE/C,GAAGA,CAAA,EAAG;IACJ,OAAON,4BAA4B,CAACG,IAAI;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,cAAcA,CAACC,CAAC,EAAE;IAChB,MAAMC,GAAG,GAAGnB,YAAY,CAACkB,CAAC,CAAC;IAC3B,IAAI,CAACE,cAAc,CAACD,GAAG,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACE;EACAC,cAAcA,CAACD,GAAG,EAAE;IAClB,MAAM6B,QAAQ,GAAG7B,GAAG,CAAC8B,WAAW,CAAC,CAAC;IAClC,IAAIH,OAAO,EAAEC,KAAK;IAClB,IAAIC,QAAQ,IAAI,CAAC;MAAE;MACjB9C,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;IAE3D,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjCJ,OAAO,GAAG3B,GAAG,CAACgC,cAAc,CAACD,CAAC,CAAC;MAC/B,IAAIJ,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QAChD,IAAI,CAACqB,WAAW,GAAIG,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IAC1CN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MACpD,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QACvD,IAAI,CAACsB,WAAW,GAAIE,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IAC1CN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MACpD,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,UAAU,EAAE;QACnD,IAAI,CAACuB,QAAQ,GAAIC,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IACvCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MACpD,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QACvDyB,KAAK,GAAG,IAAIQ,cAAc,CAAC,CAAC;QAC5BR,KAAK,CAAC3B,cAAc,CAAC0B,OAAO,CAAC;QAC7B,IAAI,CAACL,QAAQ,CAACa,IAAI,CAACP,KAAK,CAAC;MAC3B,CAAC,MAAM,IAAID,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,SAAS,EAAE;QAClDyB,KAAK,GAAG,IAAIM,UAAU,CAAC,CAAC;QACxBN,KAAK,CAAC3B,cAAc,CAAC0B,OAAO,CAAC;QAC7B,IAAI,CAACL,QAAQ,CAACa,IAAI,CAACP,KAAK,CAAC;MAC3B,CAAC,MAAM,IAAID,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QACvD,IAAI0C,KAAK;QACT,MAAMhB,QAAQ,GAAGF,OAAO,CAACG,WAAW,CAAC,CAAC;QACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;UACjCc,KAAK,GAAGlB,OAAO,CAACK,cAAc,CAACD,CAAC,CAAC;UACjC,IAAIc,KAAK,CAAC3C,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,sBAAsB,EAAE;YACtD,IAAI,CAACyC,MAAM,CAACE,kBAAkB,GAAGD,KAAK,CAAChC,IAAI;YAC3Cc,OAAO,CAACoB,iBAAiB,CAAChB,CAAC,CAAC;YAC5B;UACF;QACF;QACA,IAAI,CAACiB,WAAW,GAAGrB,OAAO,CAACsB,aAAa,CAAC,CAAC;MAC5C,CAAC,MAAM,IAAItB,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,aAAa,EAAE;QACtD;QACA;QACA;QACA,IAAIwB,OAAO,CAACd,IAAI,GAAG,CAAC,EAClB,IAAI,CAAC8B,aAAa,GAAGhB,OAAO,CAACd,IAAI,GAAG,IAAI;MAC5C,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,aAAa,EAAE;QACtD,IAAI,CAAC+C,UAAU,GAAGvB,OAAO,CAACd,IAAI;MAChC,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,sBAAsB,EAAE;QAC/D,IAAI,CAACgD,WAAW,GAAGxB,OAAO,CAACd,IAAI;MACjC,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,iBAAiB,EAAE;QAC1D,IAAIwB,OAAO,CAACd,IAAI,GAAG,CAAC,EAClB,IAAI,CAAC+B,MAAM,CAACQ,cAAc,GAAGzB,OAAO,CAACd,IAAI;MAC7C,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,2BAA2B,EAAE;QACpE,IAAIwB,OAAO,CAACd,IAAI,GAAG,CAAC,EAClB,IAAI,CAAC+B,MAAM,CAACS,uBAAuB,GAAG1B,OAAO,CAACd,IAAI;MACtD,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,QAAQ,EAAE;QACjD,IAAI,CAACyC,MAAM,CAACU,MAAM,GAAG3B,OAAO,CAACd,IAAI;MACnC,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QACvD,IAAIwB,OAAO,CAACd,IAAI,GAAG,CAAC,EAAE;UACpB,IAAI,CAAC+B,MAAM,CAACW,WAAW,GAAG5B,OAAO,CAACd,IAAI;QACxC;MACF,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,KAAK,EAAE;QAC9C,IAAI,CAACyC,MAAM,CAACY,GAAG,GAAG7B,OAAO,CAACd,IAAI;MAChC,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,aAAa,EAAE;QACtD,IAAIwB,OAAO,CAACd,IAAI,GAAG,CAAC,EAClB,IAAI,CAAC+B,MAAM,CAACa,UAAU,GAAG9B,OAAO,CAACd,IAAI;MACzC,CAAC,MAAM,IAAIc,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,UAAU,EAAE;QACnD,MAAM0B,QAAQ,GAAGF,OAAO,CAACG,WAAW,CAAC,CAAC;QACtC,IAAIe,KAAK;QACT,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;UACjCc,KAAK,GAAGlB,OAAO,CAACK,cAAc,CAACD,CAAC,CAAC;UACjC,IAAIc,KAAK,CAAC3C,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,oBAAoB,EAAE;YACpD,IAAI,CAACyC,MAAM,CAACc,eAAe,GAAGb,KAAK,CAACI,aAAa,CAAC,CAAC;UACrD,CAAC,MAAM,IAAIJ,KAAK,CAAC3C,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,qBAAqB,EAAE;YAC5D,IAAI,CAACyC,MAAM,CAACe,gBAAgB,GAAId,KAAK,CAAChC,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IAC9DY,KAAK,CAAChC,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAChCY,KAAK,CAAChC,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;UACxC,CAAC,MAAM,IAAIY,KAAK,CAAC3C,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,yBAAyB,EAAE;YAChE,IAAI,CAACyC,MAAM,CAACgB,mBAAmB,GAAIf,KAAK,CAAChC,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IACjEY,KAAK,CAAChC,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAChCY,KAAK,CAAChC,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;UACxC,CAAC,MAAM,IAAKY,KAAK,CAAC3C,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,iBAAiB,IAAM0C,KAAK,CAAC3C,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,qBAAsB,EAAE;YACjH,IAAI,CAACyC,MAAM,CAACiB,cAAc,GAAGhB,KAAK,CAAChC,IAAI;UACzC;QACF;MACF;IACF;EACF;EACAM,QAAQA,CAAA,EAAG;IACT,IAAIpB,CAAC,GAAG,IAAIuC,MAAM,CAAC,EAAE,CAAC;MAAEV,KAAK;;IAE7B;IACAA,KAAK,GAAG,IAAIU,MAAM,CAAC,EAAE,CAAC;IACtB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,QAAQ,CAACiB,IAAI,CAAC,CAAC,EAAER,CAAC,EAAE,EAAE;MAC7CH,KAAK,GAAG,IAAI,CAACN,QAAQ,CAACS,CAAC,CAAC,CAACZ,QAAQ,CAAC,CAAC;MACnC,IAAI,CAACS,KAAK,IAAI,EAAE,EACd7B,CAAC,IAAI6B,KAAK;IACd;;IAEA;IACA,IAAI,CAAC7B,CAAC,IAAI,EAAE,IAAI,IAAI,CAACyB,WAAW,EAC9BzB,CAAC,IAAI,oBAAoB;IAC3B,IAAI,CAACA,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC0B,WAAW,EAC9B1B,CAAC,IAAI,oBAAoB;IAC3B,IAAI,CAACA,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC2B,QAAQ,EAC5B3B,CAAC,IAAI,kBAAkB;IACzB,IAAI,CAACA,CAAC,CAAC+D,MAAM,CAAC,EAAE,CAAC,EACf/D,CAAC,GAAG,eAAe,GAAGA,CAAC,GAAG,GAAG;IAE/B,OAAOA,CAAC;EACV;AACF;;AAEA;AACA;AACA;AACA,MAAMgE,eAAe,CAAC;EAEpB1C,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,IAAIC,KAAK,CAAC,CAAC;IAC3B,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACtB;;EAEA;EACA7B,GAAGA,CAAA,EAAG;IACJ,OAAON,4BAA4B,CAACE,SAAS;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,cAAcA,CAACC,CAAC,EAAE;IAChB,MAAMC,GAAG,GAAGnB,YAAY,CAACkB,CAAC,CAAC;IAC3B,IAAI,CAACE,cAAc,CAACD,GAAG,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACEC,cAAcA,CAACD,GAAG,EAAE;IAClB,MAAM6B,QAAQ,GAAG7B,GAAG,CAAC8B,WAAW,CAAC,CAAC;IAClC,IAAIF,KAAK,EAAED,OAAO;IAClB,IAAIE,QAAQ,IAAI,CAAC,EAAE;MACjB9C,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;IAE3D,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjCJ,OAAO,GAAG3B,GAAG,CAACgC,cAAc,CAACD,CAAC,CAAC;MAC/B,IAAIJ,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QAChD,IAAI,CAACqB,WAAW,GAAIG,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IACtCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,IAAI,MAAO;MACtD,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,cAAc,EAAE;QACvD,IAAI,CAACsB,WAAW,GAAIE,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IACtCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MACxD,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,UAAU,EAAE;QACnD,IAAI,CAACuB,QAAQ,GAAIC,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,KAAK,IACvCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,IAAI,IAClCN,OAAO,CAACd,IAAI,CAACoB,WAAW,CAAC,CAAC,IAAI,MAAO;MACpD,CAAC,MAAM,IAAIN,OAAO,CAACzB,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,aAAa,EAAE;QACtDyB,KAAK,GAAG,IAAIoC,cAAc,CAAC,CAAC;QAC5BpC,KAAK,CAAC3B,cAAc,CAAC0B,OAAO,CAAC;QAC7B,IAAI,CAACL,QAAQ,CAACa,IAAI,CAACP,KAAK,CAAC;MAC3B,CAAC,MAAM7C,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;IAClE;IACA,IAAI,IAAI,CAACiB,QAAQ,CAACe,MAAM,IAAI,CAAC,EAAEtD,MAAM,CAACqB,QAAQ,CAACrB,MAAM,CAACsB,iCAAiC,CAAC;EAC1F;;EAEA;EACAc,QAAQA,CAAA,EAAG;IACT,IAAIpB,CAAC,GAAG,IAAIuC,MAAM,CAAC,EAAE,CAAC;IACtB,IAAI,IAAI,CAAChB,QAAQ,CAACiB,IAAI,CAAC,CAAC,GAAG,CAAC;MAAE;MAC5B,OAAOxC,CAAC;IAEV,IAAI6B,KAAK,GAAG,IAAIU,MAAM,CAAC,EAAE,CAAC;IAC1B,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,QAAQ,CAACiB,IAAI,CAAC,CAAC,EAAER,CAAC,EAAE,EAAE;MAC7CH,KAAK,GAAG,IAAI,CAACN,QAAQ,CAACS,CAAC,CAAC,CAACZ,QAAQ,CAAC,CAAC;MACnC,IAAI,CAACS,KAAK,CAACkC,MAAM,CAAC,EAAE,CAAC,EACnB/D,CAAC,IAAI6B,KAAK;IACd;;IAEA;IACA,IAAI7B,CAAC,CAAC+D,MAAM,CAAC,EAAE,CAAC,IAAI,IAAI,CAACtC,WAAW,EAAEzB,CAAC,IAAI,oBAAoB;IAC/D,IAAIA,CAAC,CAAC+D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAACrC,WAAW,EAAE1B,CAAC,IAAI,mBAAmB;IAC/D,IAAIA,CAAC,CAAC+D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAACpC,QAAQ,EAAI3B,CAAC,IAAI,kBAAkB;IAE7D,IAAI,CAACA,CAAC,CAAC+D,MAAM,CAAC,EAAE,CAAC;MAAE;MACjB/D,CAAC,GAAG,oBAAoB,GAAGA,CAAC,GAAG,GAAG;IAEpC,OAAOA,CAAC;EACV;AACF;;AAMA;AACA;AACA;AACA,MAAMkE,UAAU,CAAC;EACf5C,WAAWA,CAAA,EAAG;IACZ,IAAI,CAAC6C,MAAM,GAAG,IAAI3C,KAAK,CAAC,CAAC;EAC3B;AAEF;AAEA,MAAMiB,eAAe,GAAG;EACtB2B,KAAK,EAAE,KAAK;EACZC,EAAE,EAAE,oBAAoB;EACxB3B,EAAE,EAAE,eAAe;EACnB4B,EAAE,EAAE,oBAAoB;EACxBC,GAAG,EAAE,kBAAkB;EACvBC,EAAE,EAAE,gBAAgB;EACpBC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,OAAO,GAAG;EACdC,GAAG,EAAE;AACP,CAAC;AACD;AACA;AACA;AACA,MAAMxC,UAAU,SAAStC,OAAO,CAAC;EAC/ByB,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;EACT;EACA;AACF;AACA;AACA;EACE,MAAMsD,QAAQA,CAACC,EAAE,EAAE;IACjB,IAAIC,SAAS;IACb,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,sBAAsB,GAAG,KAAK;IAClC,IAAI,CAAC,IAAI,CAACjE,IAAI,EAAE;MACdgE,QAAQ,GAAG,CAAC;MACZ,IAAI,CAAChE,IAAI,GAAG9B,EAAE,CAACgG,QAAQ,CAAC,CAAC;MACzB,IAAI;QACF,MAAM7F,WAAW,CAAC8F,MAAM,CAAC,IAAI,CAACnE,IAAI,EAAE2D,OAAO,CAAC;MAC9C,CAAC,CAAC,MAAM;QACN,IAAI,CAAC3D,IAAI,GAAG,WAAW;MACzB;IACF;IACA;IACA;IACA,IAAI8D,EAAE,CAACM,qBAAqB,CAAC,CAAC,IAAI,IAAI,EAAE;MACtCN,EAAE,CAACO,wBAAwB,CAAC,CAAC;MAC7BJ,sBAAsB,GAAG,IAAI;IAC/B;IACA,IAAI,CAAC9F,GAAG,CAACmG,IAAI,CAAC,IAAI,CAACtE,IAAI,CAAC,EAAE;MACxB,IAAI;QACF+D,SAAS,GAAG,MAAM1F,WAAW,CAAC8F,MAAM,CAAC,IAAI,CAACnE,IAAI,EAAE2D,OAAO,CAAC;QACxD,KAAK,MAAMvD,IAAI,IAAI2D,SAAS,EAAE;UAC5B,MAAMQ,EAAE,GAAG,IAAIpB,UAAU,CAAC,CAAC;UAC3BoB,EAAE,CAACL,QAAQ,GAAG,IAAI,CAAClE,IAAI;UACvBuE,EAAE,CAAC1E,IAAI,GAAG,IAAI,CAACA,IAAI;UACnB0E,EAAE,CAACC,QAAQ,GAAG,IAAI,CAACvE,IAAI;UACvBsE,EAAE,CAACrE,UAAU,GAAG,IAAI,CAACA,UAAU;UAC/BqE,EAAE,CAACpE,cAAc,GAAG,IAAI,CAACA,cAAc;UACvCoE,EAAE,CAACE,IAAI,GAAGX,EAAE,CAACM,qBAAqB,CAAC,CAAC;UACpCG,EAAE,CAACnB,MAAM,CAAC/B,IAAI,CAACyC,EAAE,CAACY,IAAI,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;UAChC,IAAIX,QAAQ,IAAI,CAAC,EACfO,EAAE,CAACnB,MAAM,CAAC/B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAACpB,IAAI,GAAG,SAAS,GAAG,IAAI,CAACD,IAAI,GAAG,SAAS,GAAG,IAAI,CAACH,IAAI,GAAG,IAAI,CAAC,CAAC,KAEzG0E,EAAE,CAACnB,MAAM,CAAC/B,IAAI,CAAC,IAAI,CAAChB,QAAQ,CAAC,CAAC,CAAC;UACjCkE,EAAE,CAACvE,IAAI,GAAG+D,SAAS,CAAC3D,IAAI,CAAC,CAACwE,OAAO;UACjCL,EAAE,CAACnE,IAAI,GAAG,IAAI,CAACA,IAAI;UACnB0D,EAAE,CAACM,qBAAqB,CAAC,CAAC,CAACS,gBAAgB,CAACN,EAAE,CAAC;QACjD;MACF,CAAC,CAAC,MAAM;QACN;MAAA;IAEJ,CAAC,MAAM;MACL,MAAMA,EAAE,GAAG,IAAIpB,UAAU,CAAC,CAAC;MAC3BoB,EAAE,CAACL,QAAQ,GAAG,IAAI,CAAClE,IAAI;MACvBuE,EAAE,CAAC1E,IAAI,GAAG,IAAI,CAACA,IAAI;MACnB0E,EAAE,CAACC,QAAQ,GAAG,IAAI,CAACvE,IAAI;MACvBsE,EAAE,CAACrE,UAAU,GAAG,IAAI,CAACA,UAAU;MAC/BqE,EAAE,CAACpE,cAAc,GAAG,IAAI,CAACA,cAAc;MACvCoE,EAAE,CAACE,IAAI,GAAGX,EAAE,CAACM,qBAAqB,CAAC,CAAC;MACpCG,EAAE,CAACnB,MAAM,CAAC/B,IAAI,CAACyC,EAAE,CAACY,IAAI,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MAChCJ,EAAE,CAACnB,MAAM,CAAC/B,IAAI,CAAC,IAAI,CAAChB,QAAQ,CAAC,CAAC,CAAC;MAC/BkE,EAAE,CAACvE,IAAI,GAAG,IAAI,CAACA,IAAI;MACnBuE,EAAE,CAACnE,IAAI,GAAG,IAAI,CAACA,IAAI;MACnB0D,EAAE,CAACM,qBAAqB,CAAC,CAAC,CAACS,gBAAgB,CAACN,EAAE,CAAC;IACjD;IAEA,IAAIN,sBAAsB,EAAE;MAC1BH,EAAE,CAACgB,gBAAgB,CAAC,CAAC;IACvB;EAEF;;EAIA;AACF;AACA;AACA;EACEC,WAAWA,CAACjB,EAAE,EAAE;IACd,MAAMkB,QAAQ,GAAG,IAAI,CAAC3E,QAAQ,CAAC,CAAC;IAChC,IAAI4E,KAAK,GAAG,IAAIxE,KAAK,CAAC,CAAC;IACvBwE,KAAK,GAAGnB,EAAE,CAACM,qBAAqB,CAAC,CAAC,CAACc,iBAAiB,CAAC,CAAC;IACtD,KAAK,IAAIjE,CAAC,GAAG,CAAC,EAACA,CAAC,GAAGgE,KAAK,CAAC1D,MAAM,EAAEN,CAAC,EAAE,EAAE;MACpC,IAAIgE,KAAK,CAAChE,CAAC,CAAC,CAACkE,IAAI,EAAE;QACjB;MACF;MACAF,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAAC2D,QAAQ,CAAC;IAChC;EACF;AACF;;AAEA;AACA;AACA;AACA,MAAM1D,cAAc,SAAShB,WAAW,CAAC;EACvCC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAAC6E,cAAc,GAAG,IAAI3E,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC4E,UAAU,GAAG,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMxB,QAAQA,CAACC,EAAE,EAAE;IACjB,MAAM,IAAI,CAACwB,SAAS,CAACxB,EAAE,EAAE,CAAC,CAAC;EAC7B;EAEA,MAAMwB,SAASA,CAACxB,EAAE,EAAEyB,QAAQ,EAAE;IAC5BA,QAAQ,EAAE;IACV,IAAI,CAACF,UAAU,GAAGvB,EAAE,CAACY,IAAI,CAACnD,MAAM;IAChCuC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,gBAAgB,CAAC;IAC9B,IAAI,IAAI,CAACX,WAAW,EAAE;MACpB,IAAI,CAAC0E,cAAc,GAAG,IAAI,CAAC5E,QAAQ;MACnC,MAAM,IAAI,CAAC4E,cAAc,CAAC,CAAC,CAAC,CAACvB,QAAQ,CAACC,EAAE,CAAC;MAEzC,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmE,cAAc,CAAC7D,MAAM,EAAEN,CAAC,EAAE,EAAE;QACnD,IAAI,CAACmE,cAAc,CAACnE,CAAC,CAAC,CAAC8D,WAAW,CAACjB,EAAE,CAAC;MACxC;IACF,CAAC,MAAM;MAAE;MACP,IAAI,CAACsB,cAAc,GAAGI,kBAAkB,CAACC,iBAAiB,CAAC,IAAI,CAACjF,QAAQ,EAAE,IAAI,CAACI,QAAQ,EACrF,IAAI,CAACD,WAAW,CAAC;MACnB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmE,cAAc,CAAC7D,MAAM,EAAEN,CAAC,EAAE,EAAE;QACnD,IAAI,IAAI,CAACyE,eAAe,CAACzE,CAAC,CAAC,IAAI,CAAC,EAAE;UAChC,MAAM,IAAI,CAACmE,cAAc,CAACnE,CAAC,CAAC,CAACqE,SAAS,CAACxB,EAAE,EAAEyB,QAAQ,CAAC;QACtD,CAAC,MAAM;UACL,MAAM,IAAI,CAACH,cAAc,CAACnE,CAAC,CAAC,CAAC4C,QAAQ,CAACC,EAAE,CAAC;QAC3C;MAEF;IACF;IACA,IAAI,CAAC6B,WAAW,CAAC7B,EAAE,CAAC;IACpBA,EAAE,CAACY,IAAI,CAACnD,MAAM,GAAG,IAAI,CAAC8D,UAAU;EAElC;EACAN,WAAWA,CAACjB,EAAE,EAAE;IACd,MAAMkB,QAAQ,GAAG,IAAI,CAAC3E,QAAQ,CAAC,CAAC;IAChC,IAAI4E,KAAK,GAAG,IAAIxE,KAAK,CAAC,CAAC;IACvBwE,KAAK,GAAGnB,EAAE,CAACM,qBAAqB,CAAC,CAAC,CAACc,iBAAiB,CAAC,CAAC;IACtD,KAAK,IAAIjE,CAAC,GAAG,CAAC,EAACA,CAAC,GAAGgE,KAAK,CAAC1D,MAAM,EAAEN,CAAC,EAAE,EAAE;MACpC,IAAIgE,KAAK,CAAChE,CAAC,CAAC,CAACkE,IAAI,EAAE;QACjB;MACF;MACAF,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAAC2D,QAAQ,CAAC;IAChC;EACF;EAGAY,eAAeA,CAAA,EAAG;IAChB,IAAInE,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmE,cAAc,CAAC7D,MAAM,EAAEN,CAAC,EAAE,EAAE;MACnD,IAAI,IAAI,CAACyE,eAAe,CAACzE,CAAC,CAAC,IAAI,CAAC,EAAE;QAChCQ,IAAI,IAAI,IAAI,CAAC2D,cAAc,CAACnE,CAAC,CAAC,CAAC2E,eAAe,CAAC,CAAC;MAClD,CAAC,MAAM;QACLnE,IAAI,EAAE;MACR;MACA,IAAI,IAAI,CAACf,WAAW,EAClB,OAAOe,IAAI;IACf;IACA,OAAQA,IAAI;EACd;;EAEA;AACF;AACA;EACEiE,eAAeA,CAACG,QAAQ,EAAE;IACxB,OAAQ,IAAI,CAACT,cAAc,CAACS,QAAQ,CAAC,CAAC9G,GAAG,CAAC,CAAC;EAC7C;;EAEA;AACF;AACA;EACE+G,QAAQA,CAACD,QAAQ,EAAE;IACjB,OAAQ,IAAI,CAACrF,QAAQ,CAACqF,QAAQ,CAAC;EACjC;EAEAF,WAAWA,CAAC7B,EAAE,EAAE;IACd,IAAImB,KAAK,GAAG,IAAIxE,KAAK,CAAC,CAAC;IACvB,MAAMsF,MAAM,GAAG,IAAI,CAACH,eAAe,CAAC,CAAC;IACrC,IAAI9B,EAAE,CAACM,qBAAqB,CAAC,CAAC,IAAI,IAAI,EAAE;MACtCa,KAAK,GAAGnB,EAAE,CAACM,qBAAqB,CAAC,CAAC,CAACc,iBAAiB,CAAC,CAAC;MACtD,IAAIc,WAAW,GAAG,CAAC;MACnB,IAAIC,QAAQ,GAAG,IAAI;MACnB,IAAIC,QAAQ,GAAG,IAAI;MACnB,KAAK,IAAIjF,CAAC,GAAGgE,KAAK,CAAC1D,MAAM,GAAG,CAAC,EAAIN,CAAC,IAAI,CAAC,IAC5B,CAACgE,KAAK,CAAChE,CAAC,CAAC,CAACkE,IAAI,EAAGlE,CAAC,EAAE,EAAE;QAC/B,IAAIgE,KAAK,CAAChE,CAAC,CAAC,CAACiD,QAAQ,IAAI+B,QAAQ,IAAIhB,KAAK,CAAChE,CAAC,CAAC,CAACpB,IAAI,IAAIqG,QAAQ,EAC5DF,WAAW,EAAE;QACfC,QAAQ,GAAGhB,KAAK,CAAChE,CAAC,CAAC,CAACiD,QAAQ;QAC5BgC,QAAQ,GAAGjB,KAAK,CAAChE,CAAC,CAAC,CAACpB,IAAI;;QAExB;QACA,IAAKmG,WAAW,GAAGD,MAAM,EAAG;UAC1B;QACF;QAEA,IAAI,IAAI,CAACrF,WAAW,EAAE;UACpBuE,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAACK,eAAe,CAAC4B,EAAE,CAAC;UACxC2B,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAACK,eAAe,CAACC,EAAE,CAAC;UACxCsD,KAAK,CAAChE,CAAC,CAAC,CAACkE,IAAI,GAAG,IAAI;QACtB;QACA;QACAF,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAAC,GAAG,CAAC;MAC3B;IACF;EACF;AAGF;;AAEA;AACA;AACA;AACA,MAAM6B,cAAc,SAAStB,WAAW,CAAC;EACvCrB,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAAC6E,cAAc,GAAG,IAAI3E,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC0F,aAAa,GAAG,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMtC,QAAQA,CAACC,EAAE,EAAE;IACjBA,EAAE,CAACY,IAAI,CAACnD,MAAM,GAAG,CAAC,CAAC,CAAC;IACpBuC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,eAAe,CAAC;IAC7B,MAAMoD,IAAI,GAAGX,EAAE,CAACO,wBAAwB,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAI,IAAI,CAACjC,UAAU,IAAI,IAAI,EAAE;MAC3B0B,EAAE,CAAC1B,UAAU,GAAG,IAAI,CAACgE,WAAW,CAAC,IAAI,CAAChE,UAAU,EAAE0B,EAAE,CAAC1B,UAAU,CAAC;MAChEqC,IAAI,CAACrC,UAAU,GAAG0B,EAAE,CAAC1B,UAAU;IACjC;IACA,IAAI,IAAI,CAACP,aAAa,IAAI,CAAC,CAAC,EAAE;MAC5B4C,IAAI,CAAC5C,aAAa,GAAG,IAAI,CAACA,aAAa;IACzC;IAEA4C,IAAI,CAAC3C,MAAM,GAAG,IAAI,CAACA,MAAM;IAEzB,IAAI,gBAAgB,IAAI,IAAI,CAACA,MAAM,EAAE;MACnCgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAACS,MAAM,CAACQ,cAAc,GAAG,GAAG,CAAC;IACtE;IACA,IAAI,yBAAyB,IAAI,IAAI,CAACR,MAAM,EAAE;MAC5CgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAACS,MAAM,CAACS,uBAAuB,GAAG,GAAG,CAAC;IACzF;IACA,IAAI,aAAa,IAAI,IAAI,CAACT,MAAM,EAAE;MAChCgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAACS,MAAM,CAACW,WAAW,GAAG,GAAG,CAAC;IAChE;IACA,IAAI,KAAK,IAAI,IAAI,CAACX,MAAM,EAAE;MACxBgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAACS,MAAM,CAACY,GAAG,GAAG,GAAG,CAAC;IAC/C;IACA,IAAI,YAAY,IAAI,IAAI,CAACZ,MAAM,EAAE;MAC/BgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,eAAe,GAAG,IAAI,CAACS,MAAM,CAACa,UAAU,GAAG,GAAG,CAAC;IAC9D;IACA,IAAI,QAAQ,IAAI,IAAI,CAACb,MAAM,EAAE;MAC3BgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAACS,MAAM,CAACU,MAAM,GAAG,GAAG,CAAC;IACrD;IACA,IAAK,iBAAiB,IAAI,IAAI,CAACV,MAAM,IAAM,kBAAkB,IAAI,IAAI,CAACA,MAAO,IAAK,gBAAgB,IAAI,IAAI,CAACA,MAAO,IAAK,qBAAqB,IAAI,IAAI,CAACA,MAAO,EAAE;MAC5JgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,YAAY,CAAC;MAC1B,IAAI,iBAAiB,IAAI,IAAI,CAACS,MAAM,EAAE;QACpCgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAACS,MAAM,CAACc,eAAe,GAAG,GAAG,CAAC;MAC1E;MACA,IAAI,kBAAkB,IAAI,IAAI,CAACd,MAAM,EAAE;QACrCgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAACS,MAAM,CAACe,gBAAgB,GAAG,GAAG,CAAC;MAC5E;MACA,IAAI,qBAAqB,IAAI,IAAI,CAACf,MAAM,EAAE;QACxCgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAACS,MAAM,CAACgB,mBAAmB,GAAG,GAAG,CAAC;MACnF;MACA,IAAI,gBAAgB,IAAI,IAAI,CAAChB,MAAM,EAAE;QACnCgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAACS,MAAM,CAACiB,cAAc,GAAG,GAAG,CAAC;MACtE;MACAe,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,GAAG,CAAC;IACnB;IACA,IAAI,gBAAgB,IAAI,IAAI,CAACS,MAAM,EAAE;MACnCgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAACS,MAAM,CAAC3B,cAAc,GAAG,GAAG,CAAC;IACvE;IACA,IAAI,YAAY,IAAI,IAAI,CAAC2B,MAAM,EAAE;MAC/BgC,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,eAAe,GAAG,IAAI,CAACS,MAAM,CAAC5B,UAAU,GAAG,GAAG,CAAC;IAC9D;IACA,IAAI,CAAC,IAAI,CAACU,QAAQ,EAAE;MAClBkD,EAAE,CAACY,IAAI,CAACrD,IAAI,CAACK,eAAe,CAAC8B,GAAG,CAAC;IACnC;IACA,IAAI,CAAC,IAAI,CAAC9C,WAAW,EAAE;MACrB;MACA,IAAI,CAAC0E,cAAc,GAAGI,kBAAkB,CAACC,iBAAiB,CAAC,IAAI,CAACjF,QAAQ,EAAE,IAAI,CAACI,QAAQ,EACrF,IAAI,CAACD,WAAW,CAAC;MACnB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmE,cAAc,CAAC7D,MAAM,EAAEN,CAAC,EAAE,EAAE;QACnD,MAAM,IAAI,CAACmE,cAAc,CAACnE,CAAC,CAAC,CAAC4C,QAAQ,CAACC,EAAE,CAAC;MAC3C;MACA,IAAI,CAAC6B,WAAW,CAAC7B,EAAE,CAAC;IACtB,CAAC,MAAM;MACL;MACA,IAAI,CAACsB,cAAc,GAAG,IAAI,CAAC5E,QAAQ;MACnC,MAAM,IAAI,CAAC4E,cAAc,CAAC,CAAC,CAAC,CAACvB,QAAQ,CAACC,EAAE,CAAC;MACzC,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmE,cAAc,CAAC7D,MAAM,EAAEN,CAAC,EAAE,EAAE;QACnD,IAAI,CAACmE,cAAc,CAACnE,CAAC,CAAC,CAAC8D,WAAW,CAACjB,EAAE,CAAC;MACxC;MACA,IAAI,CAAC6B,WAAW,CAAC7B,EAAE,CAAC;IACtB;IACAA,EAAE,CAACgB,gBAAgB,CAAC,CAAC;EAEvB;EAEAa,WAAWA,CAAC7B,EAAE,EAAE;IAEd,IAAIA,EAAE,CAACM,qBAAqB,CAAC,CAAC,IAAI,IAAI,EACpC;IACF,IAAIa,KAAK,GAAG,IAAIxE,KAAK,CAAC,CAAC;IACvBwE,KAAK,GAAGnB,EAAE,CAACM,qBAAqB,CAAC,CAAC,CAACc,iBAAiB,CAAC,CAAC;IACtD,KAAK,IAAIjE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgE,KAAK,CAAC1D,MAAM,EAAE,EAAEN,CAAC,EAAE;MAErC,IAAI,IAAI,CAACP,WAAW,EAAE;QACpBuE,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAACK,eAAe,CAAC4B,EAAE,CAAC;MAC1C;;MAEA;MACA,IAAI,IAAI,CAACpB,WAAW,IAAI,IAAI,EAAE;QAC5B,IAAI,CAACA,WAAW,GAAG,iBAAiB;MACtC;MACA,MAAMmE,GAAG,GAAI,iBAAgB9H,KAAK,CAAC+H,OAAQ,UAAS/H,KAAK,CAACgI,QAAS,UAAShI,KAAK,CAACiI,QAAS,IAAG;MAC9FvB,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAACK,eAAe,CAAC+B,EAAE,CAAC;MACxCwB,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAAC,IAAI,CAACa,WAAW,CAAC;MACtC+C,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAACgF,GAAG,CAAC;MACzBpB,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAAC,GAAG,CAAC;MAEzB,IAAI,IAAI,CAACoF,GAAG,IAAI,IAAI,EAAE;QACpBxB,KAAK,CAAChE,CAAC,CAAC,CAACyF,GAAG,GAAG,IAAI,CAACD,GAAG;MACzB;MACA,IAAI,IAAI,CAACE,WAAW,IAAI,IAAI,EAAE;QAC5B1B,KAAK,CAAChE,CAAC,CAAC,CAAC2F,YAAY,GAAG,IAAI,CAACD,WAAW;MAC1C;MACA,IAAI,IAAI,CAACE,YAAY,IAAI,IAAI,EAAE;QAC7B5B,KAAK,CAAChE,CAAC,CAAC,CAAC6F,aAAa,GAAG,IAAI,CAACD,YAAY;MAC5C;MACA;MACA5B,KAAK,CAAChE,CAAC,CAAC,CAACmC,MAAM,CAAC/B,IAAI,CAAC,GAAG,CAAC;MACzB4D,KAAK,CAAChE,CAAC,CAAC,CAACkE,IAAI,GAAG,IAAI;IACtB;EACF;EAEAiB,WAAWA,CAACW,SAAS,EAAEC,YAAY,EAAE;IACnC,IAAI;MACF,OAAOC,QAAQ,CAACF,SAAS,CAAC;IAC5B,CAAC,CAAC,OAAOG,SAAS,EAAE;MAClB,OAAOF,YAAY;IACrB;EACF;AAEF;;AAEA;AACA;AACA;AACA,MAAMxB,kBAAkB,SAASvC,eAAe,CAAC;EAC/C1C,WAAWA,CAAC6E,cAAc,GAAG,IAAI3E,KAAK,CAAC,CAAC,EAAE0F,aAAa,GAAG,CAAC,EAAEhB,IAAI,GAAG,CAAC,EAAE;IACrE,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACe,aAAa,GAAGA,aAAa;IAClC,IAAI,CAAChB,IAAI,GAAGA,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMtB,QAAQA,CAACC,EAAE,EAAE;IACjBA,EAAE,CAACY,IAAI,CAACrD,IAAI,CAAC,oBAAoB,CAAC;IAClC,IAAI,CAAC+D,cAAc,GAAGI,kBAAkB,CAACC,iBAAiB,CAAC,IAAI,CAACjF,QAAQ,EAAE,IAAI,CAACI,QAAQ,EAAE,IAAI,CAACD,WAAW,CAAC;IAC1G,OAAO,IAAI,CAACwF,aAAa,GAAG,IAAI,CAACf,cAAc,CAAC7D,MAAM,EAAE;MACtD,MAAM,IAAI,CAAC6D,cAAc,CAAC,IAAI,CAACe,aAAa,CAAC,CAACtC,QAAQ,CAACC,EAAE,CAAC;MAC1D,IAAI,CAACqC,aAAa,EAAE;IACtB;EAEF;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOV,iBAAiBA,CAACjF,QAAQ,EAAEI,QAAQ,EAAED,WAAW,EAAE;IACxD,IAAIwG,UAAU;IACd,MAAMC,QAAQ,GAAG5G,QAAQ,CAACe,MAAM;IAChC,IAAI8F,WAAW,GAAG,IAAI5G,KAAK,CAAC,CAAC;IAC7B,MAAM6G,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;IAC3C,MAAMC,GAAG,GAAG,IAAIjH,KAAK,CAAC2G,QAAQ,CAAC,CAACO,IAAI,CAAC,KAAK,CAAC;IAE3C,IAAI/G,QAAQ,EAAE;MACZ,IAAID,WAAW,EAAE;QACf,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmG,QAAQ,EAAEnG,CAAC,EAAE,EAAE;UACjC,GAAG;YACDkG,UAAU,GAAGI,IAAI,CAACK,GAAG,CAACL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAGL,QAAQ;UAClE,CAAC,QAAQM,GAAG,CAACP,UAAU,CAAC;UACxBO,GAAG,CAACP,UAAU,CAAC,GAAG,IAAI;UACtBE,WAAW,CAAChG,IAAI,CAACb,QAAQ,CAAC2G,UAAU,CAAC,CAAC;QACxC;MACF,CAAC,MAAM;QACLE,WAAW,GAAG7G,QAAQ;MACxB;IACF,CAAC,MAAM;MAAW;MAChB,IAAIG,WAAW,EAAE;QACfwG,UAAU,GAAGI,IAAI,CAACK,GAAG,CAACN,IAAI,CAAC,GAAGF,QAAQ;QACtCC,WAAW,CAAChG,IAAI,CAACb,QAAQ,CAAC2G,UAAU,CAAC,CAAC;MACxC,CAAC,MAAM;QACLE,WAAW,CAAChG,IAAI,CAACb,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC/B;IACF;IAEA,OAAQ6G,WAAW;EAErB;AAIF;AACAQ,MAAM,CAACC,OAAO,GAAG;EAAC1G,UAAU;EAAEE,cAAc;EAAE4B,cAAc;EAAEsC;AAAkB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}