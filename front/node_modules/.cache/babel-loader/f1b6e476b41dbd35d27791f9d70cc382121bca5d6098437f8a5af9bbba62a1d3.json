{"ast":null,"code":"// Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nclass AqDeqOptions {\n  //---------------------------------------------------------------------------\n  // condition\n  //\n  // Property for the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get condition() {\n    return this._impl.getCondition();\n  }\n  set condition(value) {\n    errors.assertPropValue(typeof value === 'string', \"condition\");\n    this._impl.setCondition(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // consumerName\n  //\n  // Property for the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get consumerName() {\n    return this._impl.getConsumerName();\n  }\n  set consumerName(value) {\n    errors.assertPropValue(typeof value === 'string', \"consumerName\");\n    this._impl.setConsumerName(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // correlation\n  //\n  // Property for the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get correlation() {\n    return this._impl.getCorrelation();\n  }\n  set correlation(value) {\n    errors.assertPropValue(typeof value === 'string', \"correlation\");\n    this._impl.setCorrelation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // mode\n  //\n  // Property for the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get mode() {\n    return this._impl.getMode();\n  }\n  set mode(value) {\n    errors.assertPropValue(value === constants.AQ_DEQ_MODE_BROWSE || value === constants.AQ_DEQ_MODE_LOCKED || value === constants.AQ_DEQ_MODE_REMOVE || value === constants.AQ_DEQ_MODE_REMOVE_NO_DATA, \"mode\");\n    this._impl.setMode(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // msgId\n  //\n  // Property for the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get msgId() {\n    return this._impl.getMsgId();\n  }\n  set msgId(value) {\n    errors.assertPropValue(Buffer.isBuffer(value), \"msgId\");\n    this._impl.setMsgId(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // navigation\n  //\n  // Property for the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get navigation() {\n    return this._impl.getNavigation();\n  }\n  set navigation(value) {\n    errors.assertPropValue(value === constants.AQ_DEQ_NAV_FIRST_MSG || value === constants.AQ_DEQ_NAV_NEXT_TRANSACTION || value === constants.AQ_DEQ_NAV_NEXT_MSG, \"navigation\");\n    this._impl.setNavigation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // transformation\n  //\n  // Property for the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get transformation() {\n    return this._impl.getTransformation();\n  }\n  set transformation(value) {\n    errors.assertPropValue(typeof value === 'string', \"transformation\");\n    this._impl.setTransformation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // visibility\n  //\n  // Property for the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get visibility() {\n    return this._impl.getVisibility();\n  }\n  set visibility(value) {\n    errors.assertPropValue(value === constants.AQ_VISIBILITY_IMMEDIATE || value === constants.AQ_VISIBILITY_ON_COMMIT, \"visibility\");\n    this._impl.setVisibility(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // wait\n  //\n  // Property for the time to wait for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get wait() {\n    return this._impl.getWait();\n  }\n  set wait(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"wait\");\n    this._impl.setWait(value);\n  }\n}\nmodule.exports = AqDeqOptions;","map":{"version":3,"names":["Buffer","require","constants","errors","AqDeqOptions","condition","_impl","getCondition","value","assertPropValue","setCondition","consumerName","getConsumerName","setConsumerName","correlation","getCorrelation","setCorrelation","mode","getMode","AQ_DEQ_MODE_BROWSE","AQ_DEQ_MODE_LOCKED","AQ_DEQ_MODE_REMOVE","AQ_DEQ_MODE_REMOVE_NO_DATA","setMode","msgId","getMsgId","isBuffer","setMsgId","navigation","getNavigation","AQ_DEQ_NAV_FIRST_MSG","AQ_DEQ_NAV_NEXT_TRANSACTION","AQ_DEQ_NAV_NEXT_MSG","setNavigation","transformation","getTransformation","setTransformation","visibility","getVisibility","AQ_VISIBILITY_IMMEDIATE","AQ_VISIBILITY_ON_COMMIT","setVisibility","wait","getWait","Number","isInteger","setWait","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/aqDeqOptions.js"],"sourcesContent":["// Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\n\nclass AqDeqOptions {\n\n  //---------------------------------------------------------------------------\n  // condition\n  //\n  // Property for the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get condition() {\n    return this._impl.getCondition();\n  }\n\n  set condition(value) {\n    errors.assertPropValue(typeof value === 'string', \"condition\");\n    this._impl.setCondition(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // consumerName\n  //\n  // Property for the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get consumerName() {\n    return this._impl.getConsumerName();\n  }\n\n  set consumerName(value) {\n    errors.assertPropValue(typeof value === 'string', \"consumerName\");\n    this._impl.setConsumerName(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // correlation\n  //\n  // Property for the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get correlation() {\n    return this._impl.getCorrelation();\n  }\n\n  set correlation(value) {\n    errors.assertPropValue(typeof value === 'string', \"correlation\");\n    this._impl.setCorrelation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // mode\n  //\n  // Property for the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get mode() {\n    return this._impl.getMode();\n  }\n\n  set mode(value) {\n    errors.assertPropValue(value === constants.AQ_DEQ_MODE_BROWSE ||\n      value === constants.AQ_DEQ_MODE_LOCKED ||\n      value === constants.AQ_DEQ_MODE_REMOVE ||\n      value === constants.AQ_DEQ_MODE_REMOVE_NO_DATA, \"mode\");\n    this._impl.setMode(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // msgId\n  //\n  // Property for the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get msgId() {\n    return this._impl.getMsgId();\n  }\n\n  set msgId(value) {\n    errors.assertPropValue(Buffer.isBuffer(value), \"msgId\");\n    this._impl.setMsgId(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // navigation\n  //\n  // Property for the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get navigation() {\n    return this._impl.getNavigation();\n  }\n\n  set navigation(value) {\n    errors.assertPropValue(value === constants.AQ_DEQ_NAV_FIRST_MSG ||\n        value === constants.AQ_DEQ_NAV_NEXT_TRANSACTION ||\n        value === constants.AQ_DEQ_NAV_NEXT_MSG, \"navigation\");\n    this._impl.setNavigation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // transformation\n  //\n  // Property for the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get transformation() {\n    return this._impl.getTransformation();\n  }\n\n  set transformation(value) {\n    errors.assertPropValue(typeof value === 'string', \"transformation\");\n    this._impl.setTransformation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // visibility\n  //\n  // Property for the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get visibility() {\n    return this._impl.getVisibility();\n  }\n\n  set visibility(value) {\n    errors.assertPropValue(value === constants.AQ_VISIBILITY_IMMEDIATE ||\n      value === constants.AQ_VISIBILITY_ON_COMMIT, \"visibility\");\n    this._impl.setVisibility(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // wait\n  //\n  // Property for the time to wait for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get wait() {\n    return this._impl.getWait();\n  }\n\n  set wait(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"wait\");\n    this._impl.setWait(value);\n  }\n\n}\n\nmodule.exports = AqDeqOptions;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}