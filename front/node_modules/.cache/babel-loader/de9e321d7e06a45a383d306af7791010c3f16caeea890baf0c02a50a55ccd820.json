{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst constants = require('../constants.js');\nconst Message = require('./base.js');\n\n/**\n * Abstracts all LOB operations.\n *\n * @class LobOpMessage\n * @extends {Message}\n */\nclass LobOpMessage extends Message {\n  constructor(connImpl, options) {\n    super(connImpl);\n    /*\n     * source LOB locator. Reading data from it.\n     */\n    this.sourceLobImpl = options.sourceLobImpl || null;\n    this.operation = options.operation;\n    /*\n     * Destination LOB locator. For copy, append operations,...\n     */\n    this.destLobImpl = options.destLobImpl || null;\n    /*\n     * Offset from where sourceLob operation to start\n     */\n    this.sourceOffset = options.sourceOffset || 0;\n    /*\n     * Offset from where destLob operation to start\n     */\n    this.destOffset = options.destOffset || 0;\n    this.boolFlag = false;\n    if (options.data) {\n      // data available For Writes\n      this.data = options.data;\n    }\n    this.functionCode = constants.TNS_FUNC_LOB_OP;\n    this.sendAmount = options.sendAmount;\n    this.amount = options.amount || 0; // LOB length\n  }\n  encode(buf) {\n    this.writeFunctionHeader(buf);\n    if (this.sourceLobImpl === null) {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    } else {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.sourceLobImpl._locator.length);\n    }\n    if (this.destLobImpl === null) {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    } else {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.destLobImpl._locator.length);\n    }\n    buf.writeUB4(0);\n    buf.writeUB4(0);\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUInt8(0);\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP || this.operation === constants.TNS_LOB_OP_IS_OPEN) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUB4(this.operation);\n    buf.writeUInt8(0);\n    buf.writeUInt8(0);\n    buf.writeUB8(this.sourceOffset);\n    buf.writeUB8(this.destOffset);\n    if (this.sendAmount) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    for (let i = 0; i < 3; i++) {\n      buf.writeUInt16BE(0);\n    }\n    if (this.sourceLobImpl) {\n      buf.writeBytes(this.sourceLobImpl._locator);\n    }\n    if (this.destLobImpl) {\n      buf.writeBytes(this.destLobImpl._locator);\n    }\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      if (this.sourceLobImpl.dbType._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        buf.writeUB4(constants.TNS_CHARSET_UTF16);\n      } else {\n        buf.writeUB4(constants.TNS_CHARSET_UTF8);\n      }\n    }\n    if (this.data) {\n      let data;\n      buf.writeUInt8(constants.TNS_MSG_TYPE_LOB_DATA);\n      if (this.sourceLobImpl.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n        data = this.data;\n      } else if (this.sourceLobImpl.getCsfrm() === constants.CSFRM_NCHAR) {\n        data = this.data;\n        // TODO: avoid conversion back to string, if possible\n        // this is since bind data is converted to buffer automatically, but if\n        // it exceeds 32K for PL/SQL it must be written as a temporary LOB\n        if (Buffer.isBuffer(this.data)) {\n          data = data.toString();\n        }\n        data = Buffer.from(data, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        data = Buffer.from(this.data);\n      }\n      buf.writeBytesWithLength(data);\n    }\n    if (this.sendAmount) {\n      buf.writeUB8(this.amount);\n    }\n  }\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_LOB_DATA) {\n      const oraTypeNum = this.sourceLobImpl.dbType._oraTypeNum;\n      let data = buf.readBytesWithLength();\n      if (data !== null) {\n        if (oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n          data = Buffer.from(data);\n        } else if (this.sourceLobImpl.getCsfrm() === constants.CSFRM_NCHAR) {\n          data = Buffer.from(data).swap16().toString('utf16le');\n        } else {\n          data = data.toString();\n        }\n      }\n      this.data = data;\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n  processReturnParameter(buf) {\n    let lobArray;\n    let locator;\n    let temp8;\n    let numBytes;\n    if (this.sourceLobImpl !== null) {\n      numBytes = this.sourceLobImpl._locator.length;\n      lobArray = buf.readBytes(numBytes);\n      locator = lobArray.slice(0, numBytes);\n      locator.copy(this.sourceLobImpl._locator);\n    }\n    if (this.destLobImpl !== null) {\n      numBytes = this.destLobImpl._locator.length;\n      lobArray = buf.readBytes(numBytes);\n      locator = lobArray.slice(0, numBytes);\n      locator.copy(this.destLobImpl._locator);\n    }\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      buf.skipUB2(); // skip character set\n      buf.skipBytes(3); // skip trailing flags, amount\n    } else if (this.sendAmount) {\n      this.amount = buf.readSB8();\n    }\n    if (this.operation === constants.TNS_LOB_OP_IS_OPEN) {\n      temp8 = buf.readUB1();\n      this.boolFlag = temp8 > 0;\n    }\n  }\n}\nmodule.exports = LobOpMessage;","map":{"version":3,"names":["Buffer","require","constants","Message","LobOpMessage","constructor","connImpl","options","sourceLobImpl","operation","destLobImpl","sourceOffset","destOffset","boolFlag","data","functionCode","TNS_FUNC_LOB_OP","sendAmount","amount","encode","buf","writeFunctionHeader","writeUInt8","writeUB4","_locator","length","TNS_LOB_OP_CREATE_TEMP","TNS_LOB_OP_IS_OPEN","writeUB8","i","writeUInt16BE","writeBytes","dbType","_csfrm","CSFRM_NCHAR","caps","checkNCharsetId","TNS_CHARSET_UTF16","TNS_CHARSET_UTF8","TNS_MSG_TYPE_LOB_DATA","_oraTypeNum","TNS_DATA_TYPE_BLOB","getCsfrm","isBuffer","toString","from","TNS_ENCODING_UTF16","swap16","writeBytesWithLength","processMessage","messageType","oraTypeNum","readBytesWithLength","processReturnParameter","lobArray","locator","temp8","numBytes","readBytes","slice","copy","skipUB2","skipBytes","readSB8","readUB1","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/protocol/messages/lobOp.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('../constants.js');\nconst Message = require('./base.js');\n\n/**\n * Abstracts all LOB operations.\n *\n * @class LobOpMessage\n * @extends {Message}\n */\nclass LobOpMessage extends Message {\n\n  constructor(connImpl, options) {\n    super(connImpl);\n    /*\n     * source LOB locator. Reading data from it.\n     */\n    this.sourceLobImpl = options.sourceLobImpl || null;\n    this.operation = options.operation;\n    /*\n     * Destination LOB locator. For copy, append operations,...\n     */\n    this.destLobImpl = options.destLobImpl || null;\n    /*\n     * Offset from where sourceLob operation to start\n     */\n    this.sourceOffset = options.sourceOffset || 0;\n    /*\n     * Offset from where destLob operation to start\n     */\n    this.destOffset = options.destOffset || 0;\n    this.boolFlag = false;\n    if (options.data) { // data available For Writes\n      this.data = options.data;\n    }\n    this.functionCode = constants.TNS_FUNC_LOB_OP;\n    this.sendAmount = options.sendAmount;\n    this.amount = options.amount || 0; // LOB length\n  }\n\n  encode(buf) {\n    this.writeFunctionHeader(buf);\n    if (this.sourceLobImpl === null) {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    } else {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.sourceLobImpl._locator.length);\n    }\n    if (this.destLobImpl === null) {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    } else {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.destLobImpl._locator.length);\n    }\n    buf.writeUB4(0);\n    buf.writeUB4(0);\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUInt8(0);\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP\n        || this.operation === constants.TNS_LOB_OP_IS_OPEN) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUB4(this.operation);\n    buf.writeUInt8(0);\n    buf.writeUInt8(0);\n    buf.writeUB8(this.sourceOffset);\n    buf.writeUB8(this.destOffset);\n    if (this.sendAmount) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    for (let i = 0; i < 3; i++) {\n      buf.writeUInt16BE(0);\n    }\n    if (this.sourceLobImpl) {\n      buf.writeBytes(this.sourceLobImpl._locator);\n    }\n    if (this.destLobImpl) {\n      buf.writeBytes(this.destLobImpl._locator);\n    }\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      if (this.sourceLobImpl.dbType._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        buf.writeUB4(constants.TNS_CHARSET_UTF16);\n      } else {\n        buf.writeUB4(constants.TNS_CHARSET_UTF8);\n      }\n    }\n    if (this.data) {\n      let data;\n      buf.writeUInt8(constants.TNS_MSG_TYPE_LOB_DATA);\n      if (this.sourceLobImpl.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n        data = this.data;\n      } else if (this.sourceLobImpl.getCsfrm() === constants.CSFRM_NCHAR) {\n        data = this.data;\n        // TODO: avoid conversion back to string, if possible\n        // this is since bind data is converted to buffer automatically, but if\n        // it exceeds 32K for PL/SQL it must be written as a temporary LOB\n        if (Buffer.isBuffer(this.data)) {\n          data = data.toString();\n        }\n        data = Buffer.from(data, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        data = Buffer.from(this.data);\n      }\n      buf.writeBytesWithLength(data);\n    }\n    if (this.sendAmount) {\n      buf.writeUB8(this.amount);\n    }\n  }\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_LOB_DATA) {\n      const oraTypeNum = this.sourceLobImpl.dbType._oraTypeNum;\n      let data = buf.readBytesWithLength();\n      if (data !== null) {\n        if (oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n          data = Buffer.from(data);\n        } else if (this.sourceLobImpl.getCsfrm() === constants.CSFRM_NCHAR) {\n          data = Buffer.from(data).swap16().toString('utf16le');\n        } else {\n          data = data.toString();\n        }\n      }\n      this.data = data;\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n\n  processReturnParameter(buf) {\n    let lobArray;\n    let locator;\n    let temp8;\n    let numBytes;\n    if (this.sourceLobImpl !== null) {\n      numBytes = this.sourceLobImpl._locator.length;\n      lobArray = buf.readBytes(numBytes);\n      locator = lobArray.slice(0, numBytes);\n      locator.copy(this.sourceLobImpl._locator);\n    }\n    if (this.destLobImpl !== null) {\n      numBytes = this.destLobImpl._locator.length;\n      lobArray = buf.readBytes(numBytes);\n      locator = lobArray.slice(0, numBytes);\n      locator.copy(this.destLobImpl._locator);\n    }\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      buf.skipUB2();        // skip character set\n      buf.skipBytes(3);     // skip trailing flags, amount\n    } else if (this.sendAmount) {\n      this.amount = buf.readSB8();\n    }\n    if (this.operation === constants.TNS_LOB_OP_IS_OPEN) {\n      temp8 = buf.readUB1();\n      this.boolFlag = temp8 > 0;\n    }\n  }\n\n}\n\nmodule.exports = LobOpMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}