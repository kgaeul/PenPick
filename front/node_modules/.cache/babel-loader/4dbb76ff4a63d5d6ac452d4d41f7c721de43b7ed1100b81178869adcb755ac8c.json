{"ast":null,"code":"// Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n\n//----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Lob = require('./lob.js');\nconst impl = require('./impl');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst util = require('util');\n\n// define base database object class; instances of this class are never\n// instantiated; instead, classes subclassed from this one will be\n// instantiated; a cache of these classes are maintained on each connection\nclass BaseDbObject {\n  //---------------------------------------------------------------------------\n  // _getAttrValue()\n  //\n  // Returns the value of the given attribute on the object.\n  //---------------------------------------------------------------------------\n  _getAttrValue(attr) {\n    const value = this._impl.getAttrValue(attr);\n    return this._transformValueOut(value, attr.typeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // _setAttrValue()\n  //\n  // Sets the value of the attribute on the object to the given value.\n  //---------------------------------------------------------------------------\n  _setAttrValue(attr, value) {\n    const info = {\n      fqn: this._objType.fqn,\n      attrName: attr.name,\n      type: attr.type,\n      typeClass: attr.typeClass\n    };\n    const options = {\n      allowArray: false\n    };\n    value = transformer.transformValueIn(info, value, options);\n    this._impl.setAttrValue(attr, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // _toPojo()\n  //\n  // Returns the database object as a plain Javascript object.\n  //---------------------------------------------------------------------------\n  _toPojo() {\n    if (this.isCollection) {\n      const result = this.getValues();\n      if (this.elementType === types.DB_TYPE_OBJECT) {\n        for (let i = 0; i < result.length; i++) {\n          result[i] = result[i]._toPojo();\n        }\n      }\n      return result;\n    }\n    const result = {};\n    for (const name in this.attributes) {\n      let value = this[name];\n      if (value instanceof BaseDbObject) {\n        value = value._toPojo();\n      }\n      result[name] = value;\n    }\n    return result;\n  }\n\n  //---------------------------------------------------------------------------\n  // _transformValueOut()\n  //\n  // Transforms a value going out to the caller from the implementation.\n  //---------------------------------------------------------------------------\n  _transformValueOut(value, cls) {\n    let outValue = value;\n    if (value instanceof impl.LobImpl) {\n      outValue = new Lob();\n      outValue._setup(value, true);\n    } else if (value instanceof impl.DbObjectImpl) {\n      outValue = Object.create(cls.prototype);\n      outValue._impl = value;\n      if (outValue.isCollection) {\n        outValue = new Proxy(outValue, BaseDbObject._collectionProxyHandler);\n      }\n    }\n    return outValue;\n  }\n\n  //---------------------------------------------------------------------------\n  // append()\n  //\n  // Appends an element to the collection.\n  //---------------------------------------------------------------------------\n  append(value) {\n    errors.assertArgCount(arguments, 1, 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {\n      allowArray: false\n    };\n    value = transformer.transformValueIn(info, value, options);\n    this._impl.append(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // attributes\n  //\n  // Property for the attributes stored on the object type.\n  //---------------------------------------------------------------------------\n  get attributes() {\n    if (!this._attributes) {\n      const implAttrs = this._objType.attributes || [];\n      const attrs = {};\n      for (let i = 0; i < implAttrs.length; i++) {\n        const implAttr = implAttrs[i];\n        const attr = {\n          type: implAttr.type,\n          typeName: implAttr.typeName\n        };\n        if (implAttr.typeClass) {\n          attr.typeClass = implAttr.typeClass;\n        }\n        attrs[implAttr.name] = attr;\n      }\n      this._attributes = attrs;\n    }\n    return this._attributes;\n  }\n\n  //---------------------------------------------------------------------------\n  // deleteElement()\n  //\n  // Deletes the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  deleteElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.deleteElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // elementType\n  //\n  // Property for the element type, if the database object type is a\n  // collection. It will be one of the DB_TYPE_ constants.\n  //---------------------------------------------------------------------------\n  get elementType() {\n    return this._objType.elementType;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeClass\n  //\n  // Property for the element type class, if the database object type is a\n  // collection and the elements in the collection refer to database objects.\n  //---------------------------------------------------------------------------\n  get elementTypeClass() {\n    return this._objType.elementTypeClass;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeName\n  //\n  // Property for the element type name, if the database object type is a\n  // collection.\n  //---------------------------------------------------------------------------\n  get elementTypeName() {\n    return this._objType.elementTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // fqn\n  //\n  // Property for the fully qualified name of the database object type in the\n  // form: <schema>.<name>.\n  //---------------------------------------------------------------------------\n  get fqn() {\n    return this._objType.fqn;\n  }\n\n  //---------------------------------------------------------------------------\n  // getElement()\n  //\n  // Returns the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  getElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const value = this._impl.getElement(index);\n    return this._transformValueOut(value, this.elementTypeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // getKeys()\n  //\n  // Returns an array of the keys of the collection.\n  //---------------------------------------------------------------------------\n  getKeys() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getKeys();\n  }\n\n  //---------------------------------------------------------------------------\n  // getFirstIndex()\n  //\n  // Returns the first index in the collection.\n  //---------------------------------------------------------------------------\n  getFirstIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getFirstIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastIndex()\n  //\n  // Returns the last index in the collection.\n  //---------------------------------------------------------------------------\n  getLastIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getLastIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getNextIndex()\n  //\n  // Returns the next index in the collection.\n  //---------------------------------------------------------------------------\n  getNextIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getNextIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getPrevIndex()\n  //\n  // Returns the previous index in the collection.\n  //---------------------------------------------------------------------------\n  getPrevIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getPrevIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getValues()\n  //\n  // Returns the elements in a collection.\n  //---------------------------------------------------------------------------\n  getValues() {\n    errors.assertArgCount(arguments, 0, 0);\n    const values = this._impl.getValues();\n    for (let i = 0; i < values.length; i++) {\n      values[i] = this._transformValueOut(values[i], this.elementTypeClass);\n    }\n    return values;\n  }\n\n  //---------------------------------------------------------------------------\n  // hasElement()\n  //\n  // Returns a boolean indicating if an element exists at the specified index.\n  //---------------------------------------------------------------------------\n  hasElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.hasElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // isCollection\n  //\n  // Property indicating if the object is a collection or not.\n  //---------------------------------------------------------------------------\n  get isCollection() {\n    return this._objType.isCollection;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the database object type.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._objType.name;\n  }\n\n  //---------------------------------------------------------------------------\n  // schema\n  //\n  // Property for the schema of the database object type.\n  //---------------------------------------------------------------------------\n  get schema() {\n    return this._objType.schema;\n  }\n\n  //---------------------------------------------------------------------------\n  // packageName\n  //\n  // Property for the packageName of the database object type.\n  //---------------------------------------------------------------------------\n  get packageName() {\n    return this._objType.packageName;\n  }\n\n  //---------------------------------------------------------------------------\n  // setElement()\n  //\n  // Sets the element in the collection at the specified index to the given\n  // value.\n  //---------------------------------------------------------------------------\n  setElement(index, value) {\n    errors.assertArgCount(arguments, 2, 2);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {\n      allowArray: false\n    };\n    value = transformer.transformValueIn(info, value, options);\n    this._impl.setElement(index, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // trim()\n  //\n  // Trims the specified number of elements from the end of the collection.\n  //---------------------------------------------------------------------------\n  trim(numToTrim) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(numToTrim) && numToTrim >= 0, 1);\n    this._impl.trim(numToTrim);\n  }\n\n  // custom inspection routine\n  [util.inspect.custom](depth, options) {\n    return '[' + this.fqn + '] ' + util.inspect(this._toPojo(), options);\n  }\n  [Symbol.iterator]() {\n    if (this.isCollection) {\n      const values = this.getValues();\n      return values[Symbol.iterator]();\n    }\n    throw TypeError(\"obj is not iterable\");\n  }\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return NaN;\n      default:\n        return '[' + this.fqn + '] ' + util.inspect(this._toPojo(), {});\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return this.fqn;\n  }\n  toJSON() {\n    return this._toPojo();\n  }\n}\n\n// method for transforming the error\nfunction transformErr(func) {\n  return function () {\n    try {\n      return func.apply(this, arguments);\n    } catch (err) {\n      throw errors.transformErr(err, errors.transformErr);\n    }\n  };\n}\n\n// method for wrapping the functions so that any errors thrown are transformed\nfunction wrapFns(proto) {\n  for (let i = 1; i < arguments.length; i++) {\n    const name = arguments[i];\n    proto[name] = transformErr(proto[name]);\n  }\n}\nwrapFns(BaseDbObject.prototype, \"_getAttrValue\", \"_setAttrValue\", \"append\", \"deleteElement\", \"getElement\", \"getKeys\", \"getFirstIndex\", \"getLastIndex\", \"getNextIndex\", \"getPrevIndex\", \"getValues\", \"hasElement\", \"setElement\", \"trim\");\n\n// define proxy handler used for collections\nBaseDbObject._collectionProxyHandler = {\n  deleteProperty(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return target.deleteElement(index);\n      }\n    }\n    return delete target[prop];\n  },\n  get(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return target.getElement(index);\n      }\n    }\n    const value = target[prop];\n    if (typeof value === 'function') {\n      return value.bind(target);\n    }\n    return value;\n  },\n  set(target, prop, value) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        target.setElement(index, value);\n        return true;\n      }\n    }\n    target[prop] = value;\n    return true;\n  }\n};\nmodule.exports = BaseDbObject;\n\n// load this after the module exports are set so that it is available\nconst transformer = require('./transformer.js');","map":{"version":3,"names":["Lob","require","impl","errors","types","util","BaseDbObject","_getAttrValue","attr","value","_impl","getAttrValue","_transformValueOut","typeClass","_setAttrValue","info","fqn","_objType","attrName","name","type","options","allowArray","transformer","transformValueIn","setAttrValue","_toPojo","isCollection","result","getValues","elementType","DB_TYPE_OBJECT","i","length","attributes","cls","outValue","LobImpl","_setup","DbObjectImpl","Object","create","prototype","Proxy","_collectionProxyHandler","append","assertArgCount","arguments","elementTypeClass","_attributes","implAttrs","attrs","implAttr","typeName","deleteElement","index","assertParamValue","Number","isInteger","elementTypeName","getElement","getKeys","getFirstIndex","getLastIndex","getNextIndex","getPrevIndex","values","hasElement","schema","packageName","setElement","trim","numToTrim","inspect","custom","depth","Symbol","iterator","TypeError","toPrimitive","hint","NaN","toStringTag","toJSON","transformErr","func","apply","err","wrapFns","proto","deleteProperty","target","prop","isNaN","get","bind","set","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/dbObject.js"],"sourcesContent":["// Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n\n//----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Lob = require('./lob.js');\nconst impl = require('./impl');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst util = require('util');\n\n// define base database object class; instances of this class are never\n// instantiated; instead, classes subclassed from this one will be\n// instantiated; a cache of these classes are maintained on each connection\nclass BaseDbObject {\n\n  //---------------------------------------------------------------------------\n  // _getAttrValue()\n  //\n  // Returns the value of the given attribute on the object.\n  //---------------------------------------------------------------------------\n  _getAttrValue(attr) {\n    const value = this._impl.getAttrValue(attr);\n    return this._transformValueOut(value, attr.typeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // _setAttrValue()\n  //\n  // Sets the value of the attribute on the object to the given value.\n  //---------------------------------------------------------------------------\n  _setAttrValue(attr, value) {\n    const info = {\n      fqn: this._objType.fqn,\n      attrName: attr.name,\n      type: attr.type,\n      typeClass: attr.typeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    this._impl.setAttrValue(attr, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // _toPojo()\n  //\n  // Returns the database object as a plain Javascript object.\n  //---------------------------------------------------------------------------\n  _toPojo() {\n    if (this.isCollection) {\n      const result = this.getValues();\n      if (this.elementType === types.DB_TYPE_OBJECT) {\n        for (let i = 0; i < result.length; i++) {\n          result[i] = result[i]._toPojo();\n        }\n      }\n      return (result);\n    }\n    const result = {};\n    for (const name in this.attributes) {\n      let value = this[name];\n      if (value instanceof BaseDbObject) {\n        value = value._toPojo();\n      }\n      result[name] = value;\n    }\n    return (result);\n  }\n\n  //---------------------------------------------------------------------------\n  // _transformValueOut()\n  //\n  // Transforms a value going out to the caller from the implementation.\n  //---------------------------------------------------------------------------\n  _transformValueOut(value, cls) {\n    let outValue = value;\n    if (value instanceof impl.LobImpl) {\n      outValue = new Lob();\n      outValue._setup(value, true);\n    } else if (value instanceof impl.DbObjectImpl) {\n      outValue = Object.create(cls.prototype);\n      outValue._impl = value;\n      if (outValue.isCollection) {\n        outValue = new Proxy(outValue, BaseDbObject._collectionProxyHandler);\n      }\n    }\n    return outValue;\n  }\n\n  //---------------------------------------------------------------------------\n  // append()\n  //\n  // Appends an element to the collection.\n  //---------------------------------------------------------------------------\n  append(value) {\n    errors.assertArgCount(arguments, 1, 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    this._impl.append(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // attributes\n  //\n  // Property for the attributes stored on the object type.\n  //---------------------------------------------------------------------------\n  get attributes() {\n    if (!this._attributes) {\n      const implAttrs = this._objType.attributes || [];\n      const attrs = {};\n      for (let i = 0; i < implAttrs.length; i++) {\n        const implAttr = implAttrs[i];\n        const attr = {\n          type: implAttr.type,\n          typeName: implAttr.typeName\n        };\n        if (implAttr.typeClass) {\n          attr.typeClass = implAttr.typeClass;\n        }\n        attrs[implAttr.name] = attr;\n      }\n      this._attributes = attrs;\n    }\n    return this._attributes;\n  }\n\n  //---------------------------------------------------------------------------\n  // deleteElement()\n  //\n  // Deletes the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  deleteElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.deleteElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // elementType\n  //\n  // Property for the element type, if the database object type is a\n  // collection. It will be one of the DB_TYPE_ constants.\n  //---------------------------------------------------------------------------\n  get elementType() {\n    return this._objType.elementType;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeClass\n  //\n  // Property for the element type class, if the database object type is a\n  // collection and the elements in the collection refer to database objects.\n  //---------------------------------------------------------------------------\n  get elementTypeClass() {\n    return this._objType.elementTypeClass;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeName\n  //\n  // Property for the element type name, if the database object type is a\n  // collection.\n  //---------------------------------------------------------------------------\n  get elementTypeName() {\n    return this._objType.elementTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // fqn\n  //\n  // Property for the fully qualified name of the database object type in the\n  // form: <schema>.<name>.\n  //---------------------------------------------------------------------------\n  get fqn() {\n    return this._objType.fqn;\n  }\n\n  //---------------------------------------------------------------------------\n  // getElement()\n  //\n  // Returns the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  getElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const value = this._impl.getElement(index);\n    return this._transformValueOut(value, this.elementTypeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // getKeys()\n  //\n  // Returns an array of the keys of the collection.\n  //---------------------------------------------------------------------------\n  getKeys() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getKeys();\n  }\n\n  //---------------------------------------------------------------------------\n  // getFirstIndex()\n  //\n  // Returns the first index in the collection.\n  //---------------------------------------------------------------------------\n  getFirstIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getFirstIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastIndex()\n  //\n  // Returns the last index in the collection.\n  //---------------------------------------------------------------------------\n  getLastIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getLastIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getNextIndex()\n  //\n  // Returns the next index in the collection.\n  //---------------------------------------------------------------------------\n  getNextIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getNextIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getPrevIndex()\n  //\n  // Returns the previous index in the collection.\n  //---------------------------------------------------------------------------\n  getPrevIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getPrevIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getValues()\n  //\n  // Returns the elements in a collection.\n  //---------------------------------------------------------------------------\n  getValues() {\n    errors.assertArgCount(arguments, 0, 0);\n    const values = this._impl.getValues();\n    for (let i = 0; i < values.length; i++) {\n      values[i] = this._transformValueOut(values[i], this.elementTypeClass);\n    }\n    return values;\n  }\n\n  //---------------------------------------------------------------------------\n  // hasElement()\n  //\n  // Returns a boolean indicating if an element exists at the specified index.\n  //---------------------------------------------------------------------------\n  hasElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.hasElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // isCollection\n  //\n  // Property indicating if the object is a collection or not.\n  //---------------------------------------------------------------------------\n  get isCollection() {\n    return this._objType.isCollection;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the database object type.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._objType.name;\n  }\n\n  //---------------------------------------------------------------------------\n  // schema\n  //\n  // Property for the schema of the database object type.\n  //---------------------------------------------------------------------------\n  get schema() {\n    return this._objType.schema;\n  }\n\n  //---------------------------------------------------------------------------\n  // packageName\n  //\n  // Property for the packageName of the database object type.\n  //---------------------------------------------------------------------------\n  get packageName() {\n    return this._objType.packageName;\n  }\n\n  //---------------------------------------------------------------------------\n  // setElement()\n  //\n  // Sets the element in the collection at the specified index to the given\n  // value.\n  //---------------------------------------------------------------------------\n  setElement(index, value) {\n    errors.assertArgCount(arguments, 2, 2);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    this._impl.setElement(index, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // trim()\n  //\n  // Trims the specified number of elements from the end of the collection.\n  //---------------------------------------------------------------------------\n  trim(numToTrim) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(numToTrim) && numToTrim >= 0, 1);\n    this._impl.trim(numToTrim);\n  }\n\n  // custom inspection routine\n  [util.inspect.custom](depth, options) {\n    return ('[' + this.fqn + '] ' + util.inspect(this._toPojo(), options));\n  }\n\n  [Symbol.iterator]() {\n    if (this.isCollection) {\n      const values = this.getValues();\n      return (values[Symbol.iterator]());\n    }\n    throw TypeError(\"obj is not iterable\");\n  }\n\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return (NaN);\n      default:\n        return ('[' + this.fqn + '] ' + util.inspect(this._toPojo(), {}));\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return (this.fqn);\n  }\n\n  toJSON() {\n    return (this._toPojo());\n  }\n\n}\n\n// method for transforming the error\nfunction transformErr(func) {\n  return function() {\n    try {\n      return func.apply(this, arguments);\n    } catch (err) {\n      throw errors.transformErr(err, errors.transformErr);\n    }\n  };\n}\n\n// method for wrapping the functions so that any errors thrown are transformed\nfunction wrapFns(proto) {\n  for (let i = 1; i < arguments.length; i++) {\n    const name = arguments[i];\n    proto[name] = transformErr(proto[name]);\n  }\n}\n\nwrapFns(BaseDbObject.prototype,\n  \"_getAttrValue\",\n  \"_setAttrValue\",\n  \"append\",\n  \"deleteElement\",\n  \"getElement\",\n  \"getKeys\",\n  \"getFirstIndex\",\n  \"getLastIndex\",\n  \"getNextIndex\",\n  \"getPrevIndex\",\n  \"getValues\",\n  \"hasElement\",\n  \"setElement\",\n  \"trim\"\n);\n\n// define proxy handler used for collections\nBaseDbObject._collectionProxyHandler = {\n\n  deleteProperty(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return (target.deleteElement(index));\n      }\n    }\n    return (delete target[prop]);\n  },\n\n  get(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return (target.getElement(index));\n      }\n    }\n    const value = target[prop];\n    if (typeof value === 'function') {\n      return (value.bind(target));\n    }\n    return (value);\n  },\n\n  set(target, prop, value) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        target.setElement(index, value);\n        return (true);\n      }\n    }\n    target[prop] = value;\n    return (true);\n  }\n\n};\n\nmodule.exports = BaseDbObject;\n\n// load this after the module exports are set so that it is available\nconst transformer = require('./transformer.js');\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}