{"ast":null,"code":"const oracledb = require('oracledb');\nconst fs = require('fs');\nconst dbConfig = {\n  user: 'khk2',\n  password: 'kh1234',\n  connectString: 'localhost:1521/XE'\n};\nasync function insertData() {\n  try {\n    const filePath = 'C:\\\\Users\\\\user1\\\\Desktop\\\\react-homepage\\\\fension.json';\n    const jsonData = fs.readFileSync(filePath, 'utf8');\n    const startIndex = jsonData.indexOf('[');\n    const endIndex = jsonData.lastIndexOf(']');\n    if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {\n      const filteredJsonData = jsonData.substring(startIndex, endIndex + 1);\n      let data;\n      try {\n        data = JSON.parse(filteredJsonData);\n      } catch (parseError) {\n        console.error('JSON 파싱 잘못됨:', parseError.message);\n        return;\n      }\n      const connection = await oracledb.getConnection(dbConfig);\n      for (const item of data) {\n        try {\n          //  \"명칭\" 뒤에 \"우편번호\"가 있을경우에만 넣을 수 있다.\n          if (item.명칭 && item.우편번호) {\n            const query = `\n                INSERT INTO fenstionss (name, postal_code, address)\n                VALUES (:name, :postal_code, :address)\n              `;\n            const binds = {\n              name: item.명칭,\n              postal_code: item.우편번호,\n              address: item.주소 || ''\n            };\n            await connection.execute(query, binds, {\n              autoCommit: true\n            });\n          }\n        } catch (insertError) {\n          console.error('데이터 넣을 수 없음:', insertError.message);\n        }\n      }\n      console.log('데이터 넣기 성공.');\n      await connection.close();\n    } else {\n      console.error('JSON 포멧이 잘못됨.');\n    }\n  } catch (err) {\n    console.error('Error:', err.message);\n  }\n}\ninsertData();","map":{"version":3,"names":["oracledb","require","fs","dbConfig","user","password","connectString","insertData","filePath","jsonData","readFileSync","startIndex","indexOf","endIndex","lastIndexOf","filteredJsonData","substring","data","JSON","parse","parseError","console","error","message","connection","getConnection","item","명칭","우편번호","query","binds","name","postal_code","address","주소","execute","autoCommit","insertError","log","close","err"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/front/src/App.js"],"sourcesContent":["const oracledb = require('oracledb');\nconst fs = require('fs');\n\nconst dbConfig = {\n  user: 'khk2',\n  password: 'kh1234',\n  connectString: 'localhost:1521/XE',\n};\nasync function insertData() {\n  try {\n    const filePath = 'C:\\\\Users\\\\user1\\\\Desktop\\\\react-homepage\\\\fension.json';\n    const jsonData = fs.readFileSync(filePath, 'utf8');\n    const startIndex = jsonData.indexOf('[');\n    const endIndex = jsonData.lastIndexOf(']');\n\n    if (startIndex !== -1 && endIndex !== -1 && startIndex < endIndex) {\n      const filteredJsonData = jsonData.substring(startIndex, endIndex + 1);\n      let data;\n\n      try {\n        data = JSON.parse(filteredJsonData);\n      } catch (parseError) {\n        console.error('JSON 파싱 잘못됨:', parseError.message);\n        return;\n      }\n\n      const connection = await oracledb.getConnection(dbConfig);\n\n      for (const item of data) {\n        try {\n          //  \"명칭\" 뒤에 \"우편번호\"가 있을경우에만 넣을 수 있다.\n          if (item.명칭 && item.우편번호) {\n            const query = `\n                INSERT INTO fenstionss (name, postal_code, address)\n                VALUES (:name, :postal_code, :address)\n              `;\n\n            const binds = {\n              name: item.명칭,\n              postal_code: item.우편번호,\n              address: item.주소 || '',\n            };\n\n            await connection.execute(query, binds, { autoCommit: true });\n          }\n        } catch (insertError) {\n          console.error('데이터 넣을 수 없음:', insertError.message);\n        }\n      }\n\n      console.log('데이터 넣기 성공.');\n\n      await connection.close();\n    } else {\n      console.error('JSON 포멧이 잘못됨.');\n    }\n  } catch (err) {\n    console.error('Error:', err.message);\n  }\n}\ninsertData();\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AAExB,MAAME,QAAQ,GAAG;EACfC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,QAAQ;EAClBC,aAAa,EAAE;AACjB,CAAC;AACD,eAAeC,UAAUA,CAAA,EAAG;EAC1B,IAAI;IACF,MAAMC,QAAQ,GAAG,yDAAyD;IAC1E,MAAMC,QAAQ,GAAGP,EAAE,CAACQ,YAAY,CAACF,QAAQ,EAAE,MAAM,CAAC;IAClD,MAAMG,UAAU,GAAGF,QAAQ,CAACG,OAAO,CAAC,GAAG,CAAC;IACxC,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,WAAW,CAAC,GAAG,CAAC;IAE1C,IAAIH,UAAU,KAAK,CAAC,CAAC,IAAIE,QAAQ,KAAK,CAAC,CAAC,IAAIF,UAAU,GAAGE,QAAQ,EAAE;MACjE,MAAME,gBAAgB,GAAGN,QAAQ,CAACO,SAAS,CAACL,UAAU,EAAEE,QAAQ,GAAG,CAAC,CAAC;MACrE,IAAII,IAAI;MAER,IAAI;QACFA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,gBAAgB,CAAC;MACrC,CAAC,CAAC,OAAOK,UAAU,EAAE;QACnBC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,UAAU,CAACG,OAAO,CAAC;QACjD;MACF;MAEA,MAAMC,UAAU,GAAG,MAAMxB,QAAQ,CAACyB,aAAa,CAACtB,QAAQ,CAAC;MAEzD,KAAK,MAAMuB,IAAI,IAAIT,IAAI,EAAE;QACvB,IAAI;UACF;UACA,IAAIS,IAAI,CAACC,EAAE,IAAID,IAAI,CAACE,IAAI,EAAE;YACxB,MAAMC,KAAK,GAAI;AAC3B;AACA;AACA,eAAe;YAEH,MAAMC,KAAK,GAAG;cACZC,IAAI,EAAEL,IAAI,CAACC,EAAE;cACbK,WAAW,EAAEN,IAAI,CAACE,IAAI;cACtBK,OAAO,EAAEP,IAAI,CAACQ,EAAE,IAAI;YACtB,CAAC;YAED,MAAMV,UAAU,CAACW,OAAO,CAACN,KAAK,EAAEC,KAAK,EAAE;cAAEM,UAAU,EAAE;YAAK,CAAC,CAAC;UAC9D;QACF,CAAC,CAAC,OAAOC,WAAW,EAAE;UACpBhB,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEe,WAAW,CAACd,OAAO,CAAC;QACpD;MACF;MAEAF,OAAO,CAACiB,GAAG,CAAC,YAAY,CAAC;MAEzB,MAAMd,UAAU,CAACe,KAAK,CAAC,CAAC;IAC1B,CAAC,MAAM;MACLlB,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;IAChC;EACF,CAAC,CAAC,OAAOkB,GAAG,EAAE;IACZnB,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEkB,GAAG,CAACjB,OAAO,CAAC;EACtC;AACF;AACAhB,UAAU,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}