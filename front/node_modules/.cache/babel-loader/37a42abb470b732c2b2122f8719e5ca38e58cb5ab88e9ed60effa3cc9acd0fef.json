{"ast":null,"code":"// Copyright (c) 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst BaseDbObject = require('./dbObject.js');\nconst {\n  Buffer\n} = require('buffer');\nconst Lob = require('./lob.js');\nconst ResultSet = require('./resultset.js');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst util = require('util');\nconst types = require('./types.js');\n\n//-----------------------------------------------------------------------------\n// checkType()\n//\n// Checks that the type of the data matches one of the given types. If the type\n// has not been specified yet, the first type is assumed to be the correct one.\n//\n// A failure to match results in an exception being thrown. The data in the\n// info parameter is used to determine which error should be thrown.\n//-----------------------------------------------------------------------------\nfunction checkType(info, options) {\n  if (info.type === undefined && arguments.length > 2) {\n    info.type = arguments[2];\n  } else {\n    let matches = false;\n    for (let i = 2; i < arguments.length; i++) {\n      if (info.type === arguments[i]) {\n        matches = true;\n        break;\n      }\n    }\n    if (!matches) {\n      if (info.attrName) {\n        errors.throwErr(errors.ERR_WRONG_VALUE_FOR_DBOBJECT_ATTR, info.attrName, info.fqn);\n      } else if (info.fqn) {\n        errors.throwErr(errors.ERR_WRONG_VALUE_FOR_DBOBJECT_ELEM, info.fqn);\n      } else if (info.isArray && info.name) {\n        errors.throwErr(errors.ERR_INCOMPATIBLE_TYPE_ARRAY_BIND, options.pos, info.name);\n      } else if (info.isArray) {\n        errors.throwErr(errors.ERR_INCOMPATIBLE_TYPE_ARRAY_INDEX_BIND, options.pos, info.pos);\n      } else {\n        errors.throwErr(errors.ERR_BIND_VALUE_AND_TYPE_MISMATCH);\n      }\n    }\n  }\n}\n\n//-----------------------------------------------------------------------------\n// transformJsonValue()\n//\n// Returns a normalized JSON value. Scalar values are returned unchanged.\n// Arrays are returned as a new array with transformed JSON values. Objects are\n// returned as new objects with keys \"fields\" and \"values\", both of which\n// are arrays (with the value transformed to JSON values).\n//-----------------------------------------------------------------------------\nfunction transformJsonValue(value) {\n  // handle simple scalars\n  if (value === undefined || value === null || typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean' || Buffer.isBuffer(value) || util.isDate(value)) return value;\n\n  // arrays are transformed to a new array with processed values\n  if (Array.isArray(value)) {\n    const outValue = new Array(value.length);\n    for (let i = 0; i < value.length; i++) {\n      outValue[i] = transformJsonValue(value[i]);\n    }\n    return outValue;\n  }\n\n  // database objects are treated as empty objects\n  if (value instanceof BaseDbObject) return {\n    fields: [],\n    values: []\n  };\n\n  // all other objects are transformed to an object with two arrays (fields\n  // and values)\n  const outValue = {};\n  outValue.fields = Object.getOwnPropertyNames(value);\n  outValue.values = new Array(outValue.fields.length);\n  for (let i = 0; i < outValue.fields.length; i++) {\n    outValue.values[i] = transformJsonValue(value[outValue.fields[i]]);\n  }\n  return outValue;\n}\n\n//-----------------------------------------------------------------------------\n// transformValueIn()\n//\n// Processes the value supplied by the caller and returns a normalized value,\n// if necessary, for use by the implementation. All checks are performed on the\n// value to ensure it is suitable for the type information supplied. If no type\n// information is supplied, however, the value defines it instead!\n//-----------------------------------------------------------------------------\nfunction transformValueIn(info, value, options) {\n  // null and undefined can always be set so nothing needs to be done\n  if (value === undefined || value === null) return undefined;\n\n  // handle setting plain JS values to database objects\n  if (info.type === types.DB_TYPE_OBJECT) {\n    let obj = value;\n    if (!(value instanceof BaseDbObject)) {\n      obj = new info.typeClass(value);\n    }\n    return obj._impl;\n\n    // handle setting plain JS values to JSON\n  } else if (info.type === types.DB_TYPE_JSON) {\n    return transformJsonValue(value);\n\n    // handle strings\n  } else if (typeof value === 'string') {\n    checkType(info, options, types.DB_TYPE_VARCHAR, types.DB_TYPE_NVARCHAR, types.DB_TYPE_CHAR, types.DB_TYPE_NCHAR, types.DB_TYPE_CLOB, types.DB_TYPE_NCLOB);\n    if (info.type !== types.DB_TYPE_CLOB && info.type !== types.DB_TYPE_NCLOB) {\n      const valueLen = Buffer.byteLength(value);\n      if (info.maxSize === undefined || valueLen > info.maxSize) {\n        if (info.checkSize) {\n          errors.throwErr(errors.ERR_MAX_SIZE_TOO_SMALL, info.maxSize, valueLen, options.pos);\n        }\n        info.maxSize = valueLen;\n      }\n    }\n    return value;\n\n    // handle numbers\n  } else if (typeof value === 'number') {\n    checkType(info, options, types.DB_TYPE_NUMBER, types.DB_TYPE_BINARY_INTEGER, types.DB_TYPE_BINARY_FLOAT, types.DB_TYPE_BINARY_DOUBLE);\n    if (Number.isNaN(value) && info.type === types.DB_TYPE_NUMBER) {\n      errors.throwErr(errors.ERR_NAN_VALUE);\n    }\n    return value;\n\n    // handle booleans\n  } else if (typeof value === 'boolean') {\n    checkType(info, options, types.DB_TYPE_BOOLEAN);\n    return value;\n\n    // handle dates\n  } else if (util.isDate(value)) {\n    checkType(info, options, types.DB_TYPE_TIMESTAMP, types.DB_TYPE_TIMESTAMP_TZ, types.DB_TYPE_TIMESTAMP_LTZ, types.DB_TYPE_DATE);\n    return value;\n\n    // handle binding buffers\n  } else if (Buffer.isBuffer(value)) {\n    checkType(info, options, types.DB_TYPE_RAW, types.DB_TYPE_BLOB);\n    if (info.type === types.DB_TYPE_RAW && (info.maxSize === undefined || value.length > info.maxSize)) {\n      if (info.checkSize) {\n        errors.throwErr(errors.ERR_MAX_SIZE_TOO_SMALL, info.maxSize, value.length, options.pos);\n      }\n      info.maxSize = value.length;\n    }\n    return value;\n\n    // handle result sets\n  } else if (value instanceof ResultSet) {\n    checkType(info, options, types.DB_TYPE_CURSOR);\n    return value._impl;\n\n    // handle binding LOBs\n  } else if (value instanceof Lob) {\n    checkType(info, options, value.type);\n    return value._impl;\n\n    // handle database objects\n  } else if (value instanceof BaseDbObject) {\n    checkType(info, options, types.DB_TYPE_OBJECT);\n    return value._impl;\n\n    // handle arrays\n  } else if (options.allowArray && Array.isArray(value)) {\n    info.isArray = true;\n    if (info.dir === constants.BIND_IN) {\n      info.maxArraySize = value.length || 1;\n    } else if (info.maxArraySize === undefined) {\n      errors.throwErr(errors.ERR_REQUIRED_MAX_ARRAY_SIZE);\n    } else if (value.length > info.maxArraySize) {\n      errors.throwErr(errors.ERR_INVALID_ARRAY_SIZE);\n    }\n    options.allowArray = false;\n    const transformed = new Array(value.length);\n    for (let i = 0; i < value.length; i++) {\n      options.pos = i;\n      transformed[i] = transformValueIn(info, value[i], options);\n    }\n    return transformed;\n  }\n\n  // no suitable bind value found\n  if (info.type === undefined) errors.throwErr(errors.ERR_INVALID_BIND_DATA_TYPE, 2);\n  checkType(info, options);\n}\n\n// define exports\nmodule.exports = {\n  transformJsonValue,\n  transformValueIn\n};","map":{"version":3,"names":["BaseDbObject","require","Buffer","Lob","ResultSet","constants","errors","util","types","checkType","info","options","type","undefined","arguments","length","matches","i","attrName","throwErr","ERR_WRONG_VALUE_FOR_DBOBJECT_ATTR","fqn","ERR_WRONG_VALUE_FOR_DBOBJECT_ELEM","isArray","name","ERR_INCOMPATIBLE_TYPE_ARRAY_BIND","pos","ERR_INCOMPATIBLE_TYPE_ARRAY_INDEX_BIND","ERR_BIND_VALUE_AND_TYPE_MISMATCH","transformJsonValue","value","isBuffer","isDate","Array","outValue","fields","values","Object","getOwnPropertyNames","transformValueIn","DB_TYPE_OBJECT","obj","typeClass","_impl","DB_TYPE_JSON","DB_TYPE_VARCHAR","DB_TYPE_NVARCHAR","DB_TYPE_CHAR","DB_TYPE_NCHAR","DB_TYPE_CLOB","DB_TYPE_NCLOB","valueLen","byteLength","maxSize","checkSize","ERR_MAX_SIZE_TOO_SMALL","DB_TYPE_NUMBER","DB_TYPE_BINARY_INTEGER","DB_TYPE_BINARY_FLOAT","DB_TYPE_BINARY_DOUBLE","Number","isNaN","ERR_NAN_VALUE","DB_TYPE_BOOLEAN","DB_TYPE_TIMESTAMP","DB_TYPE_TIMESTAMP_TZ","DB_TYPE_TIMESTAMP_LTZ","DB_TYPE_DATE","DB_TYPE_RAW","DB_TYPE_BLOB","DB_TYPE_CURSOR","allowArray","dir","BIND_IN","maxArraySize","ERR_REQUIRED_MAX_ARRAY_SIZE","ERR_INVALID_ARRAY_SIZE","transformed","ERR_INVALID_BIND_DATA_TYPE","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/transformer.js"],"sourcesContent":["// Copyright (c) 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst BaseDbObject = require('./dbObject.js');\nconst { Buffer } = require('buffer');\nconst Lob = require('./lob.js');\nconst ResultSet = require('./resultset.js');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst util = require('util');\nconst types = require('./types.js');\n\n//-----------------------------------------------------------------------------\n// checkType()\n//\n// Checks that the type of the data matches one of the given types. If the type\n// has not been specified yet, the first type is assumed to be the correct one.\n//\n// A failure to match results in an exception being thrown. The data in the\n// info parameter is used to determine which error should be thrown.\n//-----------------------------------------------------------------------------\nfunction checkType(info, options) {\n  if (info.type === undefined && arguments.length > 2) {\n    info.type = arguments[2];\n  } else {\n    let matches = false;\n    for (let i = 2; i < arguments.length; i++) {\n      if (info.type === arguments[i]) {\n        matches = true;\n        break;\n      }\n    }\n    if (!matches) {\n      if (info.attrName) {\n        errors.throwErr(errors.ERR_WRONG_VALUE_FOR_DBOBJECT_ATTR,\n          info.attrName, info.fqn);\n      } else if (info.fqn) {\n        errors.throwErr(errors.ERR_WRONG_VALUE_FOR_DBOBJECT_ELEM, info.fqn);\n      } else if (info.isArray && info.name) {\n        errors.throwErr(errors.ERR_INCOMPATIBLE_TYPE_ARRAY_BIND, options.pos,\n          info.name);\n      } else if (info.isArray) {\n        errors.throwErr(errors.ERR_INCOMPATIBLE_TYPE_ARRAY_INDEX_BIND,\n          options.pos, info.pos);\n      } else {\n        errors.throwErr(errors.ERR_BIND_VALUE_AND_TYPE_MISMATCH);\n      }\n    }\n  }\n}\n\n//-----------------------------------------------------------------------------\n// transformJsonValue()\n//\n// Returns a normalized JSON value. Scalar values are returned unchanged.\n// Arrays are returned as a new array with transformed JSON values. Objects are\n// returned as new objects with keys \"fields\" and \"values\", both of which\n// are arrays (with the value transformed to JSON values).\n//-----------------------------------------------------------------------------\nfunction transformJsonValue(value) {\n\n  // handle simple scalars\n  if (value === undefined || value === null ||\n      typeof value === 'number' || typeof value === 'string' ||\n      typeof value === 'boolean' || Buffer.isBuffer(value) ||\n      util.isDate(value))\n    return value;\n\n  // arrays are transformed to a new array with processed values\n  if (Array.isArray(value)) {\n    const outValue = new Array(value.length);\n    for (let i = 0; i < value.length; i++) {\n      outValue[i] = transformJsonValue(value[i]);\n    }\n    return outValue;\n  }\n\n  // database objects are treated as empty objects\n  if (value instanceof BaseDbObject)\n    return {fields: [], values: []};\n\n  // all other objects are transformed to an object with two arrays (fields\n  // and values)\n  const outValue = {};\n  outValue.fields = Object.getOwnPropertyNames(value);\n  outValue.values = new Array(outValue.fields.length);\n  for (let i = 0; i < outValue.fields.length; i++) {\n    outValue.values[i] = transformJsonValue(value[outValue.fields[i]]);\n  }\n  return outValue;\n\n}\n\n//-----------------------------------------------------------------------------\n// transformValueIn()\n//\n// Processes the value supplied by the caller and returns a normalized value,\n// if necessary, for use by the implementation. All checks are performed on the\n// value to ensure it is suitable for the type information supplied. If no type\n// information is supplied, however, the value defines it instead!\n//-----------------------------------------------------------------------------\nfunction transformValueIn(info, value, options) {\n\n  // null and undefined can always be set so nothing needs to be done\n  if (value === undefined || value === null)\n    return undefined;\n\n  // handle setting plain JS values to database objects\n  if (info.type === types.DB_TYPE_OBJECT) {\n    let obj = value;\n    if (!(value instanceof BaseDbObject)) {\n      obj = new info.typeClass(value);\n    }\n    return obj._impl;\n\n  // handle setting plain JS values to JSON\n  } else if (info.type === types.DB_TYPE_JSON) {\n    return transformJsonValue(value);\n\n  // handle strings\n  } else if (typeof value === 'string') {\n    checkType(info, options,\n      types.DB_TYPE_VARCHAR,\n      types.DB_TYPE_NVARCHAR,\n      types.DB_TYPE_CHAR,\n      types.DB_TYPE_NCHAR,\n      types.DB_TYPE_CLOB,\n      types.DB_TYPE_NCLOB);\n    if (info.type !== types.DB_TYPE_CLOB &&\n        info.type !== types.DB_TYPE_NCLOB) {\n      const valueLen = Buffer.byteLength(value);\n      if (info.maxSize === undefined || valueLen > info.maxSize) {\n        if (info.checkSize) {\n          errors.throwErr(errors.ERR_MAX_SIZE_TOO_SMALL, info.maxSize,\n            valueLen, options.pos);\n        }\n        info.maxSize = valueLen;\n      }\n    }\n    return value;\n\n  // handle numbers\n  } else if (typeof value === 'number') {\n    checkType(info, options,\n      types.DB_TYPE_NUMBER,\n      types.DB_TYPE_BINARY_INTEGER,\n      types.DB_TYPE_BINARY_FLOAT,\n      types.DB_TYPE_BINARY_DOUBLE);\n    if (Number.isNaN(value) && info.type === types.DB_TYPE_NUMBER) {\n      errors.throwErr(errors.ERR_NAN_VALUE);\n    }\n    return value;\n\n  // handle booleans\n  } else if (typeof value === 'boolean') {\n    checkType(info, options, types.DB_TYPE_BOOLEAN);\n    return value;\n\n  // handle dates\n  } else if (util.isDate(value)) {\n    checkType(info, options,\n      types.DB_TYPE_TIMESTAMP,\n      types.DB_TYPE_TIMESTAMP_TZ,\n      types.DB_TYPE_TIMESTAMP_LTZ,\n      types.DB_TYPE_DATE);\n    return value;\n\n  // handle binding buffers\n  } else if (Buffer.isBuffer(value)) {\n    checkType(info, options,\n      types.DB_TYPE_RAW,\n      types.DB_TYPE_BLOB);\n    if (info.type === types.DB_TYPE_RAW &&\n        (info.maxSize === undefined || value.length > info.maxSize)) {\n      if (info.checkSize) {\n        errors.throwErr(errors.ERR_MAX_SIZE_TOO_SMALL, info.maxSize,\n          value.length, options.pos);\n      }\n      info.maxSize = value.length;\n    }\n    return value;\n\n  // handle result sets\n  } else if (value instanceof ResultSet) {\n    checkType(info, options, types.DB_TYPE_CURSOR);\n    return value._impl;\n\n  // handle binding LOBs\n  } else if (value instanceof Lob) {\n    checkType(info, options, value.type);\n    return value._impl;\n\n  // handle database objects\n  } else if (value instanceof BaseDbObject) {\n    checkType(info, options, types.DB_TYPE_OBJECT);\n    return value._impl;\n\n  // handle arrays\n  } else if (options.allowArray && Array.isArray(value)) {\n    info.isArray = true;\n    if (info.dir === constants.BIND_IN) {\n      info.maxArraySize = value.length || 1;\n    } else if (info.maxArraySize === undefined) {\n      errors.throwErr(errors.ERR_REQUIRED_MAX_ARRAY_SIZE);\n    } else if (value.length > info.maxArraySize) {\n      errors.throwErr(errors.ERR_INVALID_ARRAY_SIZE);\n    }\n    options.allowArray = false;\n    const transformed = new Array(value.length);\n    for (let i = 0; i < value.length; i++) {\n      options.pos = i;\n      transformed[i] = transformValueIn(info, value[i], options);\n    }\n    return transformed;\n  }\n\n  // no suitable bind value found\n  if (info.type === undefined)\n    errors.throwErr(errors.ERR_INVALID_BIND_DATA_TYPE, 2);\n  checkType(info, options);\n\n}\n\n// define exports\nmodule.exports = {\n  transformJsonValue,\n  transformValueIn\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}