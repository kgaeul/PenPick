{"ast":null,"code":"// Copyright (c) 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('./errors.js');\n\n// future object used for managing backwards incompatible changes.\nclass Future {\n  constructor() {\n    this._featureFlags = {};\n    this._featureFlags.oldJsonColumnAsObj = false;\n  }\n  get oldJsonColumnAsObj() {\n    return this._featureFlags.oldJsonColumnAsObj;\n  }\n\n  // fetch VARCHAR2 and LOB columns that contain JSON data (and have\n  // the \"IS JSON\" constraint enabled) in the same way that columns\n  // of type JSON (which requires Oracle Database 21 and higher) are fetched.\n  set oldJsonColumnAsObj(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"oldJsonColumnAsObj\");\n    this._featureFlags.oldJsonColumnAsObj = value;\n  }\n}\nmodule.exports = new Future();","map":{"version":3,"names":["errors","require","Future","constructor","_featureFlags","oldJsonColumnAsObj","value","assertPropValue","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/future.js"],"sourcesContent":["// Copyright (c) 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('./errors.js');\n\n// future object used for managing backwards incompatible changes.\nclass Future {\n\n  constructor() {\n    this._featureFlags = {};\n    this._featureFlags.oldJsonColumnAsObj = false;\n  }\n\n  get oldJsonColumnAsObj() {\n    return this._featureFlags.oldJsonColumnAsObj;\n  }\n\n  // fetch VARCHAR2 and LOB columns that contain JSON data (and have\n  // the \"IS JSON\" constraint enabled) in the same way that columns\n  // of type JSON (which requires Oracle Database 21 and higher) are fetched.\n  set oldJsonColumnAsObj(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"oldJsonColumnAsObj\");\n    this._featureFlags.oldJsonColumnAsObj = value;\n  }\n\n}\n\nmodule.exports = new Future;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAErC;AACA,MAAMC,MAAM,CAAC;EAEXC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACA,aAAa,CAACC,kBAAkB,GAAG,KAAK;EAC/C;EAEA,IAAIA,kBAAkBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACD,aAAa,CAACC,kBAAkB;EAC9C;;EAEA;EACA;EACA;EACA,IAAIA,kBAAkBA,CAACC,KAAK,EAAE;IAC5BN,MAAM,CAACO,eAAe,CAAC,OAAOD,KAAK,KAAK,SAAS,EAAE,oBAAoB,CAAC;IACxE,IAAI,CAACF,aAAa,CAACC,kBAAkB,GAAGC,KAAK;EAC/C;AAEF;AAEAE,MAAM,CAACC,OAAO,GAAG,IAAIP,MAAM,CAAD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}