{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\n\n/**\n *\n * Base class for all the RPC messages to support encode/decode functions\n */\nclass Message {\n  constructor(connection) {\n    this.errorInfo = {};\n    this.connection = connection;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.functionCode = 0;\n    this.callStatus = 0;\n    this.flushOutBinds = false;\n    this.endToEndSeqNum = 0;\n    this.errorOccurred = false;\n    this.flushOutBinds = false;\n    this.processedError = false;\n    this.warning = undefined;\n  }\n  preProcess() {}\n  async postProcess() {}\n  writeFunctionHeader(buf) {\n    buf.writeUInt8(this.messageType);\n    buf.writeUInt8(this.functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0); // token number\n    }\n  }\n  processErrorInfo(buf) {\n    this.callStatus = buf.readUB4(); // end of call status\n    buf.skipUB2(); // end to end seq number\n    buf.skipUB4(); // current row number\n    buf.skipUB2(); // error number\n    buf.skipUB2(); // array elem error\n    buf.skipUB2(); // array elem error\n    this.errorInfo.cursorId = buf.readUB2(); // cursor id\n    const errorPos = buf.readSB2(); // error position\n    buf.skipUB1(); // sql type (19c and earlier)\n    buf.skipUB1(); // fatal ?\n    buf.skipUB1(); // flags\n    buf.skipUB1(); // user cursor options\n    buf.skipUB1(); // UPI parameter\n    const warnFlag = buf.readUInt8(); // warning flag\n    if (warnFlag & constants.TNS_WARN_COMPILATION_CREATE) {\n      this.warning = errors.getErr(errors.WRN_COMPILATION_CREATE);\n    }\n    this.errorInfo.rowID = buf.readRowID(); // rowid\n    buf.skipUB4(); // OS error\n    buf.skipUB1(); // statement error\n    buf.skipUB1(); // call number\n    buf.skipUB2(); // padding\n    buf.skipUB4(); // success iters\n    const numBytes = buf.readUB4(); // oerrdd (logical rowid)\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n    // batch error codes\n    let numEntries = buf.readUB2(); // batch error codes array\n    if (numEntries > 0) {\n      this.errorInfo.batchErrors = [];\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4(); // chunk length ignored\n        }\n        const errorCode = buf.readUB2();\n        this.errorInfo.batchErrors.push(new Error(errorCode));\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1); // ignore end marker\n      }\n    }\n\n    // batch error offset\n    numEntries = buf.readUB2(); // batch error row offset array\n    if (numEntries > 0) {\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4(); // chunk length ignored\n        }\n        this.errorInfo.batchErrors[i].offset = buf.readUB4();\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1); // ignore end marker\n      }\n    }\n\n    // batch error messages\n    numEntries = buf.readUB2(); // batch error messages array\n    if (numEntries > 0) {\n      buf.skipBytes(1); // ignore packed size\n      for (let i = 0; i < numEntries; i++) {\n        buf.skipUB2(); // skip chunk length\n\n        this.errorInfo.batchErrors[i].message = buf.readStr(constants.CSFRM_IMPLICIT);\n        buf.skipBytes(2); // ignore end marker\n      }\n    }\n    this.errorInfo.num = buf.readUB4(); // error number (extended)\n    this.errorInfo.rowCount = buf.readUB8(); // row number (extended)\n\n    // fields added in Oracle Database 20c\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_20_1) {\n      buf.skipUB4(); // sql type\n      buf.skipUB4(); // server checksum\n    }\n\n    // error message\n    if (this.errorInfo.num !== 0) {\n      this.errorOccurred = true;\n      if (errorPos >= 0) {\n        this.errorInfo.pos = errorPos;\n      }\n      this.errorInfo.message = buf.readStr(constants.CSFRM_IMPLICIT);\n      /*\n       * Remove ending newline from ORA error message\n       */\n      this.errorInfo.message = this.errorInfo.message.trim();\n    }\n    this.processedError = true;\n  }\n  processReturnParameter() {}\n  processWarningInfo(buf) {\n    const errNum = buf.readUB2(); // warning number\n    const numBytes = buf.readUB2(); // length of warning message\n    buf.skipUB2(); // flags\n    if (errNum != 0 && numBytes > 0) {\n      // get message string and remove the ending newline.\n      const message = buf.readStr(constants.CSFRM_IMPLICIT).trim();\n      this.warning = new Error(message);\n      this.warning.errorNum = errNum;\n    }\n  }\n  hasMoreData(buf) {\n    return buf.numBytesLeft() > 0 && !this.flushOutBinds;\n  }\n  decode(buf) {\n    this.process(buf);\n  }\n  process(buf) {\n    this.flushOutBinds = false;\n    this.processedError = false;\n    do {\n      this.savePoint(buf);\n      const messageType = buf.readUInt8();\n      this.processMessage(buf, messageType);\n    } while (this.hasMoreData(buf));\n  }\n  savePoint(buf) {\n    buf.savePoint();\n  }\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_WARNING) {\n      this.processWarningInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_STATUS) {\n      this.callStatus = buf.readUB4();\n      this.endToEndSeqNum = buf.readUB2();\n    } else if (messageType === constants.TNS_MSG_TYPE_PARAMETER) {\n      this.processReturnParameter(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK) {\n      this.processServerSidePiggyBack(buf);\n    } else {\n      errors.throwErr(errors.ERR_UNEXPECTED_MESSAGE_TYPE, messageType, buf.pos, buf.packetNum);\n    }\n  }\n  processServerSidePiggyBack(buf) {\n    const opcode = buf.readUInt8();\n    if (opcode === constants.TNS_SERVER_PIGGYBACK_LTXID) {\n      const num_bytes = buf.readUB4();\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION || opcode === constants.TNS_SERVER_PIGGYBACK_TRACE_EVENT) {\n      // pass\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_OS_PID_MTS) {\n      const numDtys = buf.readUB2();\n      buf.skipUB1();\n      buf.skipBytes(numDtys);\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SYNC) {\n      buf.skipUB2(); // skip number of DTYs\n      buf.skipUB1(); // skip length of DTYs\n      const num_elements = buf.readUB4();\n      buf.skipBytes(1); // skip length\n      for (let i = 0; i < num_elements; i++) {\n        let temp16 = buf.readUB2();\n        if (temp16 > 0) {\n          // skip key\n          buf.skipBytesChunked();\n        }\n        temp16 = buf.readUB2();\n        if (temp16 > 0) {\n          // skip value\n          buf.skipBytesChunked();\n        }\n        buf.skipUB2(); // skip flags\n      }\n      buf.skipUB4(); // skip overall flags\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_EXT_SYNC) {\n      buf.skipUB2();\n      buf.skipUB1();\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT) {\n      buf.skipUB2(); // skip number of DTYs\n      buf.skipUB1(); // skip length of DTYs\n      buf.skipUB4(); // skip flags\n      buf.skipUB4(); // skip error code\n      buf.skipUB1(); // skip queue\n      const num_bytes = buf.readUB4(); // skip replay context\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SESS_RET) {\n      buf.skipUB2();\n      buf.skipUB1();\n      const num_elements = buf.readUB2();\n      if (num_elements > 0) {\n        buf.skipUB1();\n        for (let i = 0; i < num_elements; ++i) {\n          let temp16 = buf.readUB2();\n          if (temp16 > 0) {\n            // skip key\n            buf.skipBytesChunked();\n          }\n          temp16 = buf.readUB2();\n          if (temp16 > 0) {\n            // skip value\n            buf.skipBytesChunked();\n          }\n          buf.skipUB2(); // skip flags\n        }\n      }\n      const flags = buf.readUB4(); // session flags\n      if (flags & constants.TNS_SESSGET_SESSION_CHANGED) {\n        if (this.connection._drcpEstablishSession) {\n          this.connection.resetStatementCache();\n        }\n      }\n      this.connection._drcpEstablishSession = false;\n      buf.skipUB4(); // session id\n      buf.skipUB2(); // serial number\n    } else {\n      errors.throwErr(errors.ERR_UNKOWN_SERVER_SIDE_PIGGYBACK, opcode);\n    }\n  }\n  writePiggybacks(buf) {\n    if (this.connection._currentSchemaModified) {\n      this._writeCurrentSchemaPiggyback(buf);\n    }\n    if (this.connection._cursorsToClose.size > 0 && !this.connection._drcpEstablishSession) {\n      this.writeCloseCursorsPiggyBack(buf);\n    }\n    if (this.connection._actionModified || this.connection._clientIdentifierModified || this.connection._dbopModified || this.connection._clientInfoModified || this.connection._moduleModified) {\n      this._writeEndToEndPiggybacks(buf);\n    }\n    if (this.connection._tempLobsTotalSize > 0) {\n      this.writeCloseTempLobsPiggyback(buf);\n    }\n  }\n  writePiggybackHeader(buf, functionCode) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_PIGGYBACK);\n    buf.writeUInt8(functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0); // token number\n    }\n  }\n  writeCloseCursorsPiggyBack(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_CLOSE_CURSORS);\n    buf.writeUInt8(1);\n    buf.writeUB4(this.connection._cursorsToClose.size);\n    for (const cursorNum of this.connection._cursorsToClose.keys()) {\n      buf.writeUB4(cursorNum);\n    }\n    this.connection._cursorsToClose.clear();\n  }\n  writeCloseTempLobsPiggyback(buf) {\n    const lobsToClose = this.connection._tempLobsToClose;\n    const opCode = constants.TNS_LOB_OP_FREE_TEMP | constants.TNS_LOB_OP_ARRAY;\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_LOB_OP);\n    buf.writeUInt8(1); // pointer\n    buf.writeUB4(this.connection._tempLobsTotalSize);\n    buf.writeUInt8(0); // dest LOB locator\n    buf.writeUB4(0);\n    buf.writeUB4(0); // source LOB locator\n    buf.writeUB4(0);\n    buf.writeUInt8(0); // source LOB offset\n    buf.writeUInt8(0); // dest LOB offset\n    buf.writeUInt8(0); // charset\n    buf.writeUB4(opCode);\n    buf.writeUInt8(0); // scn\n    buf.writeUB4(0); // LOB scn\n    buf.writeUB8(0); // LOB scnl\n    buf.writeUB8(0);\n    buf.writeUInt8(0);\n\n    // array LOB fields\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    for (const val of lobsToClose) {\n      buf.writeBytes(val);\n    }\n\n    // Reset Values\n    this.connection._tempLobsToClose = [];\n    this.connection._tempLobsTotalSize = 0;\n  }\n  _writeCurrentSchemaPiggyback(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_SCHEMA);\n    buf.writeUInt8(1);\n    const bytes = Buffer.byteLength(this.connection.currentSchema);\n    buf.writeUB4(bytes);\n    buf.writeBytesWithLength(Buffer.from(this.connection.currentSchema));\n  }\n  _writeEndToEndPiggybacks(buf) {\n    let flags = 0;\n\n    // determine which flags to send\n    if (this.connection._actionModified) {\n      flags |= constants.TNS_END_TO_END_ACTION;\n    }\n    if (this.connection._clientIdentifierModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_IDENTIFIER;\n    }\n    if (this.connection._clientInfoModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_INFO;\n    }\n    if (this.connection._moduleModified) {\n      flags |= constants.TNS_END_TO_END_MODULE;\n    }\n    if (this.connection._dbOpModified) {\n      flags |= constants.TNS_END_TO_END_DBOP;\n    }\n\n    // write initial packet data\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_END_TO_END_ATTR);\n    buf.writeUInt8(0); // pointer (cidnam)\n    buf.writeUInt8(0); // pointer (cidser)\n    buf.writeUB4(flags);\n    const clientIdentifierBytes = this.writeEndEndTraceValue(buf, this.connection._clientIdentifier, this.connection._clientIdentifierModified);\n    const moduleBytes = this.writeEndEndTraceValue(buf, this.connection._module, this.connection._moduleModified);\n    const actionBytes = this.writeEndEndTraceValue(buf, this.connection._action, this.connection._actionModified);\n\n    // write unsupported bits\n    buf.writeUInt8(0); // pointer (cideci)\n    buf.writeUB4(0); // length (cideci)\n    buf.writeUInt8(0); // cidcct\n    buf.writeUB4(0); // cidecs\n\n    const clientInfoBytes = this.writeEndEndTraceValue(buf, this.connection._clientInfo, this.connection._clientInfoModified);\n    // write unsupported bits\n    buf.writeUInt8(0); // pointer (cideci)\n    buf.writeUB4(0); // length (cideci)\n    buf.writeUInt8(0); // cidcct\n    buf.writeUB4(0); // cidecs\n    const dbOpBytes = this.writeEndEndTraceValue(buf, this.connection._dbOp, this.connection._dbOpModified);\n\n    // write strings\n    if (this.connection._clientIdentifierModified && this.connection._clientIdentifier) {\n      buf.writeBytesWithLength(clientIdentifierBytes);\n    }\n    if (this.connection._moduleModified && this.connection._module) {\n      buf.writeBytesWithLength(moduleBytes);\n    }\n    if (this.connection._actionModified && this.connection._action) {\n      buf.writeBytesWithLength(actionBytes);\n    }\n    if (this.connection._clientInfoModified && this.connection._clientInfo) {\n      buf.writeBytesWithLength(clientInfoBytes);\n    }\n    if (this.connection._dbOpModified && this.connection._dbOp) {\n      buf.writeBytesWithLength(dbOpBytes);\n    }\n\n    // reset flags and values\n    this.connection._actionModified = false;\n    this.connection._action = \"\";\n    this.connection._clientIdentifierModified = false;\n    this.connection._clientIdentifier = \"\";\n    this.connection._clientInfoModified = false;\n    this.connection._clientInfo = \"\";\n    this.connection._dbOpModified = false;\n    this.connection._dbOp = \"\";\n    this.connection._moduleModified = false;\n    this.connection._module = \"\";\n  }\n  writeEndEndTraceValue(buf, value, modified) {\n    // write client identifier header info\n    let writtenBytes;\n    if (modified) {\n      buf.writeUInt8(1); // pointer (client identifier)\n      if (value) {\n        writtenBytes = Buffer.from(value);\n        buf.writeUB4(writtenBytes.length);\n      } else {\n        buf.writeUB4(0);\n      }\n    } else {\n      buf.writeUInt8(0); // pointer (client identifier)\n      buf.writeUB4(0); // length of client identifier\n    }\n    return writtenBytes;\n  }\n\n  // Called when an error is encountered during decode of RPC\n  saveDeferredErr() {\n    if (!this.deferredErr) {\n      this.deferredErr = errors.getErr(...arguments);\n    }\n  }\n}\nmodule.exports = Message;","map":{"version":3,"names":["Buffer","require","constants","errors","Message","constructor","connection","errorInfo","messageType","TNS_MSG_TYPE_FUNCTION","functionCode","callStatus","flushOutBinds","endToEndSeqNum","errorOccurred","processedError","warning","undefined","preProcess","postProcess","writeFunctionHeader","buf","writeUInt8","writeSeqNum","caps","ttcFieldVersion","TNS_CCAP_FIELD_VERSION_23_1_EXT_1","writeUB8","processErrorInfo","readUB4","skipUB2","skipUB4","cursorId","readUB2","errorPos","readSB2","skipUB1","warnFlag","readUInt8","TNS_WARN_COMPILATION_CREATE","getErr","WRN_COMPILATION_CREATE","rowID","readRowID","numBytes","skipBytesChunked","numEntries","batchErrors","firstByte","i","TNS_LONG_LENGTH_INDICATOR","errorCode","push","Error","skipBytes","offset","message","readStr","CSFRM_IMPLICIT","num","rowCount","readUB8","TNS_CCAP_FIELD_VERSION_20_1","pos","trim","processReturnParameter","processWarningInfo","errNum","errorNum","hasMoreData","numBytesLeft","decode","process","savePoint","processMessage","TNS_MSG_TYPE_ERROR","TNS_MSG_TYPE_WARNING","TNS_MSG_TYPE_STATUS","TNS_MSG_TYPE_PARAMETER","TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK","processServerSidePiggyBack","throwErr","ERR_UNEXPECTED_MESSAGE_TYPE","packetNum","opcode","TNS_SERVER_PIGGYBACK_LTXID","num_bytes","TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION","TNS_SERVER_PIGGYBACK_TRACE_EVENT","TNS_SERVER_PIGGYBACK_OS_PID_MTS","numDtys","TNS_SERVER_PIGGYBACK_SYNC","num_elements","temp16","TNS_SERVER_PIGGYBACK_EXT_SYNC","TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT","TNS_SERVER_PIGGYBACK_SESS_RET","flags","TNS_SESSGET_SESSION_CHANGED","_drcpEstablishSession","resetStatementCache","ERR_UNKOWN_SERVER_SIDE_PIGGYBACK","writePiggybacks","_currentSchemaModified","_writeCurrentSchemaPiggyback","_cursorsToClose","size","writeCloseCursorsPiggyBack","_actionModified","_clientIdentifierModified","_dbopModified","_clientInfoModified","_moduleModified","_writeEndToEndPiggybacks","_tempLobsTotalSize","writeCloseTempLobsPiggyback","writePiggybackHeader","TNS_MSG_TYPE_PIGGYBACK","TNS_FUNC_CLOSE_CURSORS","writeUB4","cursorNum","keys","clear","lobsToClose","_tempLobsToClose","opCode","TNS_LOB_OP_FREE_TEMP","TNS_LOB_OP_ARRAY","TNS_FUNC_LOB_OP","val","writeBytes","TNS_FUNC_SET_SCHEMA","bytes","byteLength","currentSchema","writeBytesWithLength","from","TNS_END_TO_END_ACTION","TNS_END_TO_END_CLIENT_IDENTIFIER","TNS_END_TO_END_CLIENT_INFO","TNS_END_TO_END_MODULE","_dbOpModified","TNS_END_TO_END_DBOP","TNS_FUNC_SET_END_TO_END_ATTR","clientIdentifierBytes","writeEndEndTraceValue","_clientIdentifier","moduleBytes","_module","actionBytes","_action","clientInfoBytes","_clientInfo","dbOpBytes","_dbOp","value","modified","writtenBytes","length","saveDeferredErr","deferredErr","arguments","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/protocol/messages/base.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\n\n/**\n *\n * Base class for all the RPC messages to support encode/decode functions\n */\nclass Message {\n  constructor(connection) {\n    this.errorInfo = {};\n    this.connection = connection;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.functionCode = 0;\n    this.callStatus = 0;\n    this.flushOutBinds = false;\n    this.endToEndSeqNum = 0;\n    this.errorOccurred = false;\n    this.flushOutBinds = false;\n    this.processedError = false;\n    this.warning = undefined;\n  }\n\n  preProcess() { }\n  async postProcess() { }\n\n  writeFunctionHeader(buf) {\n    buf.writeUInt8(this.messageType);\n    buf.writeUInt8(this.functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0);                          // token number\n    }\n  }\n\n  processErrorInfo(buf) {\n    this.callStatus = buf.readUB4();            // end of call status\n    buf.skipUB2();                              // end to end seq number\n    buf.skipUB4();                              // current row number\n    buf.skipUB2();                              // error number\n    buf.skipUB2();                              // array elem error\n    buf.skipUB2();                              // array elem error\n    this.errorInfo.cursorId = buf.readUB2();    // cursor id\n    const errorPos = buf.readSB2();             // error position\n    buf.skipUB1();                              // sql type (19c and earlier)\n    buf.skipUB1();                              // fatal ?\n    buf.skipUB1();                              // flags\n    buf.skipUB1();                              // user cursor options\n    buf.skipUB1();                              // UPI parameter\n    const warnFlag = buf.readUInt8();           // warning flag\n    if (warnFlag & constants.TNS_WARN_COMPILATION_CREATE) {\n      this.warning = errors.getErr(errors.WRN_COMPILATION_CREATE);\n    }\n    this.errorInfo.rowID = buf.readRowID();     // rowid\n    buf.skipUB4();                              // OS error\n    buf.skipUB1();                              // statement error\n    buf.skipUB1();                              // call number\n    buf.skipUB2();                              // padding\n    buf.skipUB4();                              // success iters\n    const numBytes = buf.readUB4();               // oerrdd (logical rowid)\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n    // batch error codes\n    let numEntries = buf.readUB2();             // batch error codes array\n    if (numEntries > 0) {\n      this.errorInfo.batchErrors = [];\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4();                        // chunk length ignored\n        }\n        const errorCode = buf.readUB2();\n        this.errorInfo.batchErrors.push(new Error(errorCode));\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1);                       // ignore end marker\n      }\n    }\n\n    // batch error offset\n    numEntries = buf.readUB2();                 // batch error row offset array\n    if (numEntries > 0) {\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numEntries; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4();                        // chunk length ignored\n        }\n        this.errorInfo.batchErrors[i].offset = buf.readUB4();\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1);                       // ignore end marker\n      }\n    }\n\n    // batch error messages\n    numEntries = buf.readUB2();                 // batch error messages array\n    if (numEntries > 0) {\n      buf.skipBytes(1);                         // ignore packed size\n      for (let i = 0; i < numEntries; i++) {\n        buf.skipUB2();                          // skip chunk length\n\n        this.errorInfo.batchErrors[i].message = buf.readStr(constants.CSFRM_IMPLICIT);\n        buf.skipBytes(2);                       // ignore end marker\n      }\n    }\n\n    this.errorInfo.num = buf.readUB4();         // error number (extended)\n    this.errorInfo.rowCount = buf.readUB8();    // row number (extended)\n\n    // fields added in Oracle Database 20c\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_20_1) {\n      buf.skipUB4();                           // sql type\n      buf.skipUB4();                           // server checksum\n    }\n\n    // error message\n    if (this.errorInfo.num !== 0) {\n      this.errorOccurred = true;\n      if (errorPos >= 0) {\n        this.errorInfo.pos = errorPos;\n      }\n      this.errorInfo.message = buf.readStr(constants.CSFRM_IMPLICIT);\n      /*\n       * Remove ending newline from ORA error message\n       */\n      this.errorInfo.message = this.errorInfo.message.trim();\n    }\n    this.processedError = true;\n  }\n\n  processReturnParameter() { }\n\n  processWarningInfo(buf) {\n    const errNum = buf.readUB2();              // warning number\n    const numBytes = buf.readUB2();            // length of warning message\n    buf.skipUB2();                             // flags\n    if (errNum != 0 && numBytes > 0) {\n      // get message string and remove the ending newline.\n      const message = buf.readStr(constants.CSFRM_IMPLICIT).trim();\n      this.warning = new Error(message);\n      this.warning.errorNum = errNum;\n    }\n  }\n\n  hasMoreData(buf) {\n    return buf.numBytesLeft() > 0 && !this.flushOutBinds;\n  }\n\n  decode(buf) {\n    this.process(buf);\n  }\n\n  process(buf) {\n    this.flushOutBinds = false;\n    this.processedError = false;\n    do {\n      this.savePoint(buf);\n      const messageType = buf.readUInt8();\n      this.processMessage(buf, messageType);\n    } while (this.hasMoreData(buf));\n  }\n\n  savePoint(buf) {\n    buf.savePoint();\n  }\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_WARNING) {\n      this.processWarningInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_STATUS) {\n      this.callStatus = buf.readUB4();\n      this.endToEndSeqNum = buf.readUB2();\n    } else if (messageType === constants.TNS_MSG_TYPE_PARAMETER) {\n      this.processReturnParameter(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK) {\n      this.processServerSidePiggyBack(buf);\n    } else {\n      errors.throwErr(errors.ERR_UNEXPECTED_MESSAGE_TYPE, messageType, buf.pos, buf.packetNum);\n    }\n  }\n\n  processServerSidePiggyBack(buf) {\n    const opcode = buf.readUInt8();\n    if (opcode === constants.TNS_SERVER_PIGGYBACK_LTXID) {\n      const num_bytes = buf.readUB4();\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if ((opcode === constants.TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION)\n     || (opcode === constants.TNS_SERVER_PIGGYBACK_TRACE_EVENT)) {\n      // pass\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_OS_PID_MTS) {\n      const numDtys = buf.readUB2();\n      buf.skipUB1();\n      buf.skipBytes(numDtys);\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SYNC) {\n      buf.skipUB2();                            // skip number of DTYs\n      buf.skipUB1();                            // skip length of DTYs\n      const num_elements = buf.readUB4();\n      buf.skipBytes(1);                         // skip length\n      for (let i = 0; i < num_elements; i++) {\n        let temp16 = buf.readUB2();\n        if (temp16 > 0) {                       // skip key\n          buf.skipBytesChunked();\n        }\n        temp16 = buf.readUB2();\n        if (temp16 > 0) {                       // skip value\n          buf.skipBytesChunked();\n        }\n        buf.skipUB2();                          // skip flags\n      }\n      buf.skipUB4();                            // skip overall flags\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_EXT_SYNC) {\n      buf.skipUB2();\n      buf.skipUB1();\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT) {\n      buf.skipUB2();                            // skip number of DTYs\n      buf.skipUB1();                            // skip length of DTYs\n      buf.skipUB4();                            // skip flags\n      buf.skipUB4();                            // skip error code\n      buf.skipUB1();                            // skip queue\n      const num_bytes = buf.readUB4();          // skip replay context\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SESS_RET) {\n      buf.skipUB2();\n      buf.skipUB1();\n      const num_elements = buf.readUB2();\n      if (num_elements > 0) {\n        buf.skipUB1();\n        for (let i = 0; i < num_elements; ++i) {\n          let temp16 = buf.readUB2();\n          if (temp16 > 0) {                     // skip key\n            buf.skipBytesChunked();\n          }\n          temp16 = buf.readUB2();\n          if (temp16 > 0) {                     // skip value\n            buf.skipBytesChunked();\n          }\n          buf.skipUB2();                        // skip flags\n        }\n      }\n      const flags = buf.readUB4();              // session flags\n      if (flags & constants.TNS_SESSGET_SESSION_CHANGED) {\n        if (this.connection._drcpEstablishSession) {\n          this.connection.resetStatementCache();\n        }\n      }\n      this.connection._drcpEstablishSession = false;\n      buf.skipUB4();                            // session id\n      buf.skipUB2();                            // serial number\n    } else {\n      errors.throwErr(errors.ERR_UNKOWN_SERVER_SIDE_PIGGYBACK, opcode);\n    }\n  }\n\n  writePiggybacks(buf) {\n    if (this.connection._currentSchemaModified) {\n      this._writeCurrentSchemaPiggyback(buf);\n    }\n    if (this.connection._cursorsToClose.size > 0 && !this.connection._drcpEstablishSession) {\n      this.writeCloseCursorsPiggyBack(buf);\n    }\n    if (\n      this.connection._actionModified ||\n      this.connection._clientIdentifierModified ||\n      this.connection._dbopModified ||\n      this.connection._clientInfoModified ||\n      this.connection._moduleModified\n    ) {\n      this._writeEndToEndPiggybacks(buf);\n    }\n    if (this.connection._tempLobsTotalSize > 0) {\n      this.writeCloseTempLobsPiggyback(buf);\n    }\n  }\n\n  writePiggybackHeader(buf, functionCode) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_PIGGYBACK);\n    buf.writeUInt8(functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0);                          // token number\n    }\n  }\n\n  writeCloseCursorsPiggyBack(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_CLOSE_CURSORS);\n    buf.writeUInt8(1);\n    buf.writeUB4(this.connection._cursorsToClose.size);\n    for (const cursorNum of this.connection._cursorsToClose.keys()) {\n      buf.writeUB4(cursorNum);\n    }\n    this.connection._cursorsToClose.clear();\n  }\n\n  writeCloseTempLobsPiggyback(buf) {\n    const lobsToClose = this.connection._tempLobsToClose;\n    const opCode = constants.TNS_LOB_OP_FREE_TEMP | constants.TNS_LOB_OP_ARRAY;\n\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_LOB_OP);\n\n    buf.writeUInt8(1); // pointer\n    buf.writeUB4(this.connection._tempLobsTotalSize);\n    buf.writeUInt8(0); // dest LOB locator\n    buf.writeUB4(0);\n    buf.writeUB4(0); // source LOB locator\n    buf.writeUB4(0);\n    buf.writeUInt8(0); // source LOB offset\n    buf.writeUInt8(0); // dest LOB offset\n    buf.writeUInt8(0); // charset\n    buf.writeUB4(opCode);\n    buf.writeUInt8(0); // scn\n    buf.writeUB4(0); // LOB scn\n    buf.writeUB8(0); // LOB scnl\n    buf.writeUB8(0);\n    buf.writeUInt8(0);\n\n    // array LOB fields\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    for (const val of lobsToClose) {\n      buf.writeBytes(val);\n    }\n\n    // Reset Values\n    this.connection._tempLobsToClose = [];\n    this.connection._tempLobsTotalSize = 0;\n  }\n\n  _writeCurrentSchemaPiggyback(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_SCHEMA);\n    buf.writeUInt8(1);\n    const bytes = Buffer.byteLength(this.connection.currentSchema);\n    buf.writeUB4(bytes);\n    buf.writeBytesWithLength(Buffer.from(this.connection.currentSchema));\n  }\n\n  _writeEndToEndPiggybacks(buf) {\n    let flags = 0;\n\n    // determine which flags to send\n    if (this.connection._actionModified) {\n      flags |= constants.TNS_END_TO_END_ACTION;\n    }\n    if (this.connection._clientIdentifierModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_IDENTIFIER;\n    }\n    if (this.connection._clientInfoModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_INFO;\n    }\n    if (this.connection._moduleModified) {\n      flags |= constants.TNS_END_TO_END_MODULE;\n    }\n    if (this.connection._dbOpModified) {\n      flags |= constants.TNS_END_TO_END_DBOP;\n    }\n\n    // write initial packet data\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_END_TO_END_ATTR);\n    buf.writeUInt8(0);                  // pointer (cidnam)\n    buf.writeUInt8(0);                  // pointer (cidser)\n    buf.writeUB4(flags);\n\n    const clientIdentifierBytes = this.writeEndEndTraceValue(buf, this.connection._clientIdentifier, this.connection._clientIdentifierModified);\n    const moduleBytes = this.writeEndEndTraceValue(buf, this.connection._module, this.connection._moduleModified);\n    const actionBytes = this.writeEndEndTraceValue(buf, this.connection._action, this.connection._actionModified);\n\n    // write unsupported bits\n    buf.writeUInt8(0);                  // pointer (cideci)\n    buf.writeUB4(0);                    // length (cideci)\n    buf.writeUInt8(0);                  // cidcct\n    buf.writeUB4(0);                    // cidecs\n\n    const clientInfoBytes = this.writeEndEndTraceValue(buf, this.connection._clientInfo, this.connection._clientInfoModified);\n    // write unsupported bits\n    buf.writeUInt8(0);                  // pointer (cideci)\n    buf.writeUB4(0);                    // length (cideci)\n    buf.writeUInt8(0);                  // cidcct\n    buf.writeUB4(0);                    // cidecs\n    const dbOpBytes = this.writeEndEndTraceValue(buf, this.connection._dbOp, this.connection._dbOpModified);\n\n    // write strings\n    if (this.connection._clientIdentifierModified && this.connection._clientIdentifier) {\n      buf.writeBytesWithLength(clientIdentifierBytes);\n    }\n    if (this.connection._moduleModified && this.connection._module) {\n      buf.writeBytesWithLength(moduleBytes);\n    }\n    if (this.connection._actionModified && this.connection._action) {\n      buf.writeBytesWithLength(actionBytes);\n    }\n    if (this.connection._clientInfoModified && this.connection._clientInfo) {\n      buf.writeBytesWithLength(clientInfoBytes);\n    }\n    if (this.connection._dbOpModified && this.connection._dbOp) {\n      buf.writeBytesWithLength(dbOpBytes);\n    }\n\n    // reset flags and values\n    this.connection._actionModified = false;\n    this.connection._action = \"\";\n    this.connection._clientIdentifierModified = false;\n    this.connection._clientIdentifier = \"\";\n    this.connection._clientInfoModified = false;\n    this.connection._clientInfo = \"\";\n    this.connection._dbOpModified = false;\n    this.connection._dbOp = \"\";\n    this.connection._moduleModified = false;\n    this.connection._module = \"\";\n  }\n\n  writeEndEndTraceValue(buf, value, modified) {\n    // write client identifier header info\n    let writtenBytes;\n    if (modified) {\n      buf.writeUInt8(1);              // pointer (client identifier)\n      if (value) {\n        writtenBytes = Buffer.from(value);\n        buf.writeUB4(writtenBytes.length);\n      } else {\n        buf.writeUB4(0);\n      }\n    } else {\n      buf.writeUInt8(0);              // pointer (client identifier)\n      buf.writeUB4(0);                // length of client identifier\n    }\n    return writtenBytes;\n  }\n\n  // Called when an error is encountered during decode of RPC\n  saveDeferredErr() {\n    if (!this.deferredErr) {\n      this.deferredErr = errors.getErr(...arguments);\n    }\n  }\n}\n\nmodule.exports = Message;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}