{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\nconst process = require(\"process\");\nconst ED = require(\"../encryptDecrypt.js\");\nconst Message = require(\"./base.js\");\nconst util = require(\"../../util.js\");\nconst cInfo = util.CLIENT_INFO;\nconst crypto = require('crypto');\n\n/**\n * Executes OSESSKEY and OAUTH RPC functions\n *\n * @class AuthMessage\n * @extends {Message}\n */\nclass AuthMessage extends Message {\n  /**\n   * Represents the data required for OAUTH and OSESSKEY rpc.\n   *\n   * @param {object} conn Connection object\n   * @param {object} config Dynamic Configuration like change password config after connection is established\n   */\n  constructor(conn, config) {\n    super(conn);\n    this.functionCode = constants.TNS_FUNC_AUTH_PHASE_ONE;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.sessionData = {};\n    this.conn = conn;\n    this.sessionKey = \"\";\n    this.encodedPassword = \"\";\n    this.changePassword = false;\n    Object.defineProperty(this, 'password', {\n      enumerable: false,\n      value: config.password\n    });\n    this.username = config.user;\n    if (this.username === undefined) {\n      this.username = \"\";\n    } else {\n      // trim leading and trailing spaces\n      this.username = this.username.trim();\n    }\n    this.schemaUser = '';\n    this.proxyUser = '';\n    this.proxyStatus = -1;\n    if (this.username.length !== 0) {\n      this.proxyStatusObj = util.checkProxyUserValidity(this.username);\n      if (this.proxyStatusObj.status === 0) {\n        this.proxyStatus = 0;\n        this.proxyUser = this.proxyStatusObj.proxyUser;\n        this.schemaUser = this.proxyStatusObj.schemaUser;\n        this.username = this.proxyUser;\n      }\n    }\n    this.newPassword = config.newPassword;\n    if (config.changePassword) {\n      // ChangePassword issued after login would use the same comboKey\n      // used in initial Login. We issue only OAUTH.\n      this.changePassword = true;\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    }\n    if (this.username) {\n      this.userByteLen = Buffer.byteLength(this.username); // Get utf8 encoded number of bytes\n    } else {\n      this.userByteLen = 0;\n    }\n    this.token = config.token;\n    if (this.token) this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    this.privateKey = config.privateKey;\n    if (this.privateKey) {\n      this.privateKey = util.normalizePrivateKey(this.privateKey);\n    }\n    this.serviceName = this.conn.serviceName;\n    this.remoteAddress = this.conn.remoteAddress;\n    this.setAuthMode(config);\n  }\n  setAuthMode(config) {\n    if (!this.newPassword) {\n      this.authMode = constants.TNS_AUTH_MODE_LOGON;\n    }\n    if (config.privilege & constants.SYSDBA) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSDBA;\n    }\n    if (config.privilege & constants.SYSOPER) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSOPER;\n    }\n    if (config.privilege & constants.SYSASM) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSASM;\n    }\n    if (config.privilege & constants.SYSBKP) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSBKP;\n    }\n    if (config.privilege & constants.SYSDG) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSDGD;\n    }\n    if (config.privilege & constants.SYSKM) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSKMT;\n    }\n    if (config.privilege & constants.SYSRAC) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSRAC;\n    }\n    if (this.privateKey) {\n      this.authMode |= constants.TNS_AUTH_MODE_IAM_TOKEN;\n    }\n    if (this.newPassword) {\n      this.authMode |= constants.TNS_AUTH_MODE_CHANGE_PASSWORD;\n    }\n    if (!this.token) {\n      this.authMode |= constants.TNS_AUTH_MODE_WITH_PASSWORD;\n    }\n  }\n  getAlterTimezoneStatement() {\n    let sign, tzRepr;\n    if (process.env.ORA_SDTZ) {\n      tzRepr = process.env.ORA_SDTZ;\n    } else {\n      const date = new Date();\n      const timezoneMinutes = date.getTimezoneOffset();\n      let tzHour = Math.trunc(timezoneMinutes / 60);\n      const tzMinutes = Math.abs((timezoneMinutes - tzHour * 60) % 60);\n      if (tzHour < 0) {\n        sign = '+'; // getTimezoneOffset() = localtime - timeUTC\n        tzHour = -tzHour;\n      } else {\n        sign = '-';\n      }\n      tzHour = tzHour.toLocaleString('en-US', {\n        minimumIntegerDigits: 2\n      });\n      tzRepr = `${sign}${tzHour}:${tzMinutes}`;\n    }\n    return `ALTER SESSION SET TIME_ZONE ='${tzRepr}'\\x00`;\n  }\n  encode(buf) {\n    let verifier11G = false;\n    this.writeFunctionHeader(buf);\n    if (this.userByteLen > 0) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUB4(this.userByteLen);\n    buf.writeUB4(this.authMode);\n    if (this.functionCode === constants.TNS_FUNC_AUTH_PHASE_ONE) {\n      buf.writeUInt8(1);\n      buf.writeUB4(5);\n      buf.writeUInt8(0);\n      buf.writeUInt8(1);\n      if (this.userByteLen > 0) {\n        buf.writeBytesWithLength(Buffer.from(this.username));\n      }\n      buf.writeKeyValue(\"AUTH_TERMINAL\", \"unknown\");\n      buf.writeKeyValue(\"AUTH_PROGRAM_NM\", cInfo.program);\n      buf.writeKeyValue(\"AUTH_MACHINE\", cInfo.hostName);\n      buf.writeKeyValue(\"AUTH_PID\", cInfo.pid);\n      buf.writeKeyValue(\"AUTH_SID\", cInfo.userName);\n    } else {\n      let numPairs = 0;\n      if (this.changePassword) {\n        ED.updatePasswordsWithComboKey(this.password, this.newPassword, this.conn.comboKey, this);\n        numPairs = 2;\n      } else {\n        numPairs = 4;\n        if (this.token) {\n          numPairs += 1;\n        } else {\n          numPairs += 2;\n          if (this.verifierType === constants.TNS_VERIFIER_TYPE_11G_1 || this.verifierType === constants.TNS_VERIFIER_TYPE_11G_2) {\n            verifier11G = true;\n          } else if (this.verifierType !== constants.TNS_VERIFIER_TYPE_12C) {\n            errors.throwErr(errors.ERR_UNSUPPORTED_VERIFIER_TYPE, this.verifierType.toString(16));\n          } else {\n            numPairs += 1;\n          }\n          ED.updateVerifierData(this.sessionData, this.password, this.newPassword, verifier11G, this);\n\n          // The comboKey is cached inside the conn which is used\n          // for changePassword issued on the connection\n          this.conn.comboKey = this.comboKey;\n          if (this.newPassword) {\n            numPairs += 1;\n          }\n        }\n        if (this.privateKey) {\n          numPairs += 2;\n        }\n        if (this.conn.connectionClass) {\n          numPairs += 1;\n        }\n        if (this.conn.purity) {\n          numPairs += 1;\n        }\n        if (this.conn.jdwpData) {\n          this.encryptedJDWPData = ED.getEncryptedJSWPData(this.sessionKey, this.conn.jdwpData);\n          numPairs += 1;\n        }\n        if (this.schemaUser.length !== 0) {\n          numPairs += 1;\n        }\n      }\n      buf.writeUInt8(1);\n      buf.writeUB4(numPairs);\n      buf.writeUInt8(1);\n      buf.writeUInt8(1);\n      if (this.userByteLen > 0) buf.writeBytesWithLength(Buffer.from(this.username));\n      if (this.token) {\n        buf.writeKeyValue(\"AUTH_TOKEN\", this.token);\n      } else {\n        if (!this.changePassword) {\n          buf.writeKeyValue(\"AUTH_SESSKEY\", this.sessionKey, 1);\n          if (!verifier11G) {\n            buf.writeKeyValue(\"AUTH_PBKDF2_SPEEDY_KEY\", this.speedyKey);\n          }\n        }\n      }\n      if (!this.changePassword) {\n        buf.writeKeyValue(\"SESSION_CLIENT_CHARSET\", \"873\");\n        buf.writeKeyValue(\"SESSION_CLIENT_DRIVER_NAME\", constants.DRIVER_NAME);\n        buf.writeKeyValue(\"SESSION_CLIENT_VERSION\", constants.CLIENT_VERSION.toString());\n        buf.writeKeyValue(\"AUTH_ALTER_SESSION\", this.getAlterTimezoneStatement(), 1);\n      }\n      if (this.encodedPassword) {\n        buf.writeKeyValue(\"AUTH_PASSWORD\", this.encodedPassword);\n      }\n      if (this.proxyStatus === 0) {\n        buf.writeKeyValue(\"PROXY_CLIENT_NAME\", this.schemaUser);\n      }\n      if (this.encodedNewPassword) {\n        buf.writeKeyValue(\"AUTH_NEWPASSWORD\", this.encodedNewPassword);\n      }\n      if (this.conn.connectionClass) {\n        buf.writeKeyValue(\"AUTH_KPPL_CONN_CLASS\", this.conn.connectionClass);\n      }\n      if (this.conn.purity) {\n        buf.writeKeyValue(\"AUTH_KPPL_PURITY\", '' + this.conn.purity);\n      }\n      if (this.privateKey) {\n        const currentDate = new Date();\n        const currentDateFormatted = currentDate.toGMTString();\n        const header = \"date: \" + currentDateFormatted + \"\\n\" + \"(request-target): \" + this.serviceName + \"\\n\" + \"host: \" + this.remoteAddress;\n        const signature = crypto.createSign('RSA-SHA256').update(header).sign(this.privateKey, 'base64');\n        buf.writeKeyValue(\"AUTH_HEADER\", header);\n        buf.writeKeyValue(\"AUTH_SIGNATURE\", signature);\n      }\n      if (this.conn.jdwpData) {\n        buf.writeKeyValue(\"AUTH_ORA_DEBUG_JDWP\", this.encryptedJDWPData);\n      }\n    }\n  }\n  processReturnParameter(buf) {\n    const numParams = buf.readUB2();\n    for (let i = 0; i < numParams; i++) {\n      buf.skipUB4();\n      const key = buf.readStr(constants.CSFRM_IMPLICIT);\n      let value = \"\";\n      const numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        value = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      const flag = buf.readUB4();\n      if (key === \"AUTH_VFR_DATA\") {\n        this.verifierType = flag;\n      }\n      this.sessionData[key] = value;\n    }\n    if (this.functionCode === constants.TNS_FUNC_AUTH_PHASE_ONE) {\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    } else {\n      let releaseNum;\n      let updateNum;\n      let portReleaseNum;\n      let portUpdateNum;\n      this.conn.dbDomain = this.sessionData['AUTH_SC_DB_DOMAIN'];\n      this.conn.dbName = this.sessionData['AUTH_SC_DBUNIQUE_NAME'];\n      this.conn.maxOpenCursors = Number(this.sessionData['AUTH_MAX_OPEN_CURSORS']);\n      this.conn.serviceName = this.sessionData['AUTH_SC_SERVICE_NAME'];\n      this.conn.instanceName = this.sessionData['AUTH_INSTANCENAME'];\n      const fullVersionNum = Number(this.sessionData['AUTH_VERSION_NO']);\n      const versionNum = fullVersionNum >> 24 & 0xFF;\n      this.conn.warning = this.warning;\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_18_1_EXT_1) {\n        releaseNum = fullVersionNum >> 16 & 0xFF;\n        updateNum = fullVersionNum >> 12 & 0x0F;\n        portReleaseNum = fullVersionNum >> 4 & 0xFF;\n        portUpdateNum = fullVersionNum & 0x0F;\n      } else {\n        releaseNum = fullVersionNum >> 20 & 0x0F;\n        updateNum = fullVersionNum >> 12 & 0xFF;\n        portReleaseNum = fullVersionNum >> 8 & 0x0F;\n        portUpdateNum = fullVersionNum & 0xFF;\n      }\n      this.conn.serverVersionString = versionNum + '.' + releaseNum + '.' + updateNum + '.' + portReleaseNum + '.' + portUpdateNum;\n      this.conn.serverVersion = versionNum * 100000000 + releaseNum * 1000000 + updateNum * 10000 + portReleaseNum * 100 + portUpdateNum * 1;\n    }\n  }\n}\nmodule.exports = AuthMessage;","map":{"version":3,"names":["Buffer","require","constants","errors","process","ED","Message","util","cInfo","CLIENT_INFO","crypto","AuthMessage","constructor","conn","config","functionCode","TNS_FUNC_AUTH_PHASE_ONE","messageType","TNS_MSG_TYPE_FUNCTION","sessionData","sessionKey","encodedPassword","changePassword","Object","defineProperty","enumerable","value","password","username","user","undefined","trim","schemaUser","proxyUser","proxyStatus","length","proxyStatusObj","checkProxyUserValidity","status","newPassword","TNS_FUNC_AUTH_PHASE_TWO","userByteLen","byteLength","token","privateKey","normalizePrivateKey","serviceName","remoteAddress","setAuthMode","authMode","TNS_AUTH_MODE_LOGON","privilege","SYSDBA","TNS_AUTH_MODE_SYSDBA","SYSOPER","TNS_AUTH_MODE_SYSOPER","SYSASM","TNS_AUTH_MODE_SYSASM","SYSBKP","TNS_AUTH_MODE_SYSBKP","SYSDG","TNS_AUTH_MODE_SYSDGD","SYSKM","TNS_AUTH_MODE_SYSKMT","SYSRAC","TNS_AUTH_MODE_SYSRAC","TNS_AUTH_MODE_IAM_TOKEN","TNS_AUTH_MODE_CHANGE_PASSWORD","TNS_AUTH_MODE_WITH_PASSWORD","getAlterTimezoneStatement","sign","tzRepr","env","ORA_SDTZ","date","Date","timezoneMinutes","getTimezoneOffset","tzHour","Math","trunc","tzMinutes","abs","toLocaleString","minimumIntegerDigits","encode","buf","verifier11G","writeFunctionHeader","writeUInt8","writeUB4","writeBytesWithLength","from","writeKeyValue","program","hostName","pid","userName","numPairs","updatePasswordsWithComboKey","comboKey","verifierType","TNS_VERIFIER_TYPE_11G_1","TNS_VERIFIER_TYPE_11G_2","TNS_VERIFIER_TYPE_12C","throwErr","ERR_UNSUPPORTED_VERIFIER_TYPE","toString","updateVerifierData","connectionClass","purity","jdwpData","encryptedJDWPData","getEncryptedJSWPData","speedyKey","DRIVER_NAME","CLIENT_VERSION","encodedNewPassword","currentDate","currentDateFormatted","toGMTString","header","signature","createSign","update","processReturnParameter","numParams","readUB2","i","skipUB4","key","readStr","CSFRM_IMPLICIT","numBytes","readUB4","flag","releaseNum","updateNum","portReleaseNum","portUpdateNum","dbDomain","dbName","maxOpenCursors","Number","instanceName","fullVersionNum","versionNum","warning","caps","ttcFieldVersion","TNS_CCAP_FIELD_VERSION_18_1_EXT_1","serverVersionString","serverVersion","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/protocol/messages/auth.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\nconst process = require(\"process\");\nconst ED = require(\"../encryptDecrypt.js\");\nconst Message = require(\"./base.js\");\nconst util = require(\"../../util.js\");\nconst cInfo = util.CLIENT_INFO;\nconst crypto = require('crypto');\n\n/**\n * Executes OSESSKEY and OAUTH RPC functions\n *\n * @class AuthMessage\n * @extends {Message}\n */\nclass AuthMessage extends Message {\n  /**\n   * Represents the data required for OAUTH and OSESSKEY rpc.\n   *\n   * @param {object} conn Connection object\n   * @param {object} config Dynamic Configuration like change password config after connection is established\n   */\n  constructor(conn, config) {\n    super(conn);\n    this.functionCode = constants.TNS_FUNC_AUTH_PHASE_ONE;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.sessionData = {};\n    this.conn = conn;\n    this.sessionKey = \"\";\n    this.encodedPassword = \"\";\n    this.changePassword = false;\n    Object.defineProperty(this, 'password', {\n      enumerable: false,\n      value: config.password,\n    });\n    this.username = config.user;\n    if (this.username === undefined) {\n      this.username = \"\";\n    } else {\n      // trim leading and trailing spaces\n      this.username = this.username.trim();\n    }\n    this.schemaUser = '';\n    this.proxyUser = '';\n    this.proxyStatus = -1;\n    if (this.username.length !== 0) {\n      this.proxyStatusObj = util.checkProxyUserValidity(this.username);\n      if (this.proxyStatusObj.status === 0) {\n        this.proxyStatus = 0;\n        this.proxyUser = this.proxyStatusObj.proxyUser;\n        this.schemaUser = this.proxyStatusObj.schemaUser;\n        this.username = this.proxyUser;\n      }\n    }\n    this.newPassword = config.newPassword;\n    if (config.changePassword) {\n      // ChangePassword issued after login would use the same comboKey\n      // used in initial Login. We issue only OAUTH.\n      this.changePassword = true;\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    }\n    if (this.username) {\n      this.userByteLen = Buffer.byteLength(this.username); // Get utf8 encoded number of bytes\n    } else {\n      this.userByteLen = 0;\n    }\n    this.token = config.token;\n    if (this.token)\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    this.privateKey = config.privateKey;\n    if (this.privateKey) {\n      this.privateKey = util.normalizePrivateKey(this.privateKey);\n    }\n    this.serviceName = this.conn.serviceName;\n    this.remoteAddress = this.conn.remoteAddress;\n    this.setAuthMode(config);\n  }\n\n  setAuthMode(config) {\n    if (!this.newPassword) {\n      this.authMode = constants.TNS_AUTH_MODE_LOGON;\n    }\n    if (config.privilege & constants.SYSDBA) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSDBA;\n    }\n    if (config.privilege & constants.SYSOPER) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSOPER;\n    }\n    if (config.privilege & constants.SYSASM) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSASM;\n    }\n    if (config.privilege & constants.SYSBKP) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSBKP;\n    }\n    if (config.privilege & constants.SYSDG) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSDGD;\n    }\n    if (config.privilege & constants.SYSKM) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSKMT;\n    }\n    if (config.privilege & constants.SYSRAC) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSRAC;\n    }\n    if (this.privateKey) {\n      this.authMode |= constants.TNS_AUTH_MODE_IAM_TOKEN;\n    }\n    if (this.newPassword) {\n      this.authMode |= constants.TNS_AUTH_MODE_CHANGE_PASSWORD;\n    }\n    if (!this.token) {\n      this.authMode |= constants.TNS_AUTH_MODE_WITH_PASSWORD;\n    }\n  }\n\n  getAlterTimezoneStatement() {\n    let sign, tzRepr;\n    if (process.env.ORA_SDTZ) {\n      tzRepr = process.env.ORA_SDTZ;\n    } else {\n      const date = new Date();\n      const timezoneMinutes = date.getTimezoneOffset();\n      let tzHour = Math.trunc(timezoneMinutes / 60);\n      const tzMinutes = Math.abs((timezoneMinutes - tzHour * 60) % 60);\n      if (tzHour < 0) {\n        sign = '+';  // getTimezoneOffset() = localtime - timeUTC\n        tzHour = -tzHour;\n      } else {\n        sign = '-';\n      }\n      tzHour = tzHour.toLocaleString('en-US', {minimumIntegerDigits: 2});\n      tzRepr = `${sign}${tzHour}:${tzMinutes}`;\n    }\n    return `ALTER SESSION SET TIME_ZONE ='${tzRepr}'\\x00`;\n  }\n\n  encode(buf) {\n    let verifier11G = false;\n    this.writeFunctionHeader(buf);\n    if (this.userByteLen > 0) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUB4(this.userByteLen);\n    buf.writeUB4(this.authMode);\n\n    if (this.functionCode === constants.TNS_FUNC_AUTH_PHASE_ONE) {\n      buf.writeUInt8(1);\n      buf.writeUB4(5);\n      buf.writeUInt8(0);\n      buf.writeUInt8(1);\n      if (this.userByteLen > 0) {\n        buf.writeBytesWithLength(Buffer.from(this.username));\n      }\n      buf.writeKeyValue(\"AUTH_TERMINAL\", \"unknown\");\n      buf.writeKeyValue(\"AUTH_PROGRAM_NM\", cInfo.program);\n      buf.writeKeyValue(\"AUTH_MACHINE\", cInfo.hostName);\n      buf.writeKeyValue(\"AUTH_PID\", cInfo.pid);\n      buf.writeKeyValue(\"AUTH_SID\", cInfo.userName);\n    } else {\n      let numPairs = 0;\n\n      if (this.changePassword) {\n        ED.updatePasswordsWithComboKey(this.password, this.newPassword, this.conn.comboKey, this);\n        numPairs = 2;\n      } else {\n        numPairs = 4;\n        if (this.token) {\n          numPairs += 1;\n        } else {\n          numPairs += 2;\n          if (this.verifierType === constants.TNS_VERIFIER_TYPE_11G_1 ||\n          this.verifierType === constants.TNS_VERIFIER_TYPE_11G_2) {\n            verifier11G = true;\n          } else if (this.verifierType !== constants.TNS_VERIFIER_TYPE_12C) {\n            errors.throwErr(errors.ERR_UNSUPPORTED_VERIFIER_TYPE,\n              this.verifierType.toString(16));\n          } else {\n            numPairs += 1;\n          }\n          ED.updateVerifierData(this.sessionData, this.password, this.newPassword, verifier11G, this);\n\n          // The comboKey is cached inside the conn which is used\n          // for changePassword issued on the connection\n          this.conn.comboKey = this.comboKey;\n          if (this.newPassword) {\n            numPairs += 1;\n          }\n        }\n\n        if (this.privateKey) {\n          numPairs += 2;\n        }\n        if (this.conn.connectionClass) {\n          numPairs += 1;\n        }\n        if (this.conn.purity) {\n          numPairs += 1;\n        }\n        if (this.conn.jdwpData) {\n          this.encryptedJDWPData = ED.getEncryptedJSWPData(this.sessionKey, this.conn.jdwpData);\n          numPairs += 1;\n        }\n        if (this.schemaUser.length !== 0) {\n          numPairs += 1;\n        }\n      }\n\n      buf.writeUInt8(1);\n      buf.writeUB4(numPairs);\n      buf.writeUInt8(1);\n      buf.writeUInt8(1);\n      if (this.userByteLen > 0)\n        buf.writeBytesWithLength(Buffer.from(this.username));\n      if (this.token) {\n        buf.writeKeyValue(\"AUTH_TOKEN\", this.token);\n      } else {\n        if (!this.changePassword) {\n          buf.writeKeyValue(\"AUTH_SESSKEY\", this.sessionKey, 1);\n          if (!verifier11G) {\n            buf.writeKeyValue(\"AUTH_PBKDF2_SPEEDY_KEY\", this.speedyKey);\n          }\n        }\n      }\n      if (!this.changePassword) {\n        buf.writeKeyValue(\"SESSION_CLIENT_CHARSET\", \"873\");\n        buf.writeKeyValue(\"SESSION_CLIENT_DRIVER_NAME\", constants.DRIVER_NAME);\n        buf.writeKeyValue(\"SESSION_CLIENT_VERSION\",\n          constants.CLIENT_VERSION.toString());\n        buf.writeKeyValue(\"AUTH_ALTER_SESSION\", this.getAlterTimezoneStatement(), 1);\n      }\n      if (this.encodedPassword) {\n        buf.writeKeyValue(\"AUTH_PASSWORD\", this.encodedPassword);\n      }\n      if (this.proxyStatus === 0) {\n        buf.writeKeyValue(\"PROXY_CLIENT_NAME\", this.schemaUser);\n      }\n      if (this.encodedNewPassword) {\n        buf.writeKeyValue(\"AUTH_NEWPASSWORD\", this.encodedNewPassword);\n      }\n      if (this.conn.connectionClass) {\n        buf.writeKeyValue(\"AUTH_KPPL_CONN_CLASS\", this.conn.connectionClass);\n      }\n      if (this.conn.purity) {\n        buf.writeKeyValue(\"AUTH_KPPL_PURITY\", '' + this.conn.purity);\n      }\n      if (this.privateKey) {\n        const currentDate = new Date();\n        const currentDateFormatted = currentDate.toGMTString();\n\n        const header = \"date: \" + currentDateFormatted + \"\\n\" +\n          \"(request-target): \" + this.serviceName  + \"\\n\" +\n          \"host: \" + this.remoteAddress;\n\n        const signature = crypto.createSign('RSA-SHA256')\n          .update(header)\n          .sign(this.privateKey, 'base64');\n\n        buf.writeKeyValue(\"AUTH_HEADER\", header);\n        buf.writeKeyValue(\"AUTH_SIGNATURE\", signature);\n      }\n      if (this.conn.jdwpData) {\n        buf.writeKeyValue(\"AUTH_ORA_DEBUG_JDWP\", this.encryptedJDWPData);\n      }\n\n    }\n  }\n\n  processReturnParameter(buf) {\n    const numParams = buf.readUB2();\n    for (let i = 0; i < numParams;i++) {\n      buf.skipUB4();\n      const key = buf.readStr(constants.CSFRM_IMPLICIT);\n      let value = \"\";\n      const numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        value = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      const flag = buf.readUB4();\n      if (key === \"AUTH_VFR_DATA\") {\n        this.verifierType = flag;\n      }\n      this.sessionData[key] = value;\n\n    }\n    if (this.functionCode === constants.TNS_FUNC_AUTH_PHASE_ONE) {\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    } else {\n      let releaseNum;\n      let updateNum;\n      let portReleaseNum;\n      let portUpdateNum;\n\n      this.conn.dbDomain = this.sessionData['AUTH_SC_DB_DOMAIN'];\n      this.conn.dbName = this.sessionData['AUTH_SC_DBUNIQUE_NAME'];\n      this.conn.maxOpenCursors = Number(this.sessionData['AUTH_MAX_OPEN_CURSORS']);\n      this.conn.serviceName = this.sessionData['AUTH_SC_SERVICE_NAME'];\n      this.conn.instanceName = this.sessionData['AUTH_INSTANCENAME'];\n      const fullVersionNum = Number(this.sessionData['AUTH_VERSION_NO']);\n      const versionNum = (fullVersionNum >> 24) & 0xFF;\n      this.conn.warning = this.warning;\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_18_1_EXT_1) {\n        releaseNum = (fullVersionNum >> 16) & 0xFF;\n        updateNum = (fullVersionNum >> 12) & 0x0F;\n        portReleaseNum = (fullVersionNum >> 4) & 0xFF;\n        portUpdateNum = fullVersionNum & 0x0F;\n      } else {\n        releaseNum = (fullVersionNum >> 20) & 0x0F;\n        updateNum = (fullVersionNum >> 12) & 0xFF;\n        portReleaseNum = (fullVersionNum >> 8) & 0x0F;\n        portUpdateNum = fullVersionNum & 0xFF;\n      }\n      this.conn.serverVersionString = versionNum + '.' + releaseNum + '.' + updateNum + '.' + portReleaseNum + '.' + portUpdateNum;\n      this.conn.serverVersion = versionNum * 100000000 + releaseNum * 1000000 + updateNum * 10000 + portReleaseNum * 100 + portUpdateNum * 1;\n    }\n  }\n\n}\n\nmodule.exports = AuthMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}