{"ast":null,"code":"// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\nclass SodaCollectionImpl {\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._database._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // createIndex()\n  //\n  // Creates an index on a SODA collection.\n  //---------------------------------------------------------------------------\n  createIndex() {\n    errors.throwNotImplemented(\"creating an index on a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // drop()\n  //\n  // Drops a SODA collection.\n  //---------------------------------------------------------------------------\n  drop() {\n    errors.throwNotImplemented(\"dropping a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // dropIndex()\n  //\n  // Drops a SODA collection.\n  //---------------------------------------------------------------------------\n  dropIndex() {\n    errors.throwNotImplemented(\"dropping an index on a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // find()\n  //\n  // Returns a SODA operation object associated with the collection.\n  //---------------------------------------------------------------------------\n  find() {\n    errors.throwNotImplemented(\"creating a SODA operation\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDataGuide()\n  //\n  // Returns a SODA operation object associated with the collection.\n  //---------------------------------------------------------------------------\n  getDataGuide() {\n    errors.throwNotImplemented(\"getting the data guide for the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMetaData()\n  //\n  // Returns the metadata for the collection.\n  //---------------------------------------------------------------------------\n  getMetaData() {\n    errors.throwNotImplemented(\"getting the metadata for the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getName()\n  //\n  // Returns the name of the collection.\n  //---------------------------------------------------------------------------\n  getName() {\n    errors.throwNotImplemented(\"getting the name of the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertMany()\n  //\n  // Inserts multiple documents into the collection at the same time.\n  //---------------------------------------------------------------------------\n  insertMany() {\n    errors.throwNotImplemented(\"inserting multiple docs into a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertManyAndGet()\n  //\n  // Inserts multiple documents into the collection at the same time and\n  // returns an array of documents containing metadata.\n  //---------------------------------------------------------------------------\n  insertManyAndGet() {\n    errors.throwNotImplemented(\"insert/return many docs in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOne()\n  //\n  // Inserts a single document into the collection.\n  //---------------------------------------------------------------------------\n  insertOne() {\n    errors.throwNotImplemented(\"inserting a single doc into a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOneAndGet()\n  //\n  // Inserts a single document into the collection and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  insertOneAndGet() {\n    errors.throwNotImplemented(\"insert/return a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // save()\n  //\n  // Saves a single document into the collection.\n  //---------------------------------------------------------------------------\n  save() {\n    errors.throwNotImplemented(\"saving a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // saveAndGet()\n  //\n  // Saves a single document into the collection and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  saveAndGet() {\n    errors.throwNotImplemented(\"saving a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // truncate()\n  //\n  // Removes all of the documents from a collection.\n  //---------------------------------------------------------------------------\n  truncate() {\n    errors.throwNotImplemented(\"removing all docs from a collection\");\n  }\n}\nmodule.exports = SodaCollectionImpl;","map":{"version":3,"names":["errors","require","SodaCollectionImpl","_getConnImpl","_database","_connection","createIndex","throwNotImplemented","drop","dropIndex","find","getDataGuide","getMetaData","getName","insertMany","insertManyAndGet","insertOne","insertOneAndGet","save","saveAndGet","truncate","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/impl/sodaCollection.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass SodaCollectionImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._database._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // createIndex()\n  //\n  // Creates an index on a SODA collection.\n  //---------------------------------------------------------------------------\n  createIndex() {\n    errors.throwNotImplemented(\"creating an index on a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // drop()\n  //\n  // Drops a SODA collection.\n  //---------------------------------------------------------------------------\n  drop() {\n    errors.throwNotImplemented(\"dropping a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // dropIndex()\n  //\n  // Drops a SODA collection.\n  //---------------------------------------------------------------------------\n  dropIndex() {\n    errors.throwNotImplemented(\"dropping an index on a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // find()\n  //\n  // Returns a SODA operation object associated with the collection.\n  //---------------------------------------------------------------------------\n  find() {\n    errors.throwNotImplemented(\"creating a SODA operation\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDataGuide()\n  //\n  // Returns a SODA operation object associated with the collection.\n  //---------------------------------------------------------------------------\n  getDataGuide() {\n    errors.throwNotImplemented(\"getting the data guide for the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMetaData()\n  //\n  // Returns the metadata for the collection.\n  //---------------------------------------------------------------------------\n  getMetaData() {\n    errors.throwNotImplemented(\"getting the metadata for the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getName()\n  //\n  // Returns the name of the collection.\n  //---------------------------------------------------------------------------\n  getName() {\n    errors.throwNotImplemented(\"getting the name of the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertMany()\n  //\n  // Inserts multiple documents into the collection at the same time.\n  //---------------------------------------------------------------------------\n  insertMany() {\n    errors.throwNotImplemented(\"inserting multiple docs into a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertManyAndGet()\n  //\n  // Inserts multiple documents into the collection at the same time and\n  // returns an array of documents containing metadata.\n  //---------------------------------------------------------------------------\n  insertManyAndGet() {\n    errors.throwNotImplemented(\"insert/return many docs in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOne()\n  //\n  // Inserts a single document into the collection.\n  //---------------------------------------------------------------------------\n  insertOne() {\n    errors.throwNotImplemented(\"inserting a single doc into a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOneAndGet()\n  //\n  // Inserts a single document into the collection and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  insertOneAndGet() {\n    errors.throwNotImplemented(\"insert/return a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // save()\n  //\n  // Saves a single document into the collection.\n  //---------------------------------------------------------------------------\n  save() {\n    errors.throwNotImplemented(\"saving a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // saveAndGet()\n  //\n  // Saves a single document into the collection and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  saveAndGet() {\n    errors.throwNotImplemented(\"saving a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // truncate()\n  //\n  // Removes all of the documents from a collection.\n  //---------------------------------------------------------------------------\n  truncate() {\n    errors.throwNotImplemented(\"removing all docs from a collection\");\n  }\n\n}\n\nmodule.exports = SodaCollectionImpl;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEtC,MAAMC,kBAAkB,CAAC;EAEvB;EACA;EACA;EACA;EACA;EACA;EACAC,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACC,SAAS,CAACC,WAAW;EACnC;;EAEA;EACA;EACA;EACA;EACA;EACAC,WAAWA,CAAA,EAAG;IACZN,MAAM,CAACO,mBAAmB,CAAC,wCAAwC,CAAC;EACtE;;EAEA;EACA;EACA;EACA;EACA;EACAC,IAAIA,CAAA,EAAG;IACLR,MAAM,CAACO,mBAAmB,CAAC,4BAA4B,CAAC;EAC1D;;EAEA;EACA;EACA;EACA;EACA;EACAE,SAASA,CAAA,EAAG;IACVT,MAAM,CAACO,mBAAmB,CAAC,wCAAwC,CAAC;EACtE;;EAEA;EACA;EACA;EACA;EACA;EACAG,IAAIA,CAAA,EAAG;IACLV,MAAM,CAACO,mBAAmB,CAAC,2BAA2B,CAAC;EACzD;;EAEA;EACA;EACA;EACA;EACA;EACAI,YAAYA,CAAA,EAAG;IACbX,MAAM,CAACO,mBAAmB,CAAC,2CAA2C,CAAC;EACzE;;EAEA;EACA;EACA;EACA;EACA;EACAK,WAAWA,CAAA,EAAG;IACZZ,MAAM,CAACO,mBAAmB,CAAC,yCAAyC,CAAC;EACvE;;EAEA;EACA;EACA;EACA;EACA;EACAM,OAAOA,CAAA,EAAG;IACRb,MAAM,CAACO,mBAAmB,CAAC,oCAAoC,CAAC;EAClE;;EAEA;EACA;EACA;EACA;EACA;EACAO,UAAUA,CAAA,EAAG;IACXd,MAAM,CAACO,mBAAmB,CAAC,2CAA2C,CAAC;EACzE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACAQ,gBAAgBA,CAAA,EAAG;IACjBf,MAAM,CAACO,mBAAmB,CAAC,yCAAyC,CAAC;EACvE;;EAEA;EACA;EACA;EACA;EACA;EACAS,SAASA,CAAA,EAAG;IACVhB,MAAM,CAACO,mBAAmB,CAAC,0CAA0C,CAAC;EACxE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACAU,eAAeA,CAAA,EAAG;IAChBjB,MAAM,CAACO,mBAAmB,CAAC,4CAA4C,CAAC;EAC1E;;EAEA;EACA;EACA;EACA;EACA;EACAW,IAAIA,CAAA,EAAG;IACLlB,MAAM,CAACO,mBAAmB,CAAC,qCAAqC,CAAC;EACnE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACAY,UAAUA,CAAA,EAAG;IACXnB,MAAM,CAACO,mBAAmB,CAAC,qCAAqC,CAAC;EACnE;;EAEA;EACA;EACA;EACA;EACA;EACAa,QAAQA,CAAA,EAAG;IACTpB,MAAM,CAACO,mBAAmB,CAAC,qCAAqC,CAAC;EACnE;AAEF;AAEAc,MAAM,CAACC,OAAO,GAAGpB,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}