{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\nclass SodaOperationImpl {\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._collection._database._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // count()\n  //\n  // Returns the number of documents matching the criteria.\n  //---------------------------------------------------------------------------\n  count() {\n    errors.throwNotImplemented(\"getting a count of documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCursor()\n  //\n  // Returns a cursor for documents matching the criteria.\n  //---------------------------------------------------------------------------\n  getCursor() {\n    errors.throwNotImplemented(\"getting a cursor for documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDocuments()\n  //\n  // Returns an array of documents matching the criteria.\n  //---------------------------------------------------------------------------\n  getDocuments() {\n    errors.throwNotImplemented(\"getting a cursor for documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOne()\n  //\n  // Returns a single document matching the criteria.\n  //---------------------------------------------------------------------------\n  getOne() {\n    errors.throwNotImplemented(\"getting a single document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // remove()\n  //\n  // Removes all of the documents matching the criteria.\n  //---------------------------------------------------------------------------\n  remove() {\n    errors.throwNotImplemented(\"removing documents from a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // replaceOne()\n  //\n  // Replaces a single document matching the criteria.\n  //---------------------------------------------------------------------------\n  replaceOne() {\n    errors.throwNotImplemented(\"replacing a single document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // replaceOneAndGet()\n  //\n  // Replaces a single document matching the criteria and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  replaceOneAndGet() {\n    errors.throwNotImplemented(\"replacing/returning a single document\");\n  }\n}\nmodule.exports = SodaOperationImpl;","map":{"version":3,"names":["errors","require","SodaOperationImpl","_getConnImpl","_collection","_database","_connection","count","throwNotImplemented","getCursor","getDocuments","getOne","remove","replaceOne","replaceOneAndGet","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/impl/sodaOperation.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass SodaOperationImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._collection._database._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // count()\n  //\n  // Returns the number of documents matching the criteria.\n  //---------------------------------------------------------------------------\n  count() {\n    errors.throwNotImplemented(\"getting a count of documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCursor()\n  //\n  // Returns a cursor for documents matching the criteria.\n  //---------------------------------------------------------------------------\n  getCursor() {\n    errors.throwNotImplemented(\"getting a cursor for documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDocuments()\n  //\n  // Returns an array of documents matching the criteria.\n  //---------------------------------------------------------------------------\n  getDocuments() {\n    errors.throwNotImplemented(\"getting a cursor for documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOne()\n  //\n  // Returns a single document matching the criteria.\n  //---------------------------------------------------------------------------\n  getOne() {\n    errors.throwNotImplemented(\"getting a single document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // remove()\n  //\n  // Removes all of the documents matching the criteria.\n  //---------------------------------------------------------------------------\n  remove() {\n    errors.throwNotImplemented(\"removing documents from a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // replaceOne()\n  //\n  // Replaces a single document matching the criteria.\n  //---------------------------------------------------------------------------\n  replaceOne() {\n    errors.throwNotImplemented(\"replacing a single document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // replaceOneAndGet()\n  //\n  // Replaces a single document matching the criteria and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  replaceOneAndGet() {\n    errors.throwNotImplemented(\"replacing/returning a single document\");\n  }\n\n}\n\nmodule.exports = SodaOperationImpl;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEtC,MAAMC,iBAAiB,CAAC;EAEtB;EACA;EACA;EACA;EACA;EACA;EACAC,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACC,WAAW,CAACC,SAAS,CAACC,WAAW;EAC/C;;EAEA;EACA;EACA;EACA;EACA;EACAC,KAAKA,CAAA,EAAG;IACNP,MAAM,CAACQ,mBAAmB,CAAC,8BAA8B,CAAC;EAC5D;;EAEA;EACA;EACA;EACA;EACA;EACAC,SAASA,CAAA,EAAG;IACVT,MAAM,CAACQ,mBAAmB,CAAC,gCAAgC,CAAC;EAC9D;;EAEA;EACA;EACA;EACA;EACA;EACAE,YAAYA,CAAA,EAAG;IACbV,MAAM,CAACQ,mBAAmB,CAAC,gCAAgC,CAAC;EAC9D;;EAEA;EACA;EACA;EACA;EACA;EACAG,MAAMA,CAAA,EAAG;IACPX,MAAM,CAACQ,mBAAmB,CAAC,2BAA2B,CAAC;EACzD;;EAEA;EACA;EACA;EACA;EACA;EACAI,MAAMA,CAAA,EAAG;IACPZ,MAAM,CAACQ,mBAAmB,CAAC,sCAAsC,CAAC;EACpE;;EAEA;EACA;EACA;EACA;EACA;EACAK,UAAUA,CAAA,EAAG;IACXb,MAAM,CAACQ,mBAAmB,CAAC,6BAA6B,CAAC;EAC3D;;EAEA;EACA;EACA;EACA;EACA;EACA;EACAM,gBAAgBA,CAAA,EAAG;IACjBd,MAAM,CAACQ,mBAAmB,CAAC,uCAAuC,CAAC;EACrE;AAEF;AAEAO,MAAM,CAACC,OAAO,GAAGd,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}