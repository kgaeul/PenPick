{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst ResultSetImpl = require('../impl/resultset.js');\nconst ExecuteMessage = require('./protocol/messages/execute.js');\nconst FetchMessage = require('./protocol/messages/fetch.js');\nclass ThinResultSetImpl extends ResultSetImpl {\n  //---------------------------------------------------------------------------\n  // _fetchMoreRows()\n  //\n  // Fetches more rows from the database. This is done by means of the full\n  // OAL8 RPC if needed; otherwise, the simpler OFETCH RPC is used.\n  //---------------------------------------------------------------------------\n  async _fetchMoreRows(options) {\n    const cls = this.statement.requiresFullExecute ? ExecuteMessage : FetchMessage;\n    const message = new cls(this.connection, this.statement, options, this);\n    await this.connection._protocol._processMessage(message);\n    this.statement.requiresFullExecute = false;\n  }\n\n  //---------------------------------------------------------------------------\n  // Set the metadata info for a new resultSet object\n  //---------------------------------------------------------------------------\n  _resultSetNew(connection, statement, options) {\n    this.connection = connection;\n    this.statement = statement;\n    this._nestedCursorIndices = [];\n    this.options = options;\n    this.prefetchRowsProcessed = false;\n    this.statement.bufferRowIndex = 0;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the statement to cache so that it can be used later\n  //---------------------------------------------------------------------------\n  close() {\n    this.connection._returnStatement(this.statement);\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns rows fetched to the common layer in array format\n  //---------------------------------------------------------------------------\n  _processRows(numRowsFetched) {\n    const rows = [];\n    const bufferRowIndex = this.statement.bufferRowIndex;\n    for (let row = bufferRowIndex; row < bufferRowIndex + numRowsFetched; row++) {\n      const rowObj = [];\n      for (let col = 0; col < this.statement.numQueryVars; col++) {\n        rowObj.push(this.statement.queryVars[col].values[row]);\n      }\n      rows.push(rowObj);\n    }\n    this.statement.bufferRowIndex += numRowsFetched;\n    if (this.statement.bufferRowIndex === this.statement.bufferRowCount) {\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n    }\n    return rows;\n  }\n\n  //---------------------------------------------------------------------------\n  // getRows()\n  //\n  // Fetches the specified number of rows from the database and returns them to\n  // the common layer for processing.\n  //---------------------------------------------------------------------------\n  async getRows(numRows, options) {\n    options.fetchArraySize = numRows || this.options.fetchArraySize;\n    options.prefetchRows = this.options.prefetchRows;\n    if (this.statement.bufferRowCount - this.statement.bufferRowIndex >= options.fetchArraySize) {\n      return this._processRows(options.fetchArraySize);\n    } else {\n      // We fetch for the required number of row\n      options.fetchArraySize = options.fetchArraySize - (this.statement.bufferRowCount - this.statement.bufferRowIndex);\n      const prevBufferRowCount = this.statement.bufferRowCount;\n      if (this.statement.moreRowsToFetch && options.fetchArraySize > 0) {\n        await this._fetchMoreRows(options);\n      }\n      options.fetchArraySize = numRows || this.options.fetchArraySize;\n      if (prevBufferRowCount === this.statement.bufferRowCount) {\n        const numRowsFetched = this.statement.bufferRowCount - this.statement.bufferRowIndex;\n        this.statement.bufferRowCount = 0;\n        if (numRowsFetched > 0) {\n          return this._processRows(numRowsFetched);\n        }\n        return [];\n      }\n    }\n    const numRowsFetched = this.statement.bufferRowCount - this.statement.bufferRowIndex;\n    return this._processRows(numRowsFetched);\n  }\n}\nmodule.exports = ThinResultSetImpl;","map":{"version":3,"names":["ResultSetImpl","require","ExecuteMessage","FetchMessage","ThinResultSetImpl","_fetchMoreRows","options","cls","statement","requiresFullExecute","message","connection","_protocol","_processMessage","_resultSetNew","_nestedCursorIndices","prefetchRowsProcessed","bufferRowIndex","close","_returnStatement","_processRows","numRowsFetched","rows","row","rowObj","col","numQueryVars","push","queryVars","values","bufferRowCount","getRows","numRows","fetchArraySize","prefetchRows","prevBufferRowCount","moreRowsToFetch","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/resultSet.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst ResultSetImpl = require('../impl/resultset.js');\nconst ExecuteMessage = require('./protocol/messages/execute.js');\nconst FetchMessage = require('./protocol/messages/fetch.js');\n\nclass ThinResultSetImpl extends ResultSetImpl {\n\n  //---------------------------------------------------------------------------\n  // _fetchMoreRows()\n  //\n  // Fetches more rows from the database. This is done by means of the full\n  // OAL8 RPC if needed; otherwise, the simpler OFETCH RPC is used.\n  //---------------------------------------------------------------------------\n  async _fetchMoreRows(options) {\n    const cls = (this.statement.requiresFullExecute) ? ExecuteMessage : FetchMessage;\n    const message = new cls(this.connection, this.statement, options, this);\n    await this.connection._protocol._processMessage(message);\n    this.statement.requiresFullExecute = false;\n  }\n\n  //---------------------------------------------------------------------------\n  // Set the metadata info for a new resultSet object\n  //---------------------------------------------------------------------------\n  _resultSetNew(connection, statement, options) {\n    this.connection = connection;\n    this.statement = statement;\n    this._nestedCursorIndices = [];\n    this.options = options;\n    this.prefetchRowsProcessed = false;\n    this.statement.bufferRowIndex = 0;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the statement to cache so that it can be used later\n  //---------------------------------------------------------------------------\n  close() {\n    this.connection._returnStatement(this.statement);\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns rows fetched to the common layer in array format\n  //---------------------------------------------------------------------------\n  _processRows(numRowsFetched) {\n    const rows = [];\n    const bufferRowIndex = this.statement.bufferRowIndex;\n    for (let row = bufferRowIndex; row < bufferRowIndex + numRowsFetched; row++) {\n      const rowObj = [];\n      for (let col = 0; col < this.statement.numQueryVars; col++) {\n        rowObj.push(this.statement.queryVars[col].values[row]);\n      }\n      rows.push(rowObj);\n    }\n    this.statement.bufferRowIndex += numRowsFetched;\n    if (this.statement.bufferRowIndex === this.statement.bufferRowCount) {\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n    }\n    return rows;\n  }\n\n  //---------------------------------------------------------------------------\n  // getRows()\n  //\n  // Fetches the specified number of rows from the database and returns them to\n  // the common layer for processing.\n  //---------------------------------------------------------------------------\n  async getRows(numRows, options) {\n    options.fetchArraySize = numRows || this.options.fetchArraySize;\n    options.prefetchRows = this.options.prefetchRows;\n    if (this.statement.bufferRowCount - this.statement.bufferRowIndex >= options.fetchArraySize) {\n      return this._processRows(options.fetchArraySize);\n    } else {\n      // We fetch for the required number of row\n      options.fetchArraySize = options.fetchArraySize - (this.statement.bufferRowCount - this.statement.bufferRowIndex);\n      const prevBufferRowCount = this.statement.bufferRowCount;\n      if (this.statement.moreRowsToFetch && options.fetchArraySize > 0) {\n        await this._fetchMoreRows(options);\n      }\n      options.fetchArraySize = numRows || this.options.fetchArraySize;\n      if (prevBufferRowCount === this.statement.bufferRowCount) {\n        const numRowsFetched = this.statement.bufferRowCount - this.statement.bufferRowIndex;\n        this.statement.bufferRowCount = 0;\n        if (numRowsFetched > 0) {\n          return this._processRows(numRowsFetched);\n        }\n        return [];\n      }\n    }\n    const numRowsFetched = this.statement.bufferRowCount - this.statement.bufferRowIndex;\n    return this._processRows(numRowsFetched);\n  }\n\n}\n\nmodule.exports = ThinResultSetImpl;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACrD,MAAMC,cAAc,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAChE,MAAME,YAAY,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AAE5D,MAAMG,iBAAiB,SAASJ,aAAa,CAAC;EAE5C;EACA;EACA;EACA;EACA;EACA;EACA,MAAMK,cAAcA,CAACC,OAAO,EAAE;IAC5B,MAAMC,GAAG,GAAI,IAAI,CAACC,SAAS,CAACC,mBAAmB,GAAIP,cAAc,GAAGC,YAAY;IAChF,MAAMO,OAAO,GAAG,IAAIH,GAAG,CAAC,IAAI,CAACI,UAAU,EAAE,IAAI,CAACH,SAAS,EAAEF,OAAO,EAAE,IAAI,CAAC;IACvE,MAAM,IAAI,CAACK,UAAU,CAACC,SAAS,CAACC,eAAe,CAACH,OAAO,CAAC;IACxD,IAAI,CAACF,SAAS,CAACC,mBAAmB,GAAG,KAAK;EAC5C;;EAEA;EACA;EACA;EACAK,aAAaA,CAACH,UAAU,EAAEH,SAAS,EAAEF,OAAO,EAAE;IAC5C,IAAI,CAACK,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACO,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACT,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACU,qBAAqB,GAAG,KAAK;IAClC,IAAI,CAACR,SAAS,CAACS,cAAc,GAAG,CAAC;EACnC;;EAEA;EACA;EACA;EACAC,KAAKA,CAAA,EAAG;IACN,IAAI,CAACP,UAAU,CAACQ,gBAAgB,CAAC,IAAI,CAACX,SAAS,CAAC;EAClD;;EAEA;EACA;EACA;EACAY,YAAYA,CAACC,cAAc,EAAE;IAC3B,MAAMC,IAAI,GAAG,EAAE;IACf,MAAML,cAAc,GAAG,IAAI,CAACT,SAAS,CAACS,cAAc;IACpD,KAAK,IAAIM,GAAG,GAAGN,cAAc,EAAEM,GAAG,GAAGN,cAAc,GAAGI,cAAc,EAAEE,GAAG,EAAE,EAAE;MAC3E,MAAMC,MAAM,GAAG,EAAE;MACjB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACjB,SAAS,CAACkB,YAAY,EAAED,GAAG,EAAE,EAAE;QAC1DD,MAAM,CAACG,IAAI,CAAC,IAAI,CAACnB,SAAS,CAACoB,SAAS,CAACH,GAAG,CAAC,CAACI,MAAM,CAACN,GAAG,CAAC,CAAC;MACxD;MACAD,IAAI,CAACK,IAAI,CAACH,MAAM,CAAC;IACnB;IACA,IAAI,CAAChB,SAAS,CAACS,cAAc,IAAII,cAAc;IAC/C,IAAI,IAAI,CAACb,SAAS,CAACS,cAAc,KAAK,IAAI,CAACT,SAAS,CAACsB,cAAc,EAAE;MACnE,IAAI,CAACtB,SAAS,CAACsB,cAAc,GAAG,CAAC;MACjC,IAAI,CAACtB,SAAS,CAACS,cAAc,GAAG,CAAC;IACnC;IACA,OAAOK,IAAI;EACb;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMS,OAAOA,CAACC,OAAO,EAAE1B,OAAO,EAAE;IAC9BA,OAAO,CAAC2B,cAAc,GAAGD,OAAO,IAAI,IAAI,CAAC1B,OAAO,CAAC2B,cAAc;IAC/D3B,OAAO,CAAC4B,YAAY,GAAG,IAAI,CAAC5B,OAAO,CAAC4B,YAAY;IAChD,IAAI,IAAI,CAAC1B,SAAS,CAACsB,cAAc,GAAG,IAAI,CAACtB,SAAS,CAACS,cAAc,IAAIX,OAAO,CAAC2B,cAAc,EAAE;MAC3F,OAAO,IAAI,CAACb,YAAY,CAACd,OAAO,CAAC2B,cAAc,CAAC;IAClD,CAAC,MAAM;MACL;MACA3B,OAAO,CAAC2B,cAAc,GAAG3B,OAAO,CAAC2B,cAAc,IAAI,IAAI,CAACzB,SAAS,CAACsB,cAAc,GAAG,IAAI,CAACtB,SAAS,CAACS,cAAc,CAAC;MACjH,MAAMkB,kBAAkB,GAAG,IAAI,CAAC3B,SAAS,CAACsB,cAAc;MACxD,IAAI,IAAI,CAACtB,SAAS,CAAC4B,eAAe,IAAI9B,OAAO,CAAC2B,cAAc,GAAG,CAAC,EAAE;QAChE,MAAM,IAAI,CAAC5B,cAAc,CAACC,OAAO,CAAC;MACpC;MACAA,OAAO,CAAC2B,cAAc,GAAGD,OAAO,IAAI,IAAI,CAAC1B,OAAO,CAAC2B,cAAc;MAC/D,IAAIE,kBAAkB,KAAK,IAAI,CAAC3B,SAAS,CAACsB,cAAc,EAAE;QACxD,MAAMT,cAAc,GAAG,IAAI,CAACb,SAAS,CAACsB,cAAc,GAAG,IAAI,CAACtB,SAAS,CAACS,cAAc;QACpF,IAAI,CAACT,SAAS,CAACsB,cAAc,GAAG,CAAC;QACjC,IAAIT,cAAc,GAAG,CAAC,EAAE;UACtB,OAAO,IAAI,CAACD,YAAY,CAACC,cAAc,CAAC;QAC1C;QACA,OAAO,EAAE;MACX;IACF;IACA,MAAMA,cAAc,GAAG,IAAI,CAACb,SAAS,CAACsB,cAAc,GAAG,IAAI,CAACtB,SAAS,CAACS,cAAc;IACpF,OAAO,IAAI,CAACG,YAAY,CAACC,cAAc,CAAC;EAC1C;AAEF;AAEAgB,MAAM,CAACC,OAAO,GAAGlC,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}