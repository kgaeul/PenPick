{"ast":null,"code":"// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('../constants');\nconst errors = require('../errors.js');\nconst os = require('os');\n\n//---------------------------------------------------------------------------\n// populateClientInfo()\n//\n// Populates client process information\n//---------------------------------------------------------------------------\nfunction populateClientInfo() {\n  this.program = process.argv0;\n  this.terminal = \"unknown\";\n  this.pid = process.pid.toString();\n  try {\n    this.userName = os.userInfo().username;\n  } catch {\n    this.userName = \"unknown\";\n  }\n  this.hostName = os.hostname();\n}\n// Initialize client data on startup.\nconst CLIENT_INFO = new populateClientInfo();\n\n//---------------------------------------------------------------------------\n// getMetadataMany(sql)\n//\n// Get metadata info for all the columns in the table\n//---------------------------------------------------------------------------\nfunction getMetadataMany(vars) {\n  const metadata = [];\n  for (const queryVar of vars) {\n    metadata.push(queryVar.fetchInfo);\n  }\n  return metadata;\n}\n\n//---------------------------------------------------------------------------\n// getOutBindValues(sql)\n//\n// Return the values for the out binds at the given position (row).\n//---------------------------------------------------------------------------\nfunction getOutBindValues(bindVars, pos) {\n  const bindByPos = bindVars[0].name === undefined;\n  const outBindValues = bindByPos ? [] : {};\n  for (let i = 0; i < bindVars.length; i++) {\n    if (bindByPos) {\n      outBindValues.push(bindVars[i].values[pos]);\n    } else {\n      outBindValues[bindVars[i].name] = bindVars[i].values[pos];\n    }\n  }\n  return outBindValues;\n}\n\n//---------------------------------------------------------------------------\n// getOutBinds()\n//\n// Return the out binds for the given statement.\n//---------------------------------------------------------------------------\nfunction getOutBinds(statement, numIters, executeManyFlag) {\n  const bindVars = statement.bindInfoList.map(i => i.bindVar);\n  const outBinds = bindVars.filter(v => v.dir !== constants.BIND_IN);\n  if (outBinds.length > 0) {\n    if (executeManyFlag) {\n      const outBindValues = new Array(numIters);\n      for (let i = 0; i < numIters; i++) {\n        outBindValues[i] = getOutBindValues(outBinds, i);\n      }\n      return outBindValues;\n    }\n    return getOutBindValues(outBinds, 0);\n  }\n}\n\n//---------------------------------------------------------------------------\n// checkProxyUserValidity()\n//\n// Check validity status for proxy authentication\n//---------------------------------------------------------------------------\nfunction checkProxyUserValidity(userName) {\n  let schemaUser = '',\n    proxyUser = '';\n  let quoteFound = false,\n    openSquareBracketFound = false;\n  let lastQuoteFoundIndex = 0;\n  const result = {\n    status: -1,\n    proxyUser: '',\n    schemaUser: ''\n  };\n  const userNameLength = userName.length;\n  let index = 0,\n    i,\n    j;\n  while (index < userNameLength) {\n    // check for double quotes\n    if (userName.charAt(index) === '\"') {\n      quoteFound = !quoteFound;\n      lastQuoteFoundIndex = index;\n    }\n\n    // check for open square bracket\n    if (userName.charAt(index) === '[' && !quoteFound) {\n      openSquareBracketFound = true;\n      // skip leading space and extract proxy user name\n      if (lastQuoteFoundIndex != 0) {\n        for (i = lastQuoteFoundIndex + 1; i < index; i++) {\n          if (userName.charAt(i) !== ' ') {\n            return result;\n          }\n        }\n        for (i = 0; i <= lastQuoteFoundIndex; i++) {\n          proxyUser += userName.charAt(i);\n        }\n      } else {\n        for (i = 0; i < index; i++) {\n          if (userName.charAt(i) !== ' ') {\n            proxyUser += userName.charAt(i);\n          } else {\n            break;\n          }\n        }\n      }\n      break;\n    }\n    index++;\n  }\n  if (proxyUser.length === 0) {\n    return result;\n  } else {\n    result.proxyUser = proxyUser;\n  }\n\n  // extract schema user\n  index = index + 1;\n  quoteFound = false;\n  const schemaUserStartIndex = index;\n  lastQuoteFoundIndex = 0;\n  while (index < userNameLength) {\n    // check for double quotes\n    if (userName.charAt(index) === '\"') {\n      quoteFound = !quoteFound;\n      lastQuoteFoundIndex = index;\n    }\n    if (userName.charAt(index) === '[' && !quoteFound && openSquareBracketFound) {\n      return result;\n    }\n    if (userName.charAt(index) === ']' && !quoteFound) {\n      if (lastQuoteFoundIndex != schemaUserStartIndex && lastQuoteFoundIndex != 0) {\n        for (i = schemaUserStartIndex; i <= lastQuoteFoundIndex; i++) {\n          schemaUser += userName.charAt(i);\n        }\n        // check for character between double quotes and close brackets\n        for (i = lastQuoteFoundIndex + 1; i < index; i++) {\n          if (userName.charAt(i) != ' ') {\n            return result;\n          }\n        }\n      } else {\n        // skip trailing spaces\n        for (i = schemaUserStartIndex; i < index; i++) {\n          if (userName.charAt(i) != ' ') {\n            break;\n          }\n        }\n        if (i == index) {\n          return result;\n        }\n        for (j = i; j < index; j++) {\n          schemaUser += userName[j];\n        }\n      }\n\n      // check for character from [ till end of string\n      for (i = index + 1; i < userNameLength; i++) {\n        if (userName[i] != ' ') {\n          return result;\n        }\n      }\n    }\n    index++;\n  }\n  if (schemaUser.length === 0) {\n    return result;\n  } else {\n    result.schemaUser = schemaUser;\n  }\n  result.status = 0;\n  return result;\n}\n\n//---------------------------------------------------------------------------\n// checkCredentials()\n//\n// Check Credentials for Password Authentication\n//---------------------------------------------------------------------------\nfunction checkCredentials(params) {\n  if (params.token === undefined) {\n    if (params.externalAuth === true) {\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, 'External Authentication');\n    }\n    if (params.password === undefined) {\n      errors.throwErr(errors.ERR_MISSING_CREDENTIALS);\n    }\n  }\n}\n\n//---------------------------------------------------------------------------\n// normalizePrivateKey()\n//\n// Add header and footer to private key\n//---------------------------------------------------------------------------\nfunction normalizePrivateKey(privateKey) {\n  return '-----BEGIN PRIVATE KEY-----\\n' + privateKey + '\\n' + '-----END PRIVATE KEY-----';\n}\nmodule.exports = {\n  getMetadataMany,\n  CLIENT_INFO,\n  getOutBinds,\n  checkProxyUserValidity,\n  checkCredentials,\n  normalizePrivateKey\n};","map":{"version":3,"names":["constants","require","errors","os","populateClientInfo","program","process","argv0","terminal","pid","toString","userName","userInfo","username","hostName","hostname","CLIENT_INFO","getMetadataMany","vars","metadata","queryVar","push","fetchInfo","getOutBindValues","bindVars","pos","bindByPos","name","undefined","outBindValues","i","length","values","getOutBinds","statement","numIters","executeManyFlag","bindInfoList","map","bindVar","outBinds","filter","v","dir","BIND_IN","Array","checkProxyUserValidity","schemaUser","proxyUser","quoteFound","openSquareBracketFound","lastQuoteFoundIndex","result","status","userNameLength","index","j","charAt","schemaUserStartIndex","checkCredentials","params","token","externalAuth","throwErr","ERR_NOT_IMPLEMENTED","password","ERR_MISSING_CREDENTIALS","normalizePrivateKey","privateKey","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/thin/util.js"],"sourcesContent":["// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('../constants');\nconst errors = require('../errors.js');\nconst os = require('os');\n\n//---------------------------------------------------------------------------\n// populateClientInfo()\n//\n// Populates client process information\n//---------------------------------------------------------------------------\nfunction populateClientInfo() {\n  this.program = process.argv0;\n  this.terminal = \"unknown\";\n  this.pid = process.pid.toString();\n  try {\n    this.userName = os.userInfo().username;\n  } catch {\n    this.userName = \"unknown\";\n  }\n  this.hostName = os.hostname();\n}\n// Initialize client data on startup.\nconst CLIENT_INFO = new populateClientInfo();\n\n//---------------------------------------------------------------------------\n// getMetadataMany(sql)\n//\n// Get metadata info for all the columns in the table\n//---------------------------------------------------------------------------\nfunction getMetadataMany(vars) {\n  const metadata = [];\n  for (const queryVar of vars) {\n    metadata.push(queryVar.fetchInfo);\n  }\n  return metadata;\n}\n\n//---------------------------------------------------------------------------\n// getOutBindValues(sql)\n//\n// Return the values for the out binds at the given position (row).\n//---------------------------------------------------------------------------\nfunction getOutBindValues(bindVars, pos) {\n  const bindByPos = (bindVars[0].name === undefined);\n  const outBindValues = (bindByPos) ? [] : {};\n  for (let i = 0; i < bindVars.length; i++) {\n    if (bindByPos) {\n      outBindValues.push(bindVars[i].values[pos]);\n    } else {\n      outBindValues[bindVars[i].name] = bindVars[i].values[pos];\n    }\n  }\n  return outBindValues;\n}\n\n//---------------------------------------------------------------------------\n// getOutBinds()\n//\n// Return the out binds for the given statement.\n//---------------------------------------------------------------------------\nfunction getOutBinds(statement, numIters, executeManyFlag) {\n  const bindVars = statement.bindInfoList.map(i => i.bindVar);\n  const outBinds = bindVars.filter(v => v.dir !== constants.BIND_IN);\n  if (outBinds.length > 0) {\n    if (executeManyFlag) {\n      const outBindValues = new Array(numIters);\n      for (let i = 0; i < numIters; i++) {\n        outBindValues[i] = getOutBindValues(outBinds, i);\n      }\n      return outBindValues;\n    }\n    return getOutBindValues(outBinds, 0);\n  }\n}\n\n//---------------------------------------------------------------------------\n// checkProxyUserValidity()\n//\n// Check validity status for proxy authentication\n//---------------------------------------------------------------------------\nfunction checkProxyUserValidity(userName) {\n  let schemaUser = '', proxyUser = '';\n  let quoteFound = false, openSquareBracketFound = false;\n  let lastQuoteFoundIndex = 0;\n  const result = {\n    status: -1,\n    proxyUser: '',\n    schemaUser: ''\n  };\n  const userNameLength = userName.length;\n  let index = 0, i, j;\n  while (index < userNameLength) {\n    // check for double quotes\n    if (userName.charAt(index) === '\"') {\n      quoteFound = !quoteFound;\n      lastQuoteFoundIndex = index;\n    }\n\n    // check for open square bracket\n    if (userName.charAt(index) === '[' && !quoteFound) {\n      openSquareBracketFound = true;\n      // skip leading space and extract proxy user name\n      if (lastQuoteFoundIndex != 0) {\n        for (i = lastQuoteFoundIndex + 1; i < index; i++) {\n          if (userName.charAt(i) !== ' ') {\n            return result;\n          }\n        }\n\n        for (i = 0; i <= lastQuoteFoundIndex; i++) {\n          proxyUser += userName.charAt(i);\n        }\n      } else {\n        for (i = 0; i < index; i++) {\n          if (userName.charAt(i) !== ' ') {\n            proxyUser += userName.charAt(i);\n          } else {\n            break;\n          }\n        }\n      }\n      break;\n    }\n    index++;\n  }\n\n  if (proxyUser.length === 0) {\n    return result;\n  } else {\n    result.proxyUser = proxyUser;\n  }\n\n  // extract schema user\n  index = index + 1;\n  quoteFound = false;\n  const schemaUserStartIndex = index;\n  lastQuoteFoundIndex = 0;\n  while (index < userNameLength) {\n    // check for double quotes\n    if (userName.charAt(index) === '\"') {\n      quoteFound = !quoteFound;\n      lastQuoteFoundIndex = index;\n    }\n\n    if (userName.charAt(index) === '[' && !quoteFound &&\n        openSquareBracketFound) {\n      return result;\n    }\n\n    if (userName.charAt(index) === ']' && !quoteFound) {\n      if (lastQuoteFoundIndex != schemaUserStartIndex &&\n          lastQuoteFoundIndex != 0) {\n        for (i = schemaUserStartIndex; i <= lastQuoteFoundIndex; i++) {\n          schemaUser += userName.charAt(i);\n        }\n        // check for character between double quotes and close brackets\n        for (i = lastQuoteFoundIndex + 1; i < index; i++) {\n          if (userName.charAt(i) != ' ') {\n            return result;\n          }\n        }\n      } else {\n        // skip trailing spaces\n        for (i = schemaUserStartIndex; i < index; i++) {\n          if (userName.charAt(i) != ' ') {\n            break;\n          }\n        }\n        if (i == index) {\n          return result;\n        }\n\n        for (j = i; j < index; j++) {\n          schemaUser += userName[j];\n        }\n      }\n\n      // check for character from [ till end of string\n      for (i = index + 1; i < userNameLength; i++) {\n        if (userName[i] != ' ') {\n          return result;\n        }\n      }\n    }\n    index++;\n  }\n\n  if (schemaUser.length === 0) {\n    return result;\n  } else {\n    result.schemaUser = schemaUser;\n  }\n\n  result.status = 0;\n  return result;\n}\n\n//---------------------------------------------------------------------------\n// checkCredentials()\n//\n// Check Credentials for Password Authentication\n//---------------------------------------------------------------------------\nfunction checkCredentials(params) {\n  if (params.token === undefined) {\n    if (params.externalAuth === true) {\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, 'External Authentication');\n    }\n    if (params.password === undefined) {\n      errors.throwErr(errors.ERR_MISSING_CREDENTIALS);\n    }\n  }\n}\n\n//---------------------------------------------------------------------------\n// normalizePrivateKey()\n//\n// Add header and footer to private key\n//---------------------------------------------------------------------------\nfunction normalizePrivateKey(privateKey) {\n  return '-----BEGIN PRIVATE KEY-----\\n' + privateKey +\n  '\\n' + '-----END PRIVATE KEY-----';\n}\n\nmodule.exports = {\n  getMetadataMany,\n  CLIENT_INFO,\n  getOutBinds,\n  checkProxyUserValidity,\n  checkCredentials,\n  normalizePrivateKey\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}