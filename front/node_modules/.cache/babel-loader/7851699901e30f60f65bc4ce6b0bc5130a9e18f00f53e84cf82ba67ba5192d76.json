{"ast":null,"code":"// Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst AqDeqOptions = require('./aqDeqOptions.js');\nconst AqEnqOptions = require('./aqEnqOptions.js');\nconst AqMessage = require('./aqMessage.js');\nconst BaseDbObject = require('./dbObject.js');\nconst transformer = require('./transformer.js');\nconst types = require('./types.js');\nclass AqQueue {\n  //---------------------------------------------------------------------------\n  // _isPayload()\n  //\n  // Returns a boolean indicating if the value is a valid payload.\n  //---------------------------------------------------------------------------\n  _isPayload(value) {\n    return typeof value === 'string' || Buffer.isBuffer(value) || value instanceof BaseDbObject;\n  }\n\n  //---------------------------------------------------------------------------\n  // _makeMessage()\n  //\n  // For enqOne()/deqOne()/enqMany()/deqMany(), wrap the return value with JS\n  // layer object.\n  //---------------------------------------------------------------------------\n  _makeMessage(msgImpl) {\n    const msg = new AqMessage();\n    msg._impl = msgImpl;\n    msg._payloadTypeClass = this._payloadTypeClass;\n    return msg;\n  }\n\n  //---------------------------------------------------------------------------\n  // _verifyMessage()\n  //\n  // Messages that can be enqueued must be a string, Buffer or database object\n  // (in which case all message properties are defaulted) or an object\n  // containing a \"payload\" property along with the other properties to use\n  // during the enqueue. A normalized object is returned.\n  //---------------------------------------------------------------------------\n  _verifyMessage(message) {\n    // validate we have a payload of the correct type\n    let payload;\n    if (this._isPayload(message)) {\n      payload = message;\n      message = {};\n    } else {\n      message = {\n        ...message\n      };\n      if (this._isJson || this._isPayload(message.payload)) {\n        payload = message.payload;\n      } else if (this._payloadTypeClass) {\n        payload = new this._payloadTypeClass(message.payload);\n      } else {\n        errors.throwErr(errors.ERR_INVALID_AQ_MESSAGE);\n      }\n    }\n\n    // validate payload\n    if (this._isJson) {\n      message.payload = transformer.transformJsonValue(payload);\n    } else if (typeof payload === 'string') {\n      message.payload = Buffer.from(payload);\n    } else if (Buffer.isBuffer(payload)) {\n      message.payload = payload;\n    } else {\n      message.payload = payload._impl;\n    }\n\n    // validate options, if applicable\n    if (message.correlation !== undefined) {\n      errors.assertParamPropValue(typeof message.correlation === 'string', 1, \"correlation\");\n    }\n    if (message.delay !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.delay), 1, \"delay\");\n    }\n    if (message.exceptionQueue !== undefined) {\n      errors.assertParamPropValue(typeof message.exceptionQueue === 'string', 1, \"exceptionQueue\");\n    }\n    if (message.expiration !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.expiration), 1, \"expiration\");\n    }\n    if (message.priority !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.priority), 1, \"priority\");\n    }\n    if (message.recipients !== undefined) {\n      errors.assertParamPropValue(nodbUtil.isArrayOfStrings(message.recipients), 1, \"recipients\");\n    }\n    return message;\n  }\n\n  //---------------------------------------------------------------------------\n  // create()\n  //\n  // Creates the queue and populates some internal attributes.\n  //---------------------------------------------------------------------------\n  async create(conn, name, options) {\n    if (options.payloadType === types.DB_TYPE_JSON) {\n      this._isJson = true;\n      this._payloadType = types.DB_TYPE_JSON;\n      this._payloadTypeName = \"JSON\";\n    } else if (options.payloadType === undefined || options.payloadType === types.DB_TYPE_RAW) {\n      this._payloadType = types.DB_TYPE_RAW;\n      this._payloadTypeName = \"RAW\";\n    } else {\n      if (typeof options.payloadType === 'string') {\n        // DB Object type\n        const cls = await conn._getDbObjectClassForName(options.payloadType);\n        this._payloadTypeClass = cls;\n        options.payloadType = cls;\n      } else {\n        errors.assertParamPropValue(nodbUtil.isObject(options.payloadType) && options.payloadType.prototype instanceof BaseDbObject, 2, \"payloadType\");\n        this._payloadTypeClass = options.payloadType;\n      }\n      this._payloadType = types.DB_TYPE_OBJECT;\n      this._payloadTypeName = this._payloadTypeClass.prototype.name;\n    }\n    this._name = name;\n    this._impl = await conn._impl.getQueue(name, this._payloadTypeClass, this._payloadType);\n  }\n\n  //---------------------------------------------------------------------------\n  // deqMany()\n  //\n  // Returns an array of messages from the queue, up to the maximum specified,\n  // if any are available.\n  //---------------------------------------------------------------------------\n  async deqMany(maxMessages) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(maxMessages) && maxMessages > 0, 1);\n    const msgImpls = await this._impl.deqMany(maxMessages);\n    return msgImpls.map(i => this._makeMessage(i));\n  }\n\n  //---------------------------------------------------------------------------\n  // deqOne()\n  //\n  // Returns a single message from the queue, if one is available.\n  //---------------------------------------------------------------------------\n  async deqOne() {\n    errors.assertArgCount(arguments, 0, 0);\n    const msgImpl = await this._impl.deqOne();\n    if (msgImpl) return this._makeMessage(msgImpl);\n  }\n\n  //---------------------------------------------------------------------------\n  // deqOptions\n  //\n  // Property for the dequeue options associated with the queue.\n  //---------------------------------------------------------------------------\n  get deqOptions() {\n    if (!this._deqOptions) {\n      const deqOptions = new AqDeqOptions();\n      deqOptions._impl = this._impl.deqOptions;\n      this._deqOptions = deqOptions;\n    }\n    return this._deqOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // enqMany()\n  //\n  // Enqueues multiple messages into the queue at the same time, avoiding\n  // multiple round-trips.\n  //---------------------------------------------------------------------------\n  async enqMany(messages) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Array.isArray(messages) && messages.length > 0, 1);\n    const verifiedMessages = new Array(messages.length);\n    for (let i = 0; i < messages.length; i++) {\n      verifiedMessages[i] = this._verifyMessage(messages[i]);\n    }\n    const msgImpls = await this._impl.enqMany(verifiedMessages);\n    return msgImpls.map(i => this._makeMessage(i));\n  }\n\n  //---------------------------------------------------------------------------\n  // enqOne()\n  //\n  // Enqueues a single message into the queue.\n  //---------------------------------------------------------------------------\n  async enqOne(message) {\n    errors.assertArgCount(arguments, 1, 1);\n    message = this._verifyMessage(message);\n    const msgImpl = await this._impl.enqOne(message);\n    return this._makeMessage(msgImpl);\n  }\n\n  //---------------------------------------------------------------------------\n  // enqOptions\n  //\n  // Property for the enqueue options associated with the queue.\n  //---------------------------------------------------------------------------\n  get enqOptions() {\n    if (!this._enqOptions) {\n      const enqOptions = new AqEnqOptions();\n      enqOptions._impl = this._impl.enqOptions;\n      this._enqOptions = enqOptions;\n    }\n    return this._enqOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the queue.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._name;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadType\n  //\n  // Property for the payload type.\n  //---------------------------------------------------------------------------\n  get payloadType() {\n    return this._payloadType;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadTypeName\n  //\n  // Property for the payload type name.\n  //---------------------------------------------------------------------------\n  get payloadTypeName() {\n    return this._payloadTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadTypeClass\n  //\n  // Property for the payload type class.\n  //---------------------------------------------------------------------------\n  get payloadTypeClass() {\n    return this._payloadTypeClass;\n  }\n}\nnodbUtil.wrapFns(AqQueue.prototype, \"deqOne\", \"deqMany\", \"enqOne\", \"enqMany\");\nmodule.exports = AqQueue;","map":{"version":3,"names":["Buffer","require","errors","nodbUtil","AqDeqOptions","AqEnqOptions","AqMessage","BaseDbObject","transformer","types","AqQueue","_isPayload","value","isBuffer","_makeMessage","msgImpl","msg","_impl","_payloadTypeClass","_verifyMessage","message","payload","_isJson","throwErr","ERR_INVALID_AQ_MESSAGE","transformJsonValue","from","correlation","undefined","assertParamPropValue","delay","Number","isInteger","exceptionQueue","expiration","priority","recipients","isArrayOfStrings","create","conn","name","options","payloadType","DB_TYPE_JSON","_payloadType","_payloadTypeName","DB_TYPE_RAW","cls","_getDbObjectClassForName","isObject","prototype","DB_TYPE_OBJECT","_name","getQueue","deqMany","maxMessages","assertArgCount","arguments","assertParamValue","msgImpls","map","i","deqOne","deqOptions","_deqOptions","enqMany","messages","Array","isArray","length","verifiedMessages","enqOne","enqOptions","_enqOptions","payloadTypeName","payloadTypeClass","wrapFns","module","exports"],"sources":["C:/Users/user1/Desktop/finalproject_penpick/node_modules/oracledb/lib/aqQueue.js"],"sourcesContent":["// Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst AqDeqOptions = require('./aqDeqOptions.js');\nconst AqEnqOptions = require('./aqEnqOptions.js');\nconst AqMessage = require('./aqMessage.js');\nconst BaseDbObject = require('./dbObject.js');\nconst transformer = require('./transformer.js');\nconst types = require('./types.js');\n\nclass AqQueue {\n\n  //---------------------------------------------------------------------------\n  // _isPayload()\n  //\n  // Returns a boolean indicating if the value is a valid payload.\n  //---------------------------------------------------------------------------\n  _isPayload(value) {\n    return (typeof value === 'string' || Buffer.isBuffer(value) ||\n        value instanceof BaseDbObject);\n  }\n\n  //---------------------------------------------------------------------------\n  // _makeMessage()\n  //\n  // For enqOne()/deqOne()/enqMany()/deqMany(), wrap the return value with JS\n  // layer object.\n  //---------------------------------------------------------------------------\n  _makeMessage(msgImpl) {\n    const msg = new AqMessage();\n    msg._impl = msgImpl;\n    msg._payloadTypeClass = this._payloadTypeClass;\n    return msg;\n  }\n\n  //---------------------------------------------------------------------------\n  // _verifyMessage()\n  //\n  // Messages that can be enqueued must be a string, Buffer or database object\n  // (in which case all message properties are defaulted) or an object\n  // containing a \"payload\" property along with the other properties to use\n  // during the enqueue. A normalized object is returned.\n  //---------------------------------------------------------------------------\n  _verifyMessage(message) {\n\n    // validate we have a payload of the correct type\n    let payload;\n    if (this._isPayload(message)) {\n      payload = message;\n      message = {};\n    } else {\n      message = {...message};\n      if (this._isJson || this._isPayload(message.payload)) {\n        payload = message.payload;\n      } else if (this._payloadTypeClass) {\n        payload = new this._payloadTypeClass(message.payload);\n      } else {\n        errors.throwErr(errors.ERR_INVALID_AQ_MESSAGE);\n      }\n    }\n\n    // validate payload\n    if (this._isJson) {\n      message.payload = transformer.transformJsonValue(payload);\n    } else if (typeof payload === 'string') {\n      message.payload = Buffer.from(payload);\n    } else if (Buffer.isBuffer(payload)) {\n      message.payload = payload;\n    } else {\n      message.payload = payload._impl;\n    }\n\n    // validate options, if applicable\n    if (message.correlation !== undefined) {\n      errors.assertParamPropValue(typeof message.correlation === 'string', 1,\n        \"correlation\");\n    }\n    if (message.delay !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.delay), 1, \"delay\");\n    }\n    if (message.exceptionQueue !== undefined) {\n      errors.assertParamPropValue(typeof message.exceptionQueue === 'string',\n        1, \"exceptionQueue\");\n    }\n    if (message.expiration !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.expiration), 1,\n        \"expiration\");\n    }\n    if (message.priority !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.priority), 1,\n        \"priority\");\n    }\n    if (message.recipients !== undefined) {\n      errors.assertParamPropValue(nodbUtil.isArrayOfStrings(message.recipients),\n        1, \"recipients\");\n    }\n\n    return message;\n  }\n\n  //---------------------------------------------------------------------------\n  // create()\n  //\n  // Creates the queue and populates some internal attributes.\n  //---------------------------------------------------------------------------\n  async create(conn, name, options) {\n    if (options.payloadType === types.DB_TYPE_JSON) {\n      this._isJson = true;\n      this._payloadType = types.DB_TYPE_JSON;\n      this._payloadTypeName = \"JSON\";\n    } else if (options.payloadType === undefined ||\n               options.payloadType === types.DB_TYPE_RAW) {\n      this._payloadType = types.DB_TYPE_RAW;\n      this._payloadTypeName = \"RAW\";\n    } else {\n      if (typeof options.payloadType === 'string') {\n        // DB Object type\n        const cls = await conn._getDbObjectClassForName(options.payloadType);\n        this._payloadTypeClass = cls;\n        options.payloadType = cls;\n      } else {\n        errors.assertParamPropValue(nodbUtil.isObject(options.payloadType) &&\n          options.payloadType.prototype instanceof BaseDbObject, 2, \"payloadType\");\n        this._payloadTypeClass = options.payloadType;\n      }\n      this._payloadType = types.DB_TYPE_OBJECT;\n      this._payloadTypeName = this._payloadTypeClass.prototype.name;\n    }\n    this._name = name;\n    this._impl = await conn._impl.getQueue(name, this._payloadTypeClass,\n      this._payloadType);\n  }\n\n  //---------------------------------------------------------------------------\n  // deqMany()\n  //\n  // Returns an array of messages from the queue, up to the maximum specified,\n  // if any are available.\n  //---------------------------------------------------------------------------\n  async deqMany(maxMessages) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(maxMessages) && maxMessages > 0,\n      1);\n    const msgImpls = await this._impl.deqMany(maxMessages);\n    return  msgImpls.map(i => this._makeMessage(i));\n  }\n\n  //---------------------------------------------------------------------------\n  // deqOne()\n  //\n  // Returns a single message from the queue, if one is available.\n  //---------------------------------------------------------------------------\n  async deqOne() {\n    errors.assertArgCount(arguments, 0, 0);\n    const msgImpl = await this._impl.deqOne();\n    if (msgImpl)\n      return this._makeMessage(msgImpl);\n  }\n\n  //---------------------------------------------------------------------------\n  // deqOptions\n  //\n  // Property for the dequeue options associated with the queue.\n  //---------------------------------------------------------------------------\n  get deqOptions() {\n    if (!this._deqOptions) {\n      const deqOptions = new AqDeqOptions();\n      deqOptions._impl = this._impl.deqOptions;\n      this._deqOptions = deqOptions;\n    }\n    return this._deqOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // enqMany()\n  //\n  // Enqueues multiple messages into the queue at the same time, avoiding\n  // multiple round-trips.\n  //---------------------------------------------------------------------------\n  async enqMany(messages) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Array.isArray(messages) && messages.length > 0, 1);\n    const verifiedMessages = new Array(messages.length);\n    for (let i = 0; i < messages.length; i++) {\n      verifiedMessages[i] = this._verifyMessage(messages[i]);\n    }\n    const msgImpls = await this._impl.enqMany(verifiedMessages);\n    return msgImpls.map(i => this._makeMessage(i));\n  }\n\n  //---------------------------------------------------------------------------\n  // enqOne()\n  //\n  // Enqueues a single message into the queue.\n  //---------------------------------------------------------------------------\n  async enqOne(message) {\n    errors.assertArgCount(arguments, 1, 1);\n    message = this._verifyMessage(message);\n    const msgImpl = await this._impl.enqOne(message);\n    return this._makeMessage(msgImpl);\n  }\n\n  //---------------------------------------------------------------------------\n  // enqOptions\n  //\n  // Property for the enqueue options associated with the queue.\n  //---------------------------------------------------------------------------\n  get enqOptions() {\n    if (!this._enqOptions) {\n      const enqOptions = new AqEnqOptions();\n      enqOptions._impl = this._impl.enqOptions;\n      this._enqOptions = enqOptions;\n    }\n    return this._enqOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the queue.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._name;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadType\n  //\n  // Property for the payload type.\n  //---------------------------------------------------------------------------\n  get payloadType() {\n    return this._payloadType;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadTypeName\n  //\n  // Property for the payload type name.\n  //---------------------------------------------------------------------------\n  get payloadTypeName() {\n    return this._payloadTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadTypeClass\n  //\n  // Property for the payload type class.\n  //---------------------------------------------------------------------------\n  get payloadTypeClass() {\n    return this._payloadTypeClass;\n  }\n\n}\n\nnodbUtil.wrapFns(AqQueue.prototype,\n  \"deqOne\",\n  \"deqMany\",\n  \"enqOne\",\n  \"enqMany\");\n\nmodule.exports = AqQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}