{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaury\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\PenPick_project\\\\finalProject\\\\front\\\\src\\\\component\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport Stomp from 'webstomp-client';\nimport React, { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  // 받은 메시지를 저장하기 위한 상태\n  const [messages, setMessages] = useState([]);\n\n  // Stomp 클라이언트를 저장하기 위한 상태\n  // const [stompClient, setStompClient] = useState(null);\n\n  // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\n  const [inputMessage, setInputMessage] = useState('');\n  const stompClient = new SockJS.Client({\n    brokerURL: 'ws://localhost:8081/websocket'\n  });\n  stompClient.onConnect = frame => {\n    setConnected(true);\n    console.log('Connected: ' + frame);\n    stompClient.subscribe('/topic/greetings', greeting => {\n      showGreeting(JSON.parse(greeting.body).content);\n    });\n  };\n\n  // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\n  useEffect(() => {\n    // WebSocket 연결을 설정하는 함수\n    const connect = () => {\n      // WebSocket 통신을 위한 SockJS 객체 생성\n      const socket = new SockJS('/websocket');\n      console.log('여기까지 됨');\n      // WebSocket 연결 위에 Stomp 클라이언트 생성\n      var stomp = Stomp.over(socket);\n      console.log('여기까지도 됨');\n      // WebSocket 서버에 연결\n      stomp.connect({}, frame => {\n        console.log('연결됨: ' + frame);\n        // Stomp 클라이언트를 컴포넌트 상태에 설정\n        setStompClient(stomp);\n        stomp.activate();\n      });\n    };\n    // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\n    connect();\n  }, []);\n  const sendMessage = content => {\n    if (stompClient) {\n      // 내용과 송신자 정보를 포함한 메시지 객체 생성\n      const message = {\n        content,\n        sender: 'user'\n      };\n\n      // 메시지를 '/app/chat' 목적지로 서버에 전송\n      stompClient.send('/app/websocket', {}, JSON.stringify(message));\n    } else {\n      console.error('Stomp client is not initialized.');\n    }\n  };\n\n  // '/topic/messages' 목적지에서 메시지를 구독하는 함수\n  const subscribeToMessages = () => {\n    // '/topic/messages' 목적지를 구독\n    stompClient.subscribe('/topic/messages', response => {\n      // 받은 메시지를 파싱하고 상태에 추가\n      const message = JSON.parse(response.body);\n      setMessages([...messages, message]);\n    });\n  };\n\n  // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\n  useEffect(() => {\n    if (stompClient) {\n      subscribeToMessages();\n    }\n  }, [stompClient]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [message.sender, \": \", message.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setInputMessage(e.target.value),\n      value: inputMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage(inputMessage),\n      children: \"\\uC804\\uC1A1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"KBHhUo2NogTtDlYwiFq3Esqk+Dg=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Stomp","React","useState","useEffect","SockJS","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputMessage","setInputMessage","stompClient","Client","brokerURL","onConnect","frame","setConnected","console","log","subscribe","greeting","showGreeting","JSON","parse","body","content","connect","socket","stomp","over","setStompClient","activate","sendMessage","message","sender","send","stringify","error","subscribeToMessages","response","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gaury/OneDrive/바탕 화면/PenPick_project/finalProject/front/src/component/Chat.js"],"sourcesContent":["import Stomp from 'webstomp-client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport SockJS from 'sockjs-client';\r\n\r\nconst Chat = () => {\r\n    // 받은 메시지를 저장하기 위한 상태\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Stomp 클라이언트를 저장하기 위한 상태\r\n    // const [stompClient, setStompClient] = useState(null);\r\n\r\n    // 사용자로부터 입력받은 메시지를 저장하기 위한 상태\r\n    const [inputMessage, setInputMessage] = useState('');\r\n\r\n\r\n    const stompClient = new SockJS.Client({\r\n        brokerURL: 'ws://localhost:8081/websocket'\r\n    });\r\n\r\n    stompClient.onConnect = (frame) => {\r\n        setConnected(true);\r\n        console.log('Connected: ' + frame);\r\n        stompClient.subscribe('/topic/greetings', (greeting) => {\r\n            showGreeting(JSON.parse(greeting.body).content);\r\n        });\r\n    };\r\n\r\n    // 컴포넌트가 마운트될 때 WebSocket 서버에 연결하기 위한 효과 훅\r\n    useEffect(() => {\r\n        // WebSocket 연결을 설정하는 함수\r\n        const connect = () => {\r\n            // WebSocket 통신을 위한 SockJS 객체 생성\r\n            const socket = new SockJS('/websocket');\r\n            console.log('여기까지 됨');\r\n            // WebSocket 연결 위에 Stomp 클라이언트 생성\r\n            var stomp = Stomp.over(socket);\r\n            console.log('여기까지도 됨');\r\n            // WebSocket 서버에 연결\r\n            stomp.connect({}, frame => {\r\n                console.log('연결됨: ' + frame);\r\n                // Stomp 클라이언트를 컴포넌트 상태에 설정\r\n                setStompClient(stomp);\r\n                stomp.activate()\r\n            });\r\n        };\r\n        // 컴포넌트가 마운트될 때 한 번만 실행되도록 하기 위해 빈 의존성 배열 사용\r\n        connect();\r\n\r\n    }, []);\r\n\r\n    const sendMessage = content => {\r\n        if (stompClient) {\r\n            // 내용과 송신자 정보를 포함한 메시지 객체 생성\r\n            const message = { content, sender: 'user' };\r\n    \r\n            // 메시지를 '/app/chat' 목적지로 서버에 전송\r\n            stompClient.send('/app/websocket', {}, JSON.stringify(message));\r\n        } else {\r\n            console.error('Stomp client is not initialized.');\r\n        }\r\n    };\r\n\r\n    // '/topic/messages' 목적지에서 메시지를 구독하는 함수\r\n    const subscribeToMessages = () => {\r\n        // '/topic/messages' 목적지를 구독\r\n        stompClient.subscribe('/topic/messages', response => {\r\n            // 받은 메시지를 파싱하고 상태에 추가\r\n            const message = JSON.parse(response.body);\r\n            setMessages([...messages, message]);\r\n        });\r\n    };\r\n\r\n    // Stomp 클라이언트가 설정되면 메시지를 구독하기 위한 효과 훅\r\n    useEffect(() => {\r\n        if (stompClient) {\r\n            subscribeToMessages();\r\n        }\r\n    }, [stompClient]);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {messages.map((message, index) => (\r\n                    <div key={index}>\r\n                        {message.sender}: {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                onChange={e => setInputMessage(e.target.value)}\r\n                value={inputMessage}\r\n            />\r\n            <button onClick={() => sendMessage(inputMessage)}>전송</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}